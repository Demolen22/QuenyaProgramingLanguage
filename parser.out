Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CLOSE_CURL_BRACKET
    NULL
    OPEN_CURL_BRACKET

Grammar

Rule 0     S' -> program_decl
Rule 1     program_decl -> PROGRAM block
Rule 2     comment -> COMMENT
Rule 3     block -> BEGIN lines END
Rule 4     lines -> lines line
Rule 5     lines -> line
Rule 6     line -> var_decl
Rule 7     line -> var_assign
Rule 8     line -> if_stat
Rule 9     line -> comment
Rule 10    line -> print
Rule 11    line -> loop
Rule 12    line -> func_decl
Rule 13    line -> table_decl
Rule 14    line -> table_assign
Rule 15    loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END
Rule 16    print -> PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE
Rule 17    table_decl -> LIST type NUMBER ID ENDLINE
Rule 18    table_assign -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE
Rule 19    table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET
Rule 20    func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n
Rule 21    var_decl -> INT ID ASSIGN factor_n ENDLINE
Rule 22    var_decl -> STRING ID ASSIGN string_opers ENDLINE
Rule 23    var_assign -> ID ASSIGN factor_n ENDLINE
Rule 24    var_assign -> ID ASSIGN string_opers ENDLINE
Rule 25    string_opers -> string_opers PLUS STRING_EXPR
Rule 26    string_opers -> string_opers MINUS STRING_EXPR
Rule 27    string_opers -> STRING_EXPR
Rule 28    type -> INT
Rule 29    type -> STRING
Rule 30    func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET
Rule 31    arg -> type ID
Rule 32    args -> args arg
Rule 33    args -> arg
Rule 34    if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if
Rule 35    end_if -> END
Rule 36    end_if -> else_stat
Rule 37    else_stat -> ELSE THEN lines END
Rule 38    expr -> expr oper_add comp
Rule 39    expr -> comp
Rule 40    brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET
Rule 41    oper_add -> PLUS
Rule 42    oper_add -> MINUS
Rule 43    oper_mult -> MULT
Rule 44    oper_mult -> DIV
Rule 45    oper_mult -> MOD
Rule 46    oper_mult -> AND
Rule 47    oper_mult -> OR
Rule 48    oper_mult -> XOR
Rule 49    oper_mult -> LESSER
Rule 50    oper_mult -> GREATER
Rule 51    oper_mult -> EQUAL
Rule 52    oper_mult -> LESSER_EQ
Rule 53    oper_mult -> GREATER_EQ
Rule 54    oper_mult -> N_EQUAL
Rule 55    factor -> ID
Rule 56    factor -> NUMBER
Rule 57    factor -> brac_expr
Rule 58    factor -> func_call
Rule 59    factor -> table_read
Rule 60    factor_n -> NOT factor
Rule 61    factor_n -> factor
Rule 62    factors_n -> factor_n
Rule 63    factors_n -> factors_n factor_n
Rule 64    comp -> comp oper_mult factor_n
Rule 65    comp -> factor_n

Terminals, with rules where they appear

AND                  : 46
ASSIGN               : 18 21 22 23 24
BEGIN                : 3 15 20
CLOSE_BRACKET        : 15 16 20 30 34 40
CLOSE_CURL_BRACKET   : 
CLOSE_SQ_BRACKET     : 18 19
COMMENT              : 2
DIV                  : 44
ELSE                 : 37
END                  : 3 15 35 37
ENDLINE              : 16 17 18 21 22 23 24
EQUAL                : 51
FUNCTION             : 20
GREATER              : 50
GREATER_EQ           : 53
ID                   : 17 18 19 20 21 22 23 24 30 31 55
IF                   : 34
INT                  : 21 28
LESSER               : 49
LESSER_EQ            : 52
LIST                 : 17
LOOP                 : 15
MINUS                : 26 42
MOD                  : 45
MULT                 : 43
NOT                  : 60
NULL                 : 
NUMBER               : 17 56
N_EQUAL              : 54
OPEN_BRACKET         : 15 16 20 30 34 40
OPEN_CURL_BRACKET    : 
OPEN_SQ_BRACKET      : 18 19
OR                   : 47
PLUS                 : 25 41
PRINT                : 16
PROGRAM              : 1
RETURN               : 20
STRING               : 22 29
STRING_EXPR          : 25 26 27
THEN                 : 34 37
XOR                  : 48
error                : 

Nonterminals, with rules where they appear

arg                  : 32 33
args                 : 20 32
block                : 1
brac_expr            : 57
comment              : 9
comp                 : 38 39 64
else_stat            : 36
end_if               : 34
expr                 : 15 16 34 38 40
factor               : 60 61
factor_n             : 18 18 19 20 21 23 62 63 64 65
factors_n            : 30 63
func_call            : 58
func_decl            : 12
if_stat              : 8
line                 : 4 5
lines                : 3 4 15 20 34 37
loop                 : 11
oper_add             : 38
oper_mult            : 64
print                : 10
program_decl         : 0
string_opers         : 22 24 25 26
table_assign         : 14
table_decl           : 13
table_read           : 59
type                 : 17 31
var_assign           : 7
var_decl             : 6

Parsing method: LALR

state 0

    (0) S' -> . program_decl
    (1) program_decl -> . PROGRAM block

    PROGRAM         shift and go to state 2

    program_decl                   shift and go to state 1

state 1

    (0) S' -> program_decl .



state 2

    (1) program_decl -> PROGRAM . block
    (3) block -> . BEGIN lines END

    BEGIN           shift and go to state 4

    block                          shift and go to state 3

state 3

    (1) program_decl -> PROGRAM block .

    $end            reduce using rule 1 (program_decl -> PROGRAM block .)


state 4

    (3) block -> BEGIN . lines END
    (4) lines -> . lines line
    (5) lines -> . line
    (6) line -> . var_decl
    (7) line -> . var_assign
    (8) line -> . if_stat
    (9) line -> . comment
    (10) line -> . print
    (11) line -> . loop
    (12) line -> . func_decl
    (13) line -> . table_decl
    (14) line -> . table_assign
    (21) var_decl -> . INT ID ASSIGN factor_n ENDLINE
    (22) var_decl -> . STRING ID ASSIGN string_opers ENDLINE
    (23) var_assign -> . ID ASSIGN factor_n ENDLINE
    (24) var_assign -> . ID ASSIGN string_opers ENDLINE
    (34) if_stat -> . IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if
    (2) comment -> . COMMENT
    (16) print -> . PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE
    (15) loop -> . LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END
    (20) func_decl -> . FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n
    (17) table_decl -> . LIST type NUMBER ID ENDLINE
    (18) table_assign -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE

    INT             shift and go to state 16
    STRING          shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    COMMENT         shift and go to state 20
    PRINT           shift and go to state 21
    LOOP            shift and go to state 22
    FUNCTION        shift and go to state 23
    LIST            shift and go to state 24

    lines                          shift and go to state 5
    line                           shift and go to state 6
    var_decl                       shift and go to state 7
    var_assign                     shift and go to state 8
    if_stat                        shift and go to state 9
    comment                        shift and go to state 10
    print                          shift and go to state 11
    loop                           shift and go to state 12
    func_decl                      shift and go to state 13
    table_decl                     shift and go to state 14
    table_assign                   shift and go to state 15

state 5

    (3) block -> BEGIN lines . END
    (4) lines -> lines . line
    (6) line -> . var_decl
    (7) line -> . var_assign
    (8) line -> . if_stat
    (9) line -> . comment
    (10) line -> . print
    (11) line -> . loop
    (12) line -> . func_decl
    (13) line -> . table_decl
    (14) line -> . table_assign
    (21) var_decl -> . INT ID ASSIGN factor_n ENDLINE
    (22) var_decl -> . STRING ID ASSIGN string_opers ENDLINE
    (23) var_assign -> . ID ASSIGN factor_n ENDLINE
    (24) var_assign -> . ID ASSIGN string_opers ENDLINE
    (34) if_stat -> . IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if
    (2) comment -> . COMMENT
    (16) print -> . PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE
    (15) loop -> . LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END
    (20) func_decl -> . FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n
    (17) table_decl -> . LIST type NUMBER ID ENDLINE
    (18) table_assign -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE

    END             shift and go to state 25
    INT             shift and go to state 16
    STRING          shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    COMMENT         shift and go to state 20
    PRINT           shift and go to state 21
    LOOP            shift and go to state 22
    FUNCTION        shift and go to state 23
    LIST            shift and go to state 24

    line                           shift and go to state 26
    var_decl                       shift and go to state 7
    var_assign                     shift and go to state 8
    if_stat                        shift and go to state 9
    comment                        shift and go to state 10
    print                          shift and go to state 11
    loop                           shift and go to state 12
    func_decl                      shift and go to state 13
    table_decl                     shift and go to state 14
    table_assign                   shift and go to state 15

state 6

    (5) lines -> line .

    END             reduce using rule 5 (lines -> line .)
    INT             reduce using rule 5 (lines -> line .)
    STRING          reduce using rule 5 (lines -> line .)
    ID              reduce using rule 5 (lines -> line .)
    IF              reduce using rule 5 (lines -> line .)
    COMMENT         reduce using rule 5 (lines -> line .)
    PRINT           reduce using rule 5 (lines -> line .)
    LOOP            reduce using rule 5 (lines -> line .)
    FUNCTION        reduce using rule 5 (lines -> line .)
    LIST            reduce using rule 5 (lines -> line .)
    ELSE            reduce using rule 5 (lines -> line .)
    RETURN          reduce using rule 5 (lines -> line .)


state 7

    (6) line -> var_decl .

    END             reduce using rule 6 (line -> var_decl .)
    INT             reduce using rule 6 (line -> var_decl .)
    STRING          reduce using rule 6 (line -> var_decl .)
    ID              reduce using rule 6 (line -> var_decl .)
    IF              reduce using rule 6 (line -> var_decl .)
    COMMENT         reduce using rule 6 (line -> var_decl .)
    PRINT           reduce using rule 6 (line -> var_decl .)
    LOOP            reduce using rule 6 (line -> var_decl .)
    FUNCTION        reduce using rule 6 (line -> var_decl .)
    LIST            reduce using rule 6 (line -> var_decl .)
    ELSE            reduce using rule 6 (line -> var_decl .)
    RETURN          reduce using rule 6 (line -> var_decl .)


state 8

    (7) line -> var_assign .

    END             reduce using rule 7 (line -> var_assign .)
    INT             reduce using rule 7 (line -> var_assign .)
    STRING          reduce using rule 7 (line -> var_assign .)
    ID              reduce using rule 7 (line -> var_assign .)
    IF              reduce using rule 7 (line -> var_assign .)
    COMMENT         reduce using rule 7 (line -> var_assign .)
    PRINT           reduce using rule 7 (line -> var_assign .)
    LOOP            reduce using rule 7 (line -> var_assign .)
    FUNCTION        reduce using rule 7 (line -> var_assign .)
    LIST            reduce using rule 7 (line -> var_assign .)
    ELSE            reduce using rule 7 (line -> var_assign .)
    RETURN          reduce using rule 7 (line -> var_assign .)


state 9

    (8) line -> if_stat .

    END             reduce using rule 8 (line -> if_stat .)
    INT             reduce using rule 8 (line -> if_stat .)
    STRING          reduce using rule 8 (line -> if_stat .)
    ID              reduce using rule 8 (line -> if_stat .)
    IF              reduce using rule 8 (line -> if_stat .)
    COMMENT         reduce using rule 8 (line -> if_stat .)
    PRINT           reduce using rule 8 (line -> if_stat .)
    LOOP            reduce using rule 8 (line -> if_stat .)
    FUNCTION        reduce using rule 8 (line -> if_stat .)
    LIST            reduce using rule 8 (line -> if_stat .)
    ELSE            reduce using rule 8 (line -> if_stat .)
    RETURN          reduce using rule 8 (line -> if_stat .)


state 10

    (9) line -> comment .

    END             reduce using rule 9 (line -> comment .)
    INT             reduce using rule 9 (line -> comment .)
    STRING          reduce using rule 9 (line -> comment .)
    ID              reduce using rule 9 (line -> comment .)
    IF              reduce using rule 9 (line -> comment .)
    COMMENT         reduce using rule 9 (line -> comment .)
    PRINT           reduce using rule 9 (line -> comment .)
    LOOP            reduce using rule 9 (line -> comment .)
    FUNCTION        reduce using rule 9 (line -> comment .)
    LIST            reduce using rule 9 (line -> comment .)
    ELSE            reduce using rule 9 (line -> comment .)
    RETURN          reduce using rule 9 (line -> comment .)


state 11

    (10) line -> print .

    END             reduce using rule 10 (line -> print .)
    INT             reduce using rule 10 (line -> print .)
    STRING          reduce using rule 10 (line -> print .)
    ID              reduce using rule 10 (line -> print .)
    IF              reduce using rule 10 (line -> print .)
    COMMENT         reduce using rule 10 (line -> print .)
    PRINT           reduce using rule 10 (line -> print .)
    LOOP            reduce using rule 10 (line -> print .)
    FUNCTION        reduce using rule 10 (line -> print .)
    LIST            reduce using rule 10 (line -> print .)
    ELSE            reduce using rule 10 (line -> print .)
    RETURN          reduce using rule 10 (line -> print .)


state 12

    (11) line -> loop .

    END             reduce using rule 11 (line -> loop .)
    INT             reduce using rule 11 (line -> loop .)
    STRING          reduce using rule 11 (line -> loop .)
    ID              reduce using rule 11 (line -> loop .)
    IF              reduce using rule 11 (line -> loop .)
    COMMENT         reduce using rule 11 (line -> loop .)
    PRINT           reduce using rule 11 (line -> loop .)
    LOOP            reduce using rule 11 (line -> loop .)
    FUNCTION        reduce using rule 11 (line -> loop .)
    LIST            reduce using rule 11 (line -> loop .)
    ELSE            reduce using rule 11 (line -> loop .)
    RETURN          reduce using rule 11 (line -> loop .)


state 13

    (12) line -> func_decl .

    END             reduce using rule 12 (line -> func_decl .)
    INT             reduce using rule 12 (line -> func_decl .)
    STRING          reduce using rule 12 (line -> func_decl .)
    ID              reduce using rule 12 (line -> func_decl .)
    IF              reduce using rule 12 (line -> func_decl .)
    COMMENT         reduce using rule 12 (line -> func_decl .)
    PRINT           reduce using rule 12 (line -> func_decl .)
    LOOP            reduce using rule 12 (line -> func_decl .)
    FUNCTION        reduce using rule 12 (line -> func_decl .)
    LIST            reduce using rule 12 (line -> func_decl .)
    ELSE            reduce using rule 12 (line -> func_decl .)
    RETURN          reduce using rule 12 (line -> func_decl .)


state 14

    (13) line -> table_decl .

    END             reduce using rule 13 (line -> table_decl .)
    INT             reduce using rule 13 (line -> table_decl .)
    STRING          reduce using rule 13 (line -> table_decl .)
    ID              reduce using rule 13 (line -> table_decl .)
    IF              reduce using rule 13 (line -> table_decl .)
    COMMENT         reduce using rule 13 (line -> table_decl .)
    PRINT           reduce using rule 13 (line -> table_decl .)
    LOOP            reduce using rule 13 (line -> table_decl .)
    FUNCTION        reduce using rule 13 (line -> table_decl .)
    LIST            reduce using rule 13 (line -> table_decl .)
    ELSE            reduce using rule 13 (line -> table_decl .)
    RETURN          reduce using rule 13 (line -> table_decl .)


state 15

    (14) line -> table_assign .

    END             reduce using rule 14 (line -> table_assign .)
    INT             reduce using rule 14 (line -> table_assign .)
    STRING          reduce using rule 14 (line -> table_assign .)
    ID              reduce using rule 14 (line -> table_assign .)
    IF              reduce using rule 14 (line -> table_assign .)
    COMMENT         reduce using rule 14 (line -> table_assign .)
    PRINT           reduce using rule 14 (line -> table_assign .)
    LOOP            reduce using rule 14 (line -> table_assign .)
    FUNCTION        reduce using rule 14 (line -> table_assign .)
    LIST            reduce using rule 14 (line -> table_assign .)
    ELSE            reduce using rule 14 (line -> table_assign .)
    RETURN          reduce using rule 14 (line -> table_assign .)


state 16

    (21) var_decl -> INT . ID ASSIGN factor_n ENDLINE

    ID              shift and go to state 27


state 17

    (23) var_assign -> ID . ASSIGN factor_n ENDLINE
    (24) var_assign -> ID . ASSIGN string_opers ENDLINE
    (18) table_assign -> ID . OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE

    ASSIGN          shift and go to state 28
    OPEN_SQ_BRACKET shift and go to state 29


state 18

    (22) var_decl -> STRING . ID ASSIGN string_opers ENDLINE

    ID              shift and go to state 30


state 19

    (34) if_stat -> IF . OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if

    OPEN_BRACKET    shift and go to state 31


state 20

    (2) comment -> COMMENT .

    END             reduce using rule 2 (comment -> COMMENT .)
    INT             reduce using rule 2 (comment -> COMMENT .)
    STRING          reduce using rule 2 (comment -> COMMENT .)
    ID              reduce using rule 2 (comment -> COMMENT .)
    IF              reduce using rule 2 (comment -> COMMENT .)
    COMMENT         reduce using rule 2 (comment -> COMMENT .)
    PRINT           reduce using rule 2 (comment -> COMMENT .)
    LOOP            reduce using rule 2 (comment -> COMMENT .)
    FUNCTION        reduce using rule 2 (comment -> COMMENT .)
    LIST            reduce using rule 2 (comment -> COMMENT .)
    ELSE            reduce using rule 2 (comment -> COMMENT .)
    RETURN          reduce using rule 2 (comment -> COMMENT .)


state 21

    (16) print -> PRINT . OPEN_BRACKET expr CLOSE_BRACKET ENDLINE

    OPEN_BRACKET    shift and go to state 32


state 22

    (15) loop -> LOOP . OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END

    OPEN_BRACKET    shift and go to state 33


state 23

    (20) func_decl -> FUNCTION . ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n

    ID              shift and go to state 34


state 24

    (17) table_decl -> LIST . type NUMBER ID ENDLINE
    (28) type -> . INT
    (29) type -> . STRING

    INT             shift and go to state 36
    STRING          shift and go to state 37

    type                           shift and go to state 35

state 25

    (3) block -> BEGIN lines END .

    $end            reduce using rule 3 (block -> BEGIN lines END .)


state 26

    (4) lines -> lines line .

    END             reduce using rule 4 (lines -> lines line .)
    INT             reduce using rule 4 (lines -> lines line .)
    STRING          reduce using rule 4 (lines -> lines line .)
    ID              reduce using rule 4 (lines -> lines line .)
    IF              reduce using rule 4 (lines -> lines line .)
    COMMENT         reduce using rule 4 (lines -> lines line .)
    PRINT           reduce using rule 4 (lines -> lines line .)
    LOOP            reduce using rule 4 (lines -> lines line .)
    FUNCTION        reduce using rule 4 (lines -> lines line .)
    LIST            reduce using rule 4 (lines -> lines line .)
    ELSE            reduce using rule 4 (lines -> lines line .)
    RETURN          reduce using rule 4 (lines -> lines line .)


state 27

    (21) var_decl -> INT ID . ASSIGN factor_n ENDLINE

    ASSIGN          shift and go to state 38


state 28

    (23) var_assign -> ID ASSIGN . factor_n ENDLINE
    (24) var_assign -> ID ASSIGN . string_opers ENDLINE
    (60) factor_n -> . NOT factor
    (61) factor_n -> . factor
    (25) string_opers -> . string_opers PLUS STRING_EXPR
    (26) string_opers -> . string_opers MINUS STRING_EXPR
    (27) string_opers -> . STRING_EXPR
    (55) factor -> . ID
    (56) factor -> . NUMBER
    (57) factor -> . brac_expr
    (58) factor -> . func_call
    (59) factor -> . table_read
    (40) brac_expr -> . OPEN_BRACKET expr CLOSE_BRACKET
    (30) func_call -> . ID OPEN_BRACKET factors_n CLOSE_BRACKET
    (19) table_read -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET

    NOT             shift and go to state 42
    STRING_EXPR     shift and go to state 44
    ID              shift and go to state 39
    NUMBER          shift and go to state 45
    OPEN_BRACKET    shift and go to state 49

    factor_n                       shift and go to state 40
    string_opers                   shift and go to state 41
    factor                         shift and go to state 43
    brac_expr                      shift and go to state 46
    func_call                      shift and go to state 47
    table_read                     shift and go to state 48

state 29

    (18) table_assign -> ID OPEN_SQ_BRACKET . factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE
    (60) factor_n -> . NOT factor
    (61) factor_n -> . factor
    (55) factor -> . ID
    (56) factor -> . NUMBER
    (57) factor -> . brac_expr
    (58) factor -> . func_call
    (59) factor -> . table_read
    (40) brac_expr -> . OPEN_BRACKET expr CLOSE_BRACKET
    (30) func_call -> . ID OPEN_BRACKET factors_n CLOSE_BRACKET
    (19) table_read -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET

    NOT             shift and go to state 42
    ID              shift and go to state 39
    NUMBER          shift and go to state 45
    OPEN_BRACKET    shift and go to state 49

    factor_n                       shift and go to state 50
    factor                         shift and go to state 43
    brac_expr                      shift and go to state 46
    func_call                      shift and go to state 47
    table_read                     shift and go to state 48

state 30

    (22) var_decl -> STRING ID . ASSIGN string_opers ENDLINE

    ASSIGN          shift and go to state 51


state 31

    (34) if_stat -> IF OPEN_BRACKET . expr CLOSE_BRACKET THEN lines end_if
    (38) expr -> . expr oper_add comp
    (39) expr -> . comp
    (64) comp -> . comp oper_mult factor_n
    (65) comp -> . factor_n
    (60) factor_n -> . NOT factor
    (61) factor_n -> . factor
    (55) factor -> . ID
    (56) factor -> . NUMBER
    (57) factor -> . brac_expr
    (58) factor -> . func_call
    (59) factor -> . table_read
    (40) brac_expr -> . OPEN_BRACKET expr CLOSE_BRACKET
    (30) func_call -> . ID OPEN_BRACKET factors_n CLOSE_BRACKET
    (19) table_read -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET

    NOT             shift and go to state 42
    ID              shift and go to state 39
    NUMBER          shift and go to state 45
    OPEN_BRACKET    shift and go to state 49

    expr                           shift and go to state 52
    comp                           shift and go to state 53
    factor_n                       shift and go to state 54
    factor                         shift and go to state 43
    brac_expr                      shift and go to state 46
    func_call                      shift and go to state 47
    table_read                     shift and go to state 48

state 32

    (16) print -> PRINT OPEN_BRACKET . expr CLOSE_BRACKET ENDLINE
    (38) expr -> . expr oper_add comp
    (39) expr -> . comp
    (64) comp -> . comp oper_mult factor_n
    (65) comp -> . factor_n
    (60) factor_n -> . NOT factor
    (61) factor_n -> . factor
    (55) factor -> . ID
    (56) factor -> . NUMBER
    (57) factor -> . brac_expr
    (58) factor -> . func_call
    (59) factor -> . table_read
    (40) brac_expr -> . OPEN_BRACKET expr CLOSE_BRACKET
    (30) func_call -> . ID OPEN_BRACKET factors_n CLOSE_BRACKET
    (19) table_read -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET

    NOT             shift and go to state 42
    ID              shift and go to state 39
    NUMBER          shift and go to state 45
    OPEN_BRACKET    shift and go to state 49

    expr                           shift and go to state 55
    comp                           shift and go to state 53
    factor_n                       shift and go to state 54
    factor                         shift and go to state 43
    brac_expr                      shift and go to state 46
    func_call                      shift and go to state 47
    table_read                     shift and go to state 48

state 33

    (15) loop -> LOOP OPEN_BRACKET . expr CLOSE_BRACKET BEGIN lines END
    (38) expr -> . expr oper_add comp
    (39) expr -> . comp
    (64) comp -> . comp oper_mult factor_n
    (65) comp -> . factor_n
    (60) factor_n -> . NOT factor
    (61) factor_n -> . factor
    (55) factor -> . ID
    (56) factor -> . NUMBER
    (57) factor -> . brac_expr
    (58) factor -> . func_call
    (59) factor -> . table_read
    (40) brac_expr -> . OPEN_BRACKET expr CLOSE_BRACKET
    (30) func_call -> . ID OPEN_BRACKET factors_n CLOSE_BRACKET
    (19) table_read -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET

    NOT             shift and go to state 42
    ID              shift and go to state 39
    NUMBER          shift and go to state 45
    OPEN_BRACKET    shift and go to state 49

    expr                           shift and go to state 56
    comp                           shift and go to state 53
    factor_n                       shift and go to state 54
    factor                         shift and go to state 43
    brac_expr                      shift and go to state 46
    func_call                      shift and go to state 47
    table_read                     shift and go to state 48

state 34

    (20) func_decl -> FUNCTION ID . OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n

    OPEN_BRACKET    shift and go to state 57


state 35

    (17) table_decl -> LIST type . NUMBER ID ENDLINE

    NUMBER          shift and go to state 58


state 36

    (28) type -> INT .

    NUMBER          reduce using rule 28 (type -> INT .)
    ID              reduce using rule 28 (type -> INT .)


state 37

    (29) type -> STRING .

    NUMBER          reduce using rule 29 (type -> STRING .)
    ID              reduce using rule 29 (type -> STRING .)


state 38

    (21) var_decl -> INT ID ASSIGN . factor_n ENDLINE
    (60) factor_n -> . NOT factor
    (61) factor_n -> . factor
    (55) factor -> . ID
    (56) factor -> . NUMBER
    (57) factor -> . brac_expr
    (58) factor -> . func_call
    (59) factor -> . table_read
    (40) brac_expr -> . OPEN_BRACKET expr CLOSE_BRACKET
    (30) func_call -> . ID OPEN_BRACKET factors_n CLOSE_BRACKET
    (19) table_read -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET

    NOT             shift and go to state 42
    ID              shift and go to state 39
    NUMBER          shift and go to state 45
    OPEN_BRACKET    shift and go to state 49

    factor_n                       shift and go to state 59
    factor                         shift and go to state 43
    brac_expr                      shift and go to state 46
    func_call                      shift and go to state 47
    table_read                     shift and go to state 48

state 39

    (55) factor -> ID .
    (30) func_call -> ID . OPEN_BRACKET factors_n CLOSE_BRACKET
    (19) table_read -> ID . OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET

  ! shift/reduce conflict for OPEN_BRACKET resolved as shift
    ENDLINE         reduce using rule 55 (factor -> ID .)
    CLOSE_SQ_BRACKET reduce using rule 55 (factor -> ID .)
    MULT            reduce using rule 55 (factor -> ID .)
    DIV             reduce using rule 55 (factor -> ID .)
    MOD             reduce using rule 55 (factor -> ID .)
    AND             reduce using rule 55 (factor -> ID .)
    OR              reduce using rule 55 (factor -> ID .)
    XOR             reduce using rule 55 (factor -> ID .)
    LESSER          reduce using rule 55 (factor -> ID .)
    GREATER         reduce using rule 55 (factor -> ID .)
    EQUAL           reduce using rule 55 (factor -> ID .)
    LESSER_EQ       reduce using rule 55 (factor -> ID .)
    GREATER_EQ      reduce using rule 55 (factor -> ID .)
    N_EQUAL         reduce using rule 55 (factor -> ID .)
    CLOSE_BRACKET   reduce using rule 55 (factor -> ID .)
    PLUS            reduce using rule 55 (factor -> ID .)
    MINUS           reduce using rule 55 (factor -> ID .)
    NOT             reduce using rule 55 (factor -> ID .)
    ID              reduce using rule 55 (factor -> ID .)
    NUMBER          reduce using rule 55 (factor -> ID .)
    END             reduce using rule 55 (factor -> ID .)
    INT             reduce using rule 55 (factor -> ID .)
    STRING          reduce using rule 55 (factor -> ID .)
    IF              reduce using rule 55 (factor -> ID .)
    COMMENT         reduce using rule 55 (factor -> ID .)
    PRINT           reduce using rule 55 (factor -> ID .)
    LOOP            reduce using rule 55 (factor -> ID .)
    FUNCTION        reduce using rule 55 (factor -> ID .)
    LIST            reduce using rule 55 (factor -> ID .)
    ELSE            reduce using rule 55 (factor -> ID .)
    RETURN          reduce using rule 55 (factor -> ID .)
    OPEN_BRACKET    shift and go to state 60
    OPEN_SQ_BRACKET shift and go to state 61

  ! OPEN_BRACKET    [ reduce using rule 55 (factor -> ID .) ]


state 40

    (23) var_assign -> ID ASSIGN factor_n . ENDLINE

    ENDLINE         shift and go to state 62


state 41

    (24) var_assign -> ID ASSIGN string_opers . ENDLINE
    (25) string_opers -> string_opers . PLUS STRING_EXPR
    (26) string_opers -> string_opers . MINUS STRING_EXPR

    ENDLINE         shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65


state 42

    (60) factor_n -> NOT . factor
    (55) factor -> . ID
    (56) factor -> . NUMBER
    (57) factor -> . brac_expr
    (58) factor -> . func_call
    (59) factor -> . table_read
    (40) brac_expr -> . OPEN_BRACKET expr CLOSE_BRACKET
    (30) func_call -> . ID OPEN_BRACKET factors_n CLOSE_BRACKET
    (19) table_read -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET

    ID              shift and go to state 39
    NUMBER          shift and go to state 45
    OPEN_BRACKET    shift and go to state 49

    factor                         shift and go to state 66
    brac_expr                      shift and go to state 46
    func_call                      shift and go to state 47
    table_read                     shift and go to state 48

state 43

    (61) factor_n -> factor .

    ENDLINE         reduce using rule 61 (factor_n -> factor .)
    CLOSE_SQ_BRACKET reduce using rule 61 (factor_n -> factor .)
    MULT            reduce using rule 61 (factor_n -> factor .)
    DIV             reduce using rule 61 (factor_n -> factor .)
    MOD             reduce using rule 61 (factor_n -> factor .)
    AND             reduce using rule 61 (factor_n -> factor .)
    OR              reduce using rule 61 (factor_n -> factor .)
    XOR             reduce using rule 61 (factor_n -> factor .)
    LESSER          reduce using rule 61 (factor_n -> factor .)
    GREATER         reduce using rule 61 (factor_n -> factor .)
    EQUAL           reduce using rule 61 (factor_n -> factor .)
    LESSER_EQ       reduce using rule 61 (factor_n -> factor .)
    GREATER_EQ      reduce using rule 61 (factor_n -> factor .)
    N_EQUAL         reduce using rule 61 (factor_n -> factor .)
    CLOSE_BRACKET   reduce using rule 61 (factor_n -> factor .)
    PLUS            reduce using rule 61 (factor_n -> factor .)
    MINUS           reduce using rule 61 (factor_n -> factor .)
    NOT             reduce using rule 61 (factor_n -> factor .)
    ID              reduce using rule 61 (factor_n -> factor .)
    NUMBER          reduce using rule 61 (factor_n -> factor .)
    OPEN_BRACKET    reduce using rule 61 (factor_n -> factor .)
    END             reduce using rule 61 (factor_n -> factor .)
    INT             reduce using rule 61 (factor_n -> factor .)
    STRING          reduce using rule 61 (factor_n -> factor .)
    IF              reduce using rule 61 (factor_n -> factor .)
    COMMENT         reduce using rule 61 (factor_n -> factor .)
    PRINT           reduce using rule 61 (factor_n -> factor .)
    LOOP            reduce using rule 61 (factor_n -> factor .)
    FUNCTION        reduce using rule 61 (factor_n -> factor .)
    LIST            reduce using rule 61 (factor_n -> factor .)
    ELSE            reduce using rule 61 (factor_n -> factor .)
    RETURN          reduce using rule 61 (factor_n -> factor .)


state 44

    (27) string_opers -> STRING_EXPR .

    ENDLINE         reduce using rule 27 (string_opers -> STRING_EXPR .)
    PLUS            reduce using rule 27 (string_opers -> STRING_EXPR .)
    MINUS           reduce using rule 27 (string_opers -> STRING_EXPR .)


state 45

    (56) factor -> NUMBER .

    ENDLINE         reduce using rule 56 (factor -> NUMBER .)
    CLOSE_SQ_BRACKET reduce using rule 56 (factor -> NUMBER .)
    MULT            reduce using rule 56 (factor -> NUMBER .)
    DIV             reduce using rule 56 (factor -> NUMBER .)
    MOD             reduce using rule 56 (factor -> NUMBER .)
    AND             reduce using rule 56 (factor -> NUMBER .)
    OR              reduce using rule 56 (factor -> NUMBER .)
    XOR             reduce using rule 56 (factor -> NUMBER .)
    LESSER          reduce using rule 56 (factor -> NUMBER .)
    GREATER         reduce using rule 56 (factor -> NUMBER .)
    EQUAL           reduce using rule 56 (factor -> NUMBER .)
    LESSER_EQ       reduce using rule 56 (factor -> NUMBER .)
    GREATER_EQ      reduce using rule 56 (factor -> NUMBER .)
    N_EQUAL         reduce using rule 56 (factor -> NUMBER .)
    CLOSE_BRACKET   reduce using rule 56 (factor -> NUMBER .)
    PLUS            reduce using rule 56 (factor -> NUMBER .)
    MINUS           reduce using rule 56 (factor -> NUMBER .)
    NOT             reduce using rule 56 (factor -> NUMBER .)
    ID              reduce using rule 56 (factor -> NUMBER .)
    NUMBER          reduce using rule 56 (factor -> NUMBER .)
    OPEN_BRACKET    reduce using rule 56 (factor -> NUMBER .)
    END             reduce using rule 56 (factor -> NUMBER .)
    INT             reduce using rule 56 (factor -> NUMBER .)
    STRING          reduce using rule 56 (factor -> NUMBER .)
    IF              reduce using rule 56 (factor -> NUMBER .)
    COMMENT         reduce using rule 56 (factor -> NUMBER .)
    PRINT           reduce using rule 56 (factor -> NUMBER .)
    LOOP            reduce using rule 56 (factor -> NUMBER .)
    FUNCTION        reduce using rule 56 (factor -> NUMBER .)
    LIST            reduce using rule 56 (factor -> NUMBER .)
    ELSE            reduce using rule 56 (factor -> NUMBER .)
    RETURN          reduce using rule 56 (factor -> NUMBER .)


state 46

    (57) factor -> brac_expr .

    ENDLINE         reduce using rule 57 (factor -> brac_expr .)
    CLOSE_SQ_BRACKET reduce using rule 57 (factor -> brac_expr .)
    MULT            reduce using rule 57 (factor -> brac_expr .)
    DIV             reduce using rule 57 (factor -> brac_expr .)
    MOD             reduce using rule 57 (factor -> brac_expr .)
    AND             reduce using rule 57 (factor -> brac_expr .)
    OR              reduce using rule 57 (factor -> brac_expr .)
    XOR             reduce using rule 57 (factor -> brac_expr .)
    LESSER          reduce using rule 57 (factor -> brac_expr .)
    GREATER         reduce using rule 57 (factor -> brac_expr .)
    EQUAL           reduce using rule 57 (factor -> brac_expr .)
    LESSER_EQ       reduce using rule 57 (factor -> brac_expr .)
    GREATER_EQ      reduce using rule 57 (factor -> brac_expr .)
    N_EQUAL         reduce using rule 57 (factor -> brac_expr .)
    CLOSE_BRACKET   reduce using rule 57 (factor -> brac_expr .)
    PLUS            reduce using rule 57 (factor -> brac_expr .)
    MINUS           reduce using rule 57 (factor -> brac_expr .)
    NOT             reduce using rule 57 (factor -> brac_expr .)
    ID              reduce using rule 57 (factor -> brac_expr .)
    NUMBER          reduce using rule 57 (factor -> brac_expr .)
    OPEN_BRACKET    reduce using rule 57 (factor -> brac_expr .)
    END             reduce using rule 57 (factor -> brac_expr .)
    INT             reduce using rule 57 (factor -> brac_expr .)
    STRING          reduce using rule 57 (factor -> brac_expr .)
    IF              reduce using rule 57 (factor -> brac_expr .)
    COMMENT         reduce using rule 57 (factor -> brac_expr .)
    PRINT           reduce using rule 57 (factor -> brac_expr .)
    LOOP            reduce using rule 57 (factor -> brac_expr .)
    FUNCTION        reduce using rule 57 (factor -> brac_expr .)
    LIST            reduce using rule 57 (factor -> brac_expr .)
    ELSE            reduce using rule 57 (factor -> brac_expr .)
    RETURN          reduce using rule 57 (factor -> brac_expr .)


state 47

    (58) factor -> func_call .

    ENDLINE         reduce using rule 58 (factor -> func_call .)
    CLOSE_SQ_BRACKET reduce using rule 58 (factor -> func_call .)
    MULT            reduce using rule 58 (factor -> func_call .)
    DIV             reduce using rule 58 (factor -> func_call .)
    MOD             reduce using rule 58 (factor -> func_call .)
    AND             reduce using rule 58 (factor -> func_call .)
    OR              reduce using rule 58 (factor -> func_call .)
    XOR             reduce using rule 58 (factor -> func_call .)
    LESSER          reduce using rule 58 (factor -> func_call .)
    GREATER         reduce using rule 58 (factor -> func_call .)
    EQUAL           reduce using rule 58 (factor -> func_call .)
    LESSER_EQ       reduce using rule 58 (factor -> func_call .)
    GREATER_EQ      reduce using rule 58 (factor -> func_call .)
    N_EQUAL         reduce using rule 58 (factor -> func_call .)
    CLOSE_BRACKET   reduce using rule 58 (factor -> func_call .)
    PLUS            reduce using rule 58 (factor -> func_call .)
    MINUS           reduce using rule 58 (factor -> func_call .)
    NOT             reduce using rule 58 (factor -> func_call .)
    ID              reduce using rule 58 (factor -> func_call .)
    NUMBER          reduce using rule 58 (factor -> func_call .)
    OPEN_BRACKET    reduce using rule 58 (factor -> func_call .)
    END             reduce using rule 58 (factor -> func_call .)
    INT             reduce using rule 58 (factor -> func_call .)
    STRING          reduce using rule 58 (factor -> func_call .)
    IF              reduce using rule 58 (factor -> func_call .)
    COMMENT         reduce using rule 58 (factor -> func_call .)
    PRINT           reduce using rule 58 (factor -> func_call .)
    LOOP            reduce using rule 58 (factor -> func_call .)
    FUNCTION        reduce using rule 58 (factor -> func_call .)
    LIST            reduce using rule 58 (factor -> func_call .)
    ELSE            reduce using rule 58 (factor -> func_call .)
    RETURN          reduce using rule 58 (factor -> func_call .)


state 48

    (59) factor -> table_read .

    ENDLINE         reduce using rule 59 (factor -> table_read .)
    CLOSE_SQ_BRACKET reduce using rule 59 (factor -> table_read .)
    MULT            reduce using rule 59 (factor -> table_read .)
    DIV             reduce using rule 59 (factor -> table_read .)
    MOD             reduce using rule 59 (factor -> table_read .)
    AND             reduce using rule 59 (factor -> table_read .)
    OR              reduce using rule 59 (factor -> table_read .)
    XOR             reduce using rule 59 (factor -> table_read .)
    LESSER          reduce using rule 59 (factor -> table_read .)
    GREATER         reduce using rule 59 (factor -> table_read .)
    EQUAL           reduce using rule 59 (factor -> table_read .)
    LESSER_EQ       reduce using rule 59 (factor -> table_read .)
    GREATER_EQ      reduce using rule 59 (factor -> table_read .)
    N_EQUAL         reduce using rule 59 (factor -> table_read .)
    CLOSE_BRACKET   reduce using rule 59 (factor -> table_read .)
    PLUS            reduce using rule 59 (factor -> table_read .)
    MINUS           reduce using rule 59 (factor -> table_read .)
    NOT             reduce using rule 59 (factor -> table_read .)
    ID              reduce using rule 59 (factor -> table_read .)
    NUMBER          reduce using rule 59 (factor -> table_read .)
    OPEN_BRACKET    reduce using rule 59 (factor -> table_read .)
    END             reduce using rule 59 (factor -> table_read .)
    INT             reduce using rule 59 (factor -> table_read .)
    STRING          reduce using rule 59 (factor -> table_read .)
    IF              reduce using rule 59 (factor -> table_read .)
    COMMENT         reduce using rule 59 (factor -> table_read .)
    PRINT           reduce using rule 59 (factor -> table_read .)
    LOOP            reduce using rule 59 (factor -> table_read .)
    FUNCTION        reduce using rule 59 (factor -> table_read .)
    LIST            reduce using rule 59 (factor -> table_read .)
    ELSE            reduce using rule 59 (factor -> table_read .)
    RETURN          reduce using rule 59 (factor -> table_read .)


state 49

    (40) brac_expr -> OPEN_BRACKET . expr CLOSE_BRACKET
    (38) expr -> . expr oper_add comp
    (39) expr -> . comp
    (64) comp -> . comp oper_mult factor_n
    (65) comp -> . factor_n
    (60) factor_n -> . NOT factor
    (61) factor_n -> . factor
    (55) factor -> . ID
    (56) factor -> . NUMBER
    (57) factor -> . brac_expr
    (58) factor -> . func_call
    (59) factor -> . table_read
    (40) brac_expr -> . OPEN_BRACKET expr CLOSE_BRACKET
    (30) func_call -> . ID OPEN_BRACKET factors_n CLOSE_BRACKET
    (19) table_read -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET

    NOT             shift and go to state 42
    ID              shift and go to state 39
    NUMBER          shift and go to state 45
    OPEN_BRACKET    shift and go to state 49

    expr                           shift and go to state 67
    comp                           shift and go to state 53
    factor_n                       shift and go to state 54
    factor                         shift and go to state 43
    brac_expr                      shift and go to state 46
    func_call                      shift and go to state 47
    table_read                     shift and go to state 48

state 50

    (18) table_assign -> ID OPEN_SQ_BRACKET factor_n . CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE

    CLOSE_SQ_BRACKET shift and go to state 68


state 51

    (22) var_decl -> STRING ID ASSIGN . string_opers ENDLINE
    (25) string_opers -> . string_opers PLUS STRING_EXPR
    (26) string_opers -> . string_opers MINUS STRING_EXPR
    (27) string_opers -> . STRING_EXPR

    STRING_EXPR     shift and go to state 44

    string_opers                   shift and go to state 69

state 52

    (34) if_stat -> IF OPEN_BRACKET expr . CLOSE_BRACKET THEN lines end_if
    (38) expr -> expr . oper_add comp
    (41) oper_add -> . PLUS
    (42) oper_add -> . MINUS

    CLOSE_BRACKET   shift and go to state 70
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73

    oper_add                       shift and go to state 71

state 53

    (39) expr -> comp .
    (64) comp -> comp . oper_mult factor_n
    (43) oper_mult -> . MULT
    (44) oper_mult -> . DIV
    (45) oper_mult -> . MOD
    (46) oper_mult -> . AND
    (47) oper_mult -> . OR
    (48) oper_mult -> . XOR
    (49) oper_mult -> . LESSER
    (50) oper_mult -> . GREATER
    (51) oper_mult -> . EQUAL
    (52) oper_mult -> . LESSER_EQ
    (53) oper_mult -> . GREATER_EQ
    (54) oper_mult -> . N_EQUAL

    CLOSE_BRACKET   reduce using rule 39 (expr -> comp .)
    PLUS            reduce using rule 39 (expr -> comp .)
    MINUS           reduce using rule 39 (expr -> comp .)
    MULT            shift and go to state 75
    DIV             shift and go to state 76
    MOD             shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    XOR             shift and go to state 80
    LESSER          shift and go to state 81
    GREATER         shift and go to state 82
    EQUAL           shift and go to state 83
    LESSER_EQ       shift and go to state 84
    GREATER_EQ      shift and go to state 85
    N_EQUAL         shift and go to state 86

    oper_mult                      shift and go to state 74

state 54

    (65) comp -> factor_n .

    MULT            reduce using rule 65 (comp -> factor_n .)
    DIV             reduce using rule 65 (comp -> factor_n .)
    MOD             reduce using rule 65 (comp -> factor_n .)
    AND             reduce using rule 65 (comp -> factor_n .)
    OR              reduce using rule 65 (comp -> factor_n .)
    XOR             reduce using rule 65 (comp -> factor_n .)
    LESSER          reduce using rule 65 (comp -> factor_n .)
    GREATER         reduce using rule 65 (comp -> factor_n .)
    EQUAL           reduce using rule 65 (comp -> factor_n .)
    LESSER_EQ       reduce using rule 65 (comp -> factor_n .)
    GREATER_EQ      reduce using rule 65 (comp -> factor_n .)
    N_EQUAL         reduce using rule 65 (comp -> factor_n .)
    CLOSE_BRACKET   reduce using rule 65 (comp -> factor_n .)
    PLUS            reduce using rule 65 (comp -> factor_n .)
    MINUS           reduce using rule 65 (comp -> factor_n .)


state 55

    (16) print -> PRINT OPEN_BRACKET expr . CLOSE_BRACKET ENDLINE
    (38) expr -> expr . oper_add comp
    (41) oper_add -> . PLUS
    (42) oper_add -> . MINUS

    CLOSE_BRACKET   shift and go to state 87
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73

    oper_add                       shift and go to state 71

state 56

    (15) loop -> LOOP OPEN_BRACKET expr . CLOSE_BRACKET BEGIN lines END
    (38) expr -> expr . oper_add comp
    (41) oper_add -> . PLUS
    (42) oper_add -> . MINUS

    CLOSE_BRACKET   shift and go to state 88
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73

    oper_add                       shift and go to state 71

state 57

    (20) func_decl -> FUNCTION ID OPEN_BRACKET . args CLOSE_BRACKET BEGIN lines RETURN factor_n
    (32) args -> . args arg
    (33) args -> . arg
    (31) arg -> . type ID
    (28) type -> . INT
    (29) type -> . STRING

    INT             shift and go to state 36
    STRING          shift and go to state 37

    args                           shift and go to state 89
    arg                            shift and go to state 90
    type                           shift and go to state 91

state 58

    (17) table_decl -> LIST type NUMBER . ID ENDLINE

    ID              shift and go to state 92


state 59

    (21) var_decl -> INT ID ASSIGN factor_n . ENDLINE

    ENDLINE         shift and go to state 93


state 60

    (30) func_call -> ID OPEN_BRACKET . factors_n CLOSE_BRACKET
    (62) factors_n -> . factor_n
    (63) factors_n -> . factors_n factor_n
    (60) factor_n -> . NOT factor
    (61) factor_n -> . factor
    (55) factor -> . ID
    (56) factor -> . NUMBER
    (57) factor -> . brac_expr
    (58) factor -> . func_call
    (59) factor -> . table_read
    (40) brac_expr -> . OPEN_BRACKET expr CLOSE_BRACKET
    (30) func_call -> . ID OPEN_BRACKET factors_n CLOSE_BRACKET
    (19) table_read -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET

    NOT             shift and go to state 42
    ID              shift and go to state 39
    NUMBER          shift and go to state 45
    OPEN_BRACKET    shift and go to state 49

    factors_n                      shift and go to state 94
    factor_n                       shift and go to state 95
    factor                         shift and go to state 43
    brac_expr                      shift and go to state 46
    func_call                      shift and go to state 47
    table_read                     shift and go to state 48

state 61

    (19) table_read -> ID OPEN_SQ_BRACKET . factor_n CLOSE_SQ_BRACKET
    (60) factor_n -> . NOT factor
    (61) factor_n -> . factor
    (55) factor -> . ID
    (56) factor -> . NUMBER
    (57) factor -> . brac_expr
    (58) factor -> . func_call
    (59) factor -> . table_read
    (40) brac_expr -> . OPEN_BRACKET expr CLOSE_BRACKET
    (30) func_call -> . ID OPEN_BRACKET factors_n CLOSE_BRACKET
    (19) table_read -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET

    NOT             shift and go to state 42
    ID              shift and go to state 39
    NUMBER          shift and go to state 45
    OPEN_BRACKET    shift and go to state 49

    factor_n                       shift and go to state 96
    factor                         shift and go to state 43
    brac_expr                      shift and go to state 46
    func_call                      shift and go to state 47
    table_read                     shift and go to state 48

state 62

    (23) var_assign -> ID ASSIGN factor_n ENDLINE .

    END             reduce using rule 23 (var_assign -> ID ASSIGN factor_n ENDLINE .)
    INT             reduce using rule 23 (var_assign -> ID ASSIGN factor_n ENDLINE .)
    STRING          reduce using rule 23 (var_assign -> ID ASSIGN factor_n ENDLINE .)
    ID              reduce using rule 23 (var_assign -> ID ASSIGN factor_n ENDLINE .)
    IF              reduce using rule 23 (var_assign -> ID ASSIGN factor_n ENDLINE .)
    COMMENT         reduce using rule 23 (var_assign -> ID ASSIGN factor_n ENDLINE .)
    PRINT           reduce using rule 23 (var_assign -> ID ASSIGN factor_n ENDLINE .)
    LOOP            reduce using rule 23 (var_assign -> ID ASSIGN factor_n ENDLINE .)
    FUNCTION        reduce using rule 23 (var_assign -> ID ASSIGN factor_n ENDLINE .)
    LIST            reduce using rule 23 (var_assign -> ID ASSIGN factor_n ENDLINE .)
    ELSE            reduce using rule 23 (var_assign -> ID ASSIGN factor_n ENDLINE .)
    RETURN          reduce using rule 23 (var_assign -> ID ASSIGN factor_n ENDLINE .)


state 63

    (24) var_assign -> ID ASSIGN string_opers ENDLINE .

    END             reduce using rule 24 (var_assign -> ID ASSIGN string_opers ENDLINE .)
    INT             reduce using rule 24 (var_assign -> ID ASSIGN string_opers ENDLINE .)
    STRING          reduce using rule 24 (var_assign -> ID ASSIGN string_opers ENDLINE .)
    ID              reduce using rule 24 (var_assign -> ID ASSIGN string_opers ENDLINE .)
    IF              reduce using rule 24 (var_assign -> ID ASSIGN string_opers ENDLINE .)
    COMMENT         reduce using rule 24 (var_assign -> ID ASSIGN string_opers ENDLINE .)
    PRINT           reduce using rule 24 (var_assign -> ID ASSIGN string_opers ENDLINE .)
    LOOP            reduce using rule 24 (var_assign -> ID ASSIGN string_opers ENDLINE .)
    FUNCTION        reduce using rule 24 (var_assign -> ID ASSIGN string_opers ENDLINE .)
    LIST            reduce using rule 24 (var_assign -> ID ASSIGN string_opers ENDLINE .)
    ELSE            reduce using rule 24 (var_assign -> ID ASSIGN string_opers ENDLINE .)
    RETURN          reduce using rule 24 (var_assign -> ID ASSIGN string_opers ENDLINE .)


state 64

    (25) string_opers -> string_opers PLUS . STRING_EXPR

    STRING_EXPR     shift and go to state 97


state 65

    (26) string_opers -> string_opers MINUS . STRING_EXPR

    STRING_EXPR     shift and go to state 98


state 66

    (60) factor_n -> NOT factor .

    ENDLINE         reduce using rule 60 (factor_n -> NOT factor .)
    CLOSE_SQ_BRACKET reduce using rule 60 (factor_n -> NOT factor .)
    MULT            reduce using rule 60 (factor_n -> NOT factor .)
    DIV             reduce using rule 60 (factor_n -> NOT factor .)
    MOD             reduce using rule 60 (factor_n -> NOT factor .)
    AND             reduce using rule 60 (factor_n -> NOT factor .)
    OR              reduce using rule 60 (factor_n -> NOT factor .)
    XOR             reduce using rule 60 (factor_n -> NOT factor .)
    LESSER          reduce using rule 60 (factor_n -> NOT factor .)
    GREATER         reduce using rule 60 (factor_n -> NOT factor .)
    EQUAL           reduce using rule 60 (factor_n -> NOT factor .)
    LESSER_EQ       reduce using rule 60 (factor_n -> NOT factor .)
    GREATER_EQ      reduce using rule 60 (factor_n -> NOT factor .)
    N_EQUAL         reduce using rule 60 (factor_n -> NOT factor .)
    CLOSE_BRACKET   reduce using rule 60 (factor_n -> NOT factor .)
    PLUS            reduce using rule 60 (factor_n -> NOT factor .)
    MINUS           reduce using rule 60 (factor_n -> NOT factor .)
    NOT             reduce using rule 60 (factor_n -> NOT factor .)
    ID              reduce using rule 60 (factor_n -> NOT factor .)
    NUMBER          reduce using rule 60 (factor_n -> NOT factor .)
    OPEN_BRACKET    reduce using rule 60 (factor_n -> NOT factor .)
    END             reduce using rule 60 (factor_n -> NOT factor .)
    INT             reduce using rule 60 (factor_n -> NOT factor .)
    STRING          reduce using rule 60 (factor_n -> NOT factor .)
    IF              reduce using rule 60 (factor_n -> NOT factor .)
    COMMENT         reduce using rule 60 (factor_n -> NOT factor .)
    PRINT           reduce using rule 60 (factor_n -> NOT factor .)
    LOOP            reduce using rule 60 (factor_n -> NOT factor .)
    FUNCTION        reduce using rule 60 (factor_n -> NOT factor .)
    LIST            reduce using rule 60 (factor_n -> NOT factor .)
    ELSE            reduce using rule 60 (factor_n -> NOT factor .)
    RETURN          reduce using rule 60 (factor_n -> NOT factor .)


state 67

    (40) brac_expr -> OPEN_BRACKET expr . CLOSE_BRACKET
    (38) expr -> expr . oper_add comp
    (41) oper_add -> . PLUS
    (42) oper_add -> . MINUS

    CLOSE_BRACKET   shift and go to state 99
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73

    oper_add                       shift and go to state 71

state 68

    (18) table_assign -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET . ASSIGN factor_n ENDLINE

    ASSIGN          shift and go to state 100


state 69

    (22) var_decl -> STRING ID ASSIGN string_opers . ENDLINE
    (25) string_opers -> string_opers . PLUS STRING_EXPR
    (26) string_opers -> string_opers . MINUS STRING_EXPR

    ENDLINE         shift and go to state 101
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65


state 70

    (34) if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET . THEN lines end_if

    THEN            shift and go to state 102


state 71

    (38) expr -> expr oper_add . comp
    (64) comp -> . comp oper_mult factor_n
    (65) comp -> . factor_n
    (60) factor_n -> . NOT factor
    (61) factor_n -> . factor
    (55) factor -> . ID
    (56) factor -> . NUMBER
    (57) factor -> . brac_expr
    (58) factor -> . func_call
    (59) factor -> . table_read
    (40) brac_expr -> . OPEN_BRACKET expr CLOSE_BRACKET
    (30) func_call -> . ID OPEN_BRACKET factors_n CLOSE_BRACKET
    (19) table_read -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET

    NOT             shift and go to state 42
    ID              shift and go to state 39
    NUMBER          shift and go to state 45
    OPEN_BRACKET    shift and go to state 49

    comp                           shift and go to state 103
    factor_n                       shift and go to state 54
    factor                         shift and go to state 43
    brac_expr                      shift and go to state 46
    func_call                      shift and go to state 47
    table_read                     shift and go to state 48

state 72

    (41) oper_add -> PLUS .

    NOT             reduce using rule 41 (oper_add -> PLUS .)
    ID              reduce using rule 41 (oper_add -> PLUS .)
    NUMBER          reduce using rule 41 (oper_add -> PLUS .)
    OPEN_BRACKET    reduce using rule 41 (oper_add -> PLUS .)


state 73

    (42) oper_add -> MINUS .

    NOT             reduce using rule 42 (oper_add -> MINUS .)
    ID              reduce using rule 42 (oper_add -> MINUS .)
    NUMBER          reduce using rule 42 (oper_add -> MINUS .)
    OPEN_BRACKET    reduce using rule 42 (oper_add -> MINUS .)


state 74

    (64) comp -> comp oper_mult . factor_n
    (60) factor_n -> . NOT factor
    (61) factor_n -> . factor
    (55) factor -> . ID
    (56) factor -> . NUMBER
    (57) factor -> . brac_expr
    (58) factor -> . func_call
    (59) factor -> . table_read
    (40) brac_expr -> . OPEN_BRACKET expr CLOSE_BRACKET
    (30) func_call -> . ID OPEN_BRACKET factors_n CLOSE_BRACKET
    (19) table_read -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET

    NOT             shift and go to state 42
    ID              shift and go to state 39
    NUMBER          shift and go to state 45
    OPEN_BRACKET    shift and go to state 49

    factor_n                       shift and go to state 104
    factor                         shift and go to state 43
    brac_expr                      shift and go to state 46
    func_call                      shift and go to state 47
    table_read                     shift and go to state 48

state 75

    (43) oper_mult -> MULT .

    NOT             reduce using rule 43 (oper_mult -> MULT .)
    ID              reduce using rule 43 (oper_mult -> MULT .)
    NUMBER          reduce using rule 43 (oper_mult -> MULT .)
    OPEN_BRACKET    reduce using rule 43 (oper_mult -> MULT .)


state 76

    (44) oper_mult -> DIV .

    NOT             reduce using rule 44 (oper_mult -> DIV .)
    ID              reduce using rule 44 (oper_mult -> DIV .)
    NUMBER          reduce using rule 44 (oper_mult -> DIV .)
    OPEN_BRACKET    reduce using rule 44 (oper_mult -> DIV .)


state 77

    (45) oper_mult -> MOD .

    NOT             reduce using rule 45 (oper_mult -> MOD .)
    ID              reduce using rule 45 (oper_mult -> MOD .)
    NUMBER          reduce using rule 45 (oper_mult -> MOD .)
    OPEN_BRACKET    reduce using rule 45 (oper_mult -> MOD .)


state 78

    (46) oper_mult -> AND .

    NOT             reduce using rule 46 (oper_mult -> AND .)
    ID              reduce using rule 46 (oper_mult -> AND .)
    NUMBER          reduce using rule 46 (oper_mult -> AND .)
    OPEN_BRACKET    reduce using rule 46 (oper_mult -> AND .)


state 79

    (47) oper_mult -> OR .

    NOT             reduce using rule 47 (oper_mult -> OR .)
    ID              reduce using rule 47 (oper_mult -> OR .)
    NUMBER          reduce using rule 47 (oper_mult -> OR .)
    OPEN_BRACKET    reduce using rule 47 (oper_mult -> OR .)


state 80

    (48) oper_mult -> XOR .

    NOT             reduce using rule 48 (oper_mult -> XOR .)
    ID              reduce using rule 48 (oper_mult -> XOR .)
    NUMBER          reduce using rule 48 (oper_mult -> XOR .)
    OPEN_BRACKET    reduce using rule 48 (oper_mult -> XOR .)


state 81

    (49) oper_mult -> LESSER .

    NOT             reduce using rule 49 (oper_mult -> LESSER .)
    ID              reduce using rule 49 (oper_mult -> LESSER .)
    NUMBER          reduce using rule 49 (oper_mult -> LESSER .)
    OPEN_BRACKET    reduce using rule 49 (oper_mult -> LESSER .)


state 82

    (50) oper_mult -> GREATER .

    NOT             reduce using rule 50 (oper_mult -> GREATER .)
    ID              reduce using rule 50 (oper_mult -> GREATER .)
    NUMBER          reduce using rule 50 (oper_mult -> GREATER .)
    OPEN_BRACKET    reduce using rule 50 (oper_mult -> GREATER .)


state 83

    (51) oper_mult -> EQUAL .

    NOT             reduce using rule 51 (oper_mult -> EQUAL .)
    ID              reduce using rule 51 (oper_mult -> EQUAL .)
    NUMBER          reduce using rule 51 (oper_mult -> EQUAL .)
    OPEN_BRACKET    reduce using rule 51 (oper_mult -> EQUAL .)


state 84

    (52) oper_mult -> LESSER_EQ .

    NOT             reduce using rule 52 (oper_mult -> LESSER_EQ .)
    ID              reduce using rule 52 (oper_mult -> LESSER_EQ .)
    NUMBER          reduce using rule 52 (oper_mult -> LESSER_EQ .)
    OPEN_BRACKET    reduce using rule 52 (oper_mult -> LESSER_EQ .)


state 85

    (53) oper_mult -> GREATER_EQ .

    NOT             reduce using rule 53 (oper_mult -> GREATER_EQ .)
    ID              reduce using rule 53 (oper_mult -> GREATER_EQ .)
    NUMBER          reduce using rule 53 (oper_mult -> GREATER_EQ .)
    OPEN_BRACKET    reduce using rule 53 (oper_mult -> GREATER_EQ .)


state 86

    (54) oper_mult -> N_EQUAL .

    NOT             reduce using rule 54 (oper_mult -> N_EQUAL .)
    ID              reduce using rule 54 (oper_mult -> N_EQUAL .)
    NUMBER          reduce using rule 54 (oper_mult -> N_EQUAL .)
    OPEN_BRACKET    reduce using rule 54 (oper_mult -> N_EQUAL .)


state 87

    (16) print -> PRINT OPEN_BRACKET expr CLOSE_BRACKET . ENDLINE

    ENDLINE         shift and go to state 105


state 88

    (15) loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET . BEGIN lines END

    BEGIN           shift and go to state 106


state 89

    (20) func_decl -> FUNCTION ID OPEN_BRACKET args . CLOSE_BRACKET BEGIN lines RETURN factor_n
    (32) args -> args . arg
    (31) arg -> . type ID
    (28) type -> . INT
    (29) type -> . STRING

    CLOSE_BRACKET   shift and go to state 107
    INT             shift and go to state 36
    STRING          shift and go to state 37

    arg                            shift and go to state 108
    type                           shift and go to state 91

state 90

    (33) args -> arg .

    CLOSE_BRACKET   reduce using rule 33 (args -> arg .)
    INT             reduce using rule 33 (args -> arg .)
    STRING          reduce using rule 33 (args -> arg .)


state 91

    (31) arg -> type . ID

    ID              shift and go to state 109


state 92

    (17) table_decl -> LIST type NUMBER ID . ENDLINE

    ENDLINE         shift and go to state 110


state 93

    (21) var_decl -> INT ID ASSIGN factor_n ENDLINE .

    END             reduce using rule 21 (var_decl -> INT ID ASSIGN factor_n ENDLINE .)
    INT             reduce using rule 21 (var_decl -> INT ID ASSIGN factor_n ENDLINE .)
    STRING          reduce using rule 21 (var_decl -> INT ID ASSIGN factor_n ENDLINE .)
    ID              reduce using rule 21 (var_decl -> INT ID ASSIGN factor_n ENDLINE .)
    IF              reduce using rule 21 (var_decl -> INT ID ASSIGN factor_n ENDLINE .)
    COMMENT         reduce using rule 21 (var_decl -> INT ID ASSIGN factor_n ENDLINE .)
    PRINT           reduce using rule 21 (var_decl -> INT ID ASSIGN factor_n ENDLINE .)
    LOOP            reduce using rule 21 (var_decl -> INT ID ASSIGN factor_n ENDLINE .)
    FUNCTION        reduce using rule 21 (var_decl -> INT ID ASSIGN factor_n ENDLINE .)
    LIST            reduce using rule 21 (var_decl -> INT ID ASSIGN factor_n ENDLINE .)
    ELSE            reduce using rule 21 (var_decl -> INT ID ASSIGN factor_n ENDLINE .)
    RETURN          reduce using rule 21 (var_decl -> INT ID ASSIGN factor_n ENDLINE .)


state 94

    (30) func_call -> ID OPEN_BRACKET factors_n . CLOSE_BRACKET
    (63) factors_n -> factors_n . factor_n
    (60) factor_n -> . NOT factor
    (61) factor_n -> . factor
    (55) factor -> . ID
    (56) factor -> . NUMBER
    (57) factor -> . brac_expr
    (58) factor -> . func_call
    (59) factor -> . table_read
    (40) brac_expr -> . OPEN_BRACKET expr CLOSE_BRACKET
    (30) func_call -> . ID OPEN_BRACKET factors_n CLOSE_BRACKET
    (19) table_read -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET

    CLOSE_BRACKET   shift and go to state 111
    NOT             shift and go to state 42
    ID              shift and go to state 39
    NUMBER          shift and go to state 45
    OPEN_BRACKET    shift and go to state 49

    factor_n                       shift and go to state 112
    factor                         shift and go to state 43
    brac_expr                      shift and go to state 46
    func_call                      shift and go to state 47
    table_read                     shift and go to state 48

state 95

    (62) factors_n -> factor_n .

    CLOSE_BRACKET   reduce using rule 62 (factors_n -> factor_n .)
    NOT             reduce using rule 62 (factors_n -> factor_n .)
    ID              reduce using rule 62 (factors_n -> factor_n .)
    NUMBER          reduce using rule 62 (factors_n -> factor_n .)
    OPEN_BRACKET    reduce using rule 62 (factors_n -> factor_n .)


state 96

    (19) table_read -> ID OPEN_SQ_BRACKET factor_n . CLOSE_SQ_BRACKET

    CLOSE_SQ_BRACKET shift and go to state 113


state 97

    (25) string_opers -> string_opers PLUS STRING_EXPR .

    ENDLINE         reduce using rule 25 (string_opers -> string_opers PLUS STRING_EXPR .)
    PLUS            reduce using rule 25 (string_opers -> string_opers PLUS STRING_EXPR .)
    MINUS           reduce using rule 25 (string_opers -> string_opers PLUS STRING_EXPR .)


state 98

    (26) string_opers -> string_opers MINUS STRING_EXPR .

    ENDLINE         reduce using rule 26 (string_opers -> string_opers MINUS STRING_EXPR .)
    PLUS            reduce using rule 26 (string_opers -> string_opers MINUS STRING_EXPR .)
    MINUS           reduce using rule 26 (string_opers -> string_opers MINUS STRING_EXPR .)


state 99

    (40) brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .

    ENDLINE         reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    CLOSE_SQ_BRACKET reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    MULT            reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    DIV             reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    MOD             reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    AND             reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    OR              reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    XOR             reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    LESSER          reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    GREATER         reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    EQUAL           reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    LESSER_EQ       reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    GREATER_EQ      reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    N_EQUAL         reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    PLUS            reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    MINUS           reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    NOT             reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    ID              reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    NUMBER          reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    END             reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    INT             reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    STRING          reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    IF              reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    COMMENT         reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    PRINT           reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    LOOP            reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    FUNCTION        reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    LIST            reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    ELSE            reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)
    RETURN          reduce using rule 40 (brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET .)


state 100

    (18) table_assign -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN . factor_n ENDLINE
    (60) factor_n -> . NOT factor
    (61) factor_n -> . factor
    (55) factor -> . ID
    (56) factor -> . NUMBER
    (57) factor -> . brac_expr
    (58) factor -> . func_call
    (59) factor -> . table_read
    (40) brac_expr -> . OPEN_BRACKET expr CLOSE_BRACKET
    (30) func_call -> . ID OPEN_BRACKET factors_n CLOSE_BRACKET
    (19) table_read -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET

    NOT             shift and go to state 42
    ID              shift and go to state 39
    NUMBER          shift and go to state 45
    OPEN_BRACKET    shift and go to state 49

    factor_n                       shift and go to state 114
    factor                         shift and go to state 43
    brac_expr                      shift and go to state 46
    func_call                      shift and go to state 47
    table_read                     shift and go to state 48

state 101

    (22) var_decl -> STRING ID ASSIGN string_opers ENDLINE .

    END             reduce using rule 22 (var_decl -> STRING ID ASSIGN string_opers ENDLINE .)
    INT             reduce using rule 22 (var_decl -> STRING ID ASSIGN string_opers ENDLINE .)
    STRING          reduce using rule 22 (var_decl -> STRING ID ASSIGN string_opers ENDLINE .)
    ID              reduce using rule 22 (var_decl -> STRING ID ASSIGN string_opers ENDLINE .)
    IF              reduce using rule 22 (var_decl -> STRING ID ASSIGN string_opers ENDLINE .)
    COMMENT         reduce using rule 22 (var_decl -> STRING ID ASSIGN string_opers ENDLINE .)
    PRINT           reduce using rule 22 (var_decl -> STRING ID ASSIGN string_opers ENDLINE .)
    LOOP            reduce using rule 22 (var_decl -> STRING ID ASSIGN string_opers ENDLINE .)
    FUNCTION        reduce using rule 22 (var_decl -> STRING ID ASSIGN string_opers ENDLINE .)
    LIST            reduce using rule 22 (var_decl -> STRING ID ASSIGN string_opers ENDLINE .)
    ELSE            reduce using rule 22 (var_decl -> STRING ID ASSIGN string_opers ENDLINE .)
    RETURN          reduce using rule 22 (var_decl -> STRING ID ASSIGN string_opers ENDLINE .)


state 102

    (34) if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET THEN . lines end_if
    (4) lines -> . lines line
    (5) lines -> . line
    (6) line -> . var_decl
    (7) line -> . var_assign
    (8) line -> . if_stat
    (9) line -> . comment
    (10) line -> . print
    (11) line -> . loop
    (12) line -> . func_decl
    (13) line -> . table_decl
    (14) line -> . table_assign
    (21) var_decl -> . INT ID ASSIGN factor_n ENDLINE
    (22) var_decl -> . STRING ID ASSIGN string_opers ENDLINE
    (23) var_assign -> . ID ASSIGN factor_n ENDLINE
    (24) var_assign -> . ID ASSIGN string_opers ENDLINE
    (34) if_stat -> . IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if
    (2) comment -> . COMMENT
    (16) print -> . PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE
    (15) loop -> . LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END
    (20) func_decl -> . FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n
    (17) table_decl -> . LIST type NUMBER ID ENDLINE
    (18) table_assign -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE

    INT             shift and go to state 16
    STRING          shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    COMMENT         shift and go to state 20
    PRINT           shift and go to state 21
    LOOP            shift and go to state 22
    FUNCTION        shift and go to state 23
    LIST            shift and go to state 24

    lines                          shift and go to state 115
    line                           shift and go to state 6
    var_decl                       shift and go to state 7
    var_assign                     shift and go to state 8
    if_stat                        shift and go to state 9
    comment                        shift and go to state 10
    print                          shift and go to state 11
    loop                           shift and go to state 12
    func_decl                      shift and go to state 13
    table_decl                     shift and go to state 14
    table_assign                   shift and go to state 15

state 103

    (38) expr -> expr oper_add comp .
    (64) comp -> comp . oper_mult factor_n
    (43) oper_mult -> . MULT
    (44) oper_mult -> . DIV
    (45) oper_mult -> . MOD
    (46) oper_mult -> . AND
    (47) oper_mult -> . OR
    (48) oper_mult -> . XOR
    (49) oper_mult -> . LESSER
    (50) oper_mult -> . GREATER
    (51) oper_mult -> . EQUAL
    (52) oper_mult -> . LESSER_EQ
    (53) oper_mult -> . GREATER_EQ
    (54) oper_mult -> . N_EQUAL

    CLOSE_BRACKET   reduce using rule 38 (expr -> expr oper_add comp .)
    PLUS            reduce using rule 38 (expr -> expr oper_add comp .)
    MINUS           reduce using rule 38 (expr -> expr oper_add comp .)
    MULT            shift and go to state 75
    DIV             shift and go to state 76
    MOD             shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    XOR             shift and go to state 80
    LESSER          shift and go to state 81
    GREATER         shift and go to state 82
    EQUAL           shift and go to state 83
    LESSER_EQ       shift and go to state 84
    GREATER_EQ      shift and go to state 85
    N_EQUAL         shift and go to state 86

    oper_mult                      shift and go to state 74

state 104

    (64) comp -> comp oper_mult factor_n .

    MULT            reduce using rule 64 (comp -> comp oper_mult factor_n .)
    DIV             reduce using rule 64 (comp -> comp oper_mult factor_n .)
    MOD             reduce using rule 64 (comp -> comp oper_mult factor_n .)
    AND             reduce using rule 64 (comp -> comp oper_mult factor_n .)
    OR              reduce using rule 64 (comp -> comp oper_mult factor_n .)
    XOR             reduce using rule 64 (comp -> comp oper_mult factor_n .)
    LESSER          reduce using rule 64 (comp -> comp oper_mult factor_n .)
    GREATER         reduce using rule 64 (comp -> comp oper_mult factor_n .)
    EQUAL           reduce using rule 64 (comp -> comp oper_mult factor_n .)
    LESSER_EQ       reduce using rule 64 (comp -> comp oper_mult factor_n .)
    GREATER_EQ      reduce using rule 64 (comp -> comp oper_mult factor_n .)
    N_EQUAL         reduce using rule 64 (comp -> comp oper_mult factor_n .)
    CLOSE_BRACKET   reduce using rule 64 (comp -> comp oper_mult factor_n .)
    PLUS            reduce using rule 64 (comp -> comp oper_mult factor_n .)
    MINUS           reduce using rule 64 (comp -> comp oper_mult factor_n .)


state 105

    (16) print -> PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE .

    END             reduce using rule 16 (print -> PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE .)
    INT             reduce using rule 16 (print -> PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE .)
    STRING          reduce using rule 16 (print -> PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE .)
    ID              reduce using rule 16 (print -> PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE .)
    IF              reduce using rule 16 (print -> PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE .)
    COMMENT         reduce using rule 16 (print -> PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE .)
    PRINT           reduce using rule 16 (print -> PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE .)
    LOOP            reduce using rule 16 (print -> PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE .)
    FUNCTION        reduce using rule 16 (print -> PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE .)
    LIST            reduce using rule 16 (print -> PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE .)
    ELSE            reduce using rule 16 (print -> PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE .)
    RETURN          reduce using rule 16 (print -> PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE .)


state 106

    (15) loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN . lines END
    (4) lines -> . lines line
    (5) lines -> . line
    (6) line -> . var_decl
    (7) line -> . var_assign
    (8) line -> . if_stat
    (9) line -> . comment
    (10) line -> . print
    (11) line -> . loop
    (12) line -> . func_decl
    (13) line -> . table_decl
    (14) line -> . table_assign
    (21) var_decl -> . INT ID ASSIGN factor_n ENDLINE
    (22) var_decl -> . STRING ID ASSIGN string_opers ENDLINE
    (23) var_assign -> . ID ASSIGN factor_n ENDLINE
    (24) var_assign -> . ID ASSIGN string_opers ENDLINE
    (34) if_stat -> . IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if
    (2) comment -> . COMMENT
    (16) print -> . PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE
    (15) loop -> . LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END
    (20) func_decl -> . FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n
    (17) table_decl -> . LIST type NUMBER ID ENDLINE
    (18) table_assign -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE

    INT             shift and go to state 16
    STRING          shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    COMMENT         shift and go to state 20
    PRINT           shift and go to state 21
    LOOP            shift and go to state 22
    FUNCTION        shift and go to state 23
    LIST            shift and go to state 24

    lines                          shift and go to state 116
    line                           shift and go to state 6
    var_decl                       shift and go to state 7
    var_assign                     shift and go to state 8
    if_stat                        shift and go to state 9
    comment                        shift and go to state 10
    print                          shift and go to state 11
    loop                           shift and go to state 12
    func_decl                      shift and go to state 13
    table_decl                     shift and go to state 14
    table_assign                   shift and go to state 15

state 107

    (20) func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET . BEGIN lines RETURN factor_n

    BEGIN           shift and go to state 117


state 108

    (32) args -> args arg .

    CLOSE_BRACKET   reduce using rule 32 (args -> args arg .)
    INT             reduce using rule 32 (args -> args arg .)
    STRING          reduce using rule 32 (args -> args arg .)


state 109

    (31) arg -> type ID .

    CLOSE_BRACKET   reduce using rule 31 (arg -> type ID .)
    INT             reduce using rule 31 (arg -> type ID .)
    STRING          reduce using rule 31 (arg -> type ID .)


state 110

    (17) table_decl -> LIST type NUMBER ID ENDLINE .

    END             reduce using rule 17 (table_decl -> LIST type NUMBER ID ENDLINE .)
    INT             reduce using rule 17 (table_decl -> LIST type NUMBER ID ENDLINE .)
    STRING          reduce using rule 17 (table_decl -> LIST type NUMBER ID ENDLINE .)
    ID              reduce using rule 17 (table_decl -> LIST type NUMBER ID ENDLINE .)
    IF              reduce using rule 17 (table_decl -> LIST type NUMBER ID ENDLINE .)
    COMMENT         reduce using rule 17 (table_decl -> LIST type NUMBER ID ENDLINE .)
    PRINT           reduce using rule 17 (table_decl -> LIST type NUMBER ID ENDLINE .)
    LOOP            reduce using rule 17 (table_decl -> LIST type NUMBER ID ENDLINE .)
    FUNCTION        reduce using rule 17 (table_decl -> LIST type NUMBER ID ENDLINE .)
    LIST            reduce using rule 17 (table_decl -> LIST type NUMBER ID ENDLINE .)
    ELSE            reduce using rule 17 (table_decl -> LIST type NUMBER ID ENDLINE .)
    RETURN          reduce using rule 17 (table_decl -> LIST type NUMBER ID ENDLINE .)


state 111

    (30) func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .

    ENDLINE         reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    CLOSE_SQ_BRACKET reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    MULT            reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    DIV             reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    MOD             reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    AND             reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    OR              reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    XOR             reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    LESSER          reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    GREATER         reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    EQUAL           reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    LESSER_EQ       reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    GREATER_EQ      reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    N_EQUAL         reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    PLUS            reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    MINUS           reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    NOT             reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    ID              reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    NUMBER          reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    END             reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    INT             reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    STRING          reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    IF              reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    COMMENT         reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    PRINT           reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    LOOP            reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    FUNCTION        reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    LIST            reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    ELSE            reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)
    RETURN          reduce using rule 30 (func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET .)


state 112

    (63) factors_n -> factors_n factor_n .

    CLOSE_BRACKET   reduce using rule 63 (factors_n -> factors_n factor_n .)
    NOT             reduce using rule 63 (factors_n -> factors_n factor_n .)
    ID              reduce using rule 63 (factors_n -> factors_n factor_n .)
    NUMBER          reduce using rule 63 (factors_n -> factors_n factor_n .)
    OPEN_BRACKET    reduce using rule 63 (factors_n -> factors_n factor_n .)


state 113

    (19) table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .

    ENDLINE         reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    CLOSE_SQ_BRACKET reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    MULT            reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    DIV             reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    MOD             reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    AND             reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    OR              reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    XOR             reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    LESSER          reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    GREATER         reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    EQUAL           reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    LESSER_EQ       reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    GREATER_EQ      reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    N_EQUAL         reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    CLOSE_BRACKET   reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    PLUS            reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    MINUS           reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    NOT             reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    ID              reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    NUMBER          reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    OPEN_BRACKET    reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    END             reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    INT             reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    STRING          reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    IF              reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    COMMENT         reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    PRINT           reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    LOOP            reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    FUNCTION        reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    LIST            reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    ELSE            reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)
    RETURN          reduce using rule 19 (table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET .)


state 114

    (18) table_assign -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n . ENDLINE

    ENDLINE         shift and go to state 118


state 115

    (34) if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines . end_if
    (4) lines -> lines . line
    (35) end_if -> . END
    (36) end_if -> . else_stat
    (6) line -> . var_decl
    (7) line -> . var_assign
    (8) line -> . if_stat
    (9) line -> . comment
    (10) line -> . print
    (11) line -> . loop
    (12) line -> . func_decl
    (13) line -> . table_decl
    (14) line -> . table_assign
    (37) else_stat -> . ELSE THEN lines END
    (21) var_decl -> . INT ID ASSIGN factor_n ENDLINE
    (22) var_decl -> . STRING ID ASSIGN string_opers ENDLINE
    (23) var_assign -> . ID ASSIGN factor_n ENDLINE
    (24) var_assign -> . ID ASSIGN string_opers ENDLINE
    (34) if_stat -> . IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if
    (2) comment -> . COMMENT
    (16) print -> . PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE
    (15) loop -> . LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END
    (20) func_decl -> . FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n
    (17) table_decl -> . LIST type NUMBER ID ENDLINE
    (18) table_assign -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE

    END             shift and go to state 120
    ELSE            shift and go to state 122
    INT             shift and go to state 16
    STRING          shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    COMMENT         shift and go to state 20
    PRINT           shift and go to state 21
    LOOP            shift and go to state 22
    FUNCTION        shift and go to state 23
    LIST            shift and go to state 24

    end_if                         shift and go to state 119
    line                           shift and go to state 26
    else_stat                      shift and go to state 121
    var_decl                       shift and go to state 7
    var_assign                     shift and go to state 8
    if_stat                        shift and go to state 9
    comment                        shift and go to state 10
    print                          shift and go to state 11
    loop                           shift and go to state 12
    func_decl                      shift and go to state 13
    table_decl                     shift and go to state 14
    table_assign                   shift and go to state 15

state 116

    (15) loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines . END
    (4) lines -> lines . line
    (6) line -> . var_decl
    (7) line -> . var_assign
    (8) line -> . if_stat
    (9) line -> . comment
    (10) line -> . print
    (11) line -> . loop
    (12) line -> . func_decl
    (13) line -> . table_decl
    (14) line -> . table_assign
    (21) var_decl -> . INT ID ASSIGN factor_n ENDLINE
    (22) var_decl -> . STRING ID ASSIGN string_opers ENDLINE
    (23) var_assign -> . ID ASSIGN factor_n ENDLINE
    (24) var_assign -> . ID ASSIGN string_opers ENDLINE
    (34) if_stat -> . IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if
    (2) comment -> . COMMENT
    (16) print -> . PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE
    (15) loop -> . LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END
    (20) func_decl -> . FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n
    (17) table_decl -> . LIST type NUMBER ID ENDLINE
    (18) table_assign -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE

    END             shift and go to state 123
    INT             shift and go to state 16
    STRING          shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    COMMENT         shift and go to state 20
    PRINT           shift and go to state 21
    LOOP            shift and go to state 22
    FUNCTION        shift and go to state 23
    LIST            shift and go to state 24

    line                           shift and go to state 26
    var_decl                       shift and go to state 7
    var_assign                     shift and go to state 8
    if_stat                        shift and go to state 9
    comment                        shift and go to state 10
    print                          shift and go to state 11
    loop                           shift and go to state 12
    func_decl                      shift and go to state 13
    table_decl                     shift and go to state 14
    table_assign                   shift and go to state 15

state 117

    (20) func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN . lines RETURN factor_n
    (4) lines -> . lines line
    (5) lines -> . line
    (6) line -> . var_decl
    (7) line -> . var_assign
    (8) line -> . if_stat
    (9) line -> . comment
    (10) line -> . print
    (11) line -> . loop
    (12) line -> . func_decl
    (13) line -> . table_decl
    (14) line -> . table_assign
    (21) var_decl -> . INT ID ASSIGN factor_n ENDLINE
    (22) var_decl -> . STRING ID ASSIGN string_opers ENDLINE
    (23) var_assign -> . ID ASSIGN factor_n ENDLINE
    (24) var_assign -> . ID ASSIGN string_opers ENDLINE
    (34) if_stat -> . IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if
    (2) comment -> . COMMENT
    (16) print -> . PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE
    (15) loop -> . LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END
    (20) func_decl -> . FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n
    (17) table_decl -> . LIST type NUMBER ID ENDLINE
    (18) table_assign -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE

    INT             shift and go to state 16
    STRING          shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    COMMENT         shift and go to state 20
    PRINT           shift and go to state 21
    LOOP            shift and go to state 22
    FUNCTION        shift and go to state 23
    LIST            shift and go to state 24

    lines                          shift and go to state 124
    line                           shift and go to state 6
    var_decl                       shift and go to state 7
    var_assign                     shift and go to state 8
    if_stat                        shift and go to state 9
    comment                        shift and go to state 10
    print                          shift and go to state 11
    loop                           shift and go to state 12
    func_decl                      shift and go to state 13
    table_decl                     shift and go to state 14
    table_assign                   shift and go to state 15

state 118

    (18) table_assign -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE .

    END             reduce using rule 18 (table_assign -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE .)
    INT             reduce using rule 18 (table_assign -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE .)
    STRING          reduce using rule 18 (table_assign -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE .)
    ID              reduce using rule 18 (table_assign -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE .)
    IF              reduce using rule 18 (table_assign -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE .)
    COMMENT         reduce using rule 18 (table_assign -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE .)
    PRINT           reduce using rule 18 (table_assign -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE .)
    LOOP            reduce using rule 18 (table_assign -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE .)
    FUNCTION        reduce using rule 18 (table_assign -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE .)
    LIST            reduce using rule 18 (table_assign -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE .)
    ELSE            reduce using rule 18 (table_assign -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE .)
    RETURN          reduce using rule 18 (table_assign -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE .)


state 119

    (34) if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if .

    END             reduce using rule 34 (if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if .)
    INT             reduce using rule 34 (if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if .)
    STRING          reduce using rule 34 (if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if .)
    ID              reduce using rule 34 (if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if .)
    IF              reduce using rule 34 (if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if .)
    COMMENT         reduce using rule 34 (if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if .)
    PRINT           reduce using rule 34 (if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if .)
    LOOP            reduce using rule 34 (if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if .)
    FUNCTION        reduce using rule 34 (if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if .)
    LIST            reduce using rule 34 (if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if .)
    ELSE            reduce using rule 34 (if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if .)
    RETURN          reduce using rule 34 (if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if .)


state 120

    (35) end_if -> END .

    END             reduce using rule 35 (end_if -> END .)
    INT             reduce using rule 35 (end_if -> END .)
    STRING          reduce using rule 35 (end_if -> END .)
    ID              reduce using rule 35 (end_if -> END .)
    IF              reduce using rule 35 (end_if -> END .)
    COMMENT         reduce using rule 35 (end_if -> END .)
    PRINT           reduce using rule 35 (end_if -> END .)
    LOOP            reduce using rule 35 (end_if -> END .)
    FUNCTION        reduce using rule 35 (end_if -> END .)
    LIST            reduce using rule 35 (end_if -> END .)
    ELSE            reduce using rule 35 (end_if -> END .)
    RETURN          reduce using rule 35 (end_if -> END .)


state 121

    (36) end_if -> else_stat .

    END             reduce using rule 36 (end_if -> else_stat .)
    INT             reduce using rule 36 (end_if -> else_stat .)
    STRING          reduce using rule 36 (end_if -> else_stat .)
    ID              reduce using rule 36 (end_if -> else_stat .)
    IF              reduce using rule 36 (end_if -> else_stat .)
    COMMENT         reduce using rule 36 (end_if -> else_stat .)
    PRINT           reduce using rule 36 (end_if -> else_stat .)
    LOOP            reduce using rule 36 (end_if -> else_stat .)
    FUNCTION        reduce using rule 36 (end_if -> else_stat .)
    LIST            reduce using rule 36 (end_if -> else_stat .)
    ELSE            reduce using rule 36 (end_if -> else_stat .)
    RETURN          reduce using rule 36 (end_if -> else_stat .)


state 122

    (37) else_stat -> ELSE . THEN lines END

    THEN            shift and go to state 125


state 123

    (15) loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END .

    END             reduce using rule 15 (loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END .)
    INT             reduce using rule 15 (loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END .)
    STRING          reduce using rule 15 (loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END .)
    ID              reduce using rule 15 (loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END .)
    IF              reduce using rule 15 (loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END .)
    COMMENT         reduce using rule 15 (loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END .)
    PRINT           reduce using rule 15 (loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END .)
    LOOP            reduce using rule 15 (loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END .)
    FUNCTION        reduce using rule 15 (loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END .)
    LIST            reduce using rule 15 (loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END .)
    ELSE            reduce using rule 15 (loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END .)
    RETURN          reduce using rule 15 (loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END .)


state 124

    (20) func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines . RETURN factor_n
    (4) lines -> lines . line
    (6) line -> . var_decl
    (7) line -> . var_assign
    (8) line -> . if_stat
    (9) line -> . comment
    (10) line -> . print
    (11) line -> . loop
    (12) line -> . func_decl
    (13) line -> . table_decl
    (14) line -> . table_assign
    (21) var_decl -> . INT ID ASSIGN factor_n ENDLINE
    (22) var_decl -> . STRING ID ASSIGN string_opers ENDLINE
    (23) var_assign -> . ID ASSIGN factor_n ENDLINE
    (24) var_assign -> . ID ASSIGN string_opers ENDLINE
    (34) if_stat -> . IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if
    (2) comment -> . COMMENT
    (16) print -> . PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE
    (15) loop -> . LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END
    (20) func_decl -> . FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n
    (17) table_decl -> . LIST type NUMBER ID ENDLINE
    (18) table_assign -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE

    RETURN          shift and go to state 126
    INT             shift and go to state 16
    STRING          shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    COMMENT         shift and go to state 20
    PRINT           shift and go to state 21
    LOOP            shift and go to state 22
    FUNCTION        shift and go to state 23
    LIST            shift and go to state 24

    line                           shift and go to state 26
    var_decl                       shift and go to state 7
    var_assign                     shift and go to state 8
    if_stat                        shift and go to state 9
    comment                        shift and go to state 10
    print                          shift and go to state 11
    loop                           shift and go to state 12
    func_decl                      shift and go to state 13
    table_decl                     shift and go to state 14
    table_assign                   shift and go to state 15

state 125

    (37) else_stat -> ELSE THEN . lines END
    (4) lines -> . lines line
    (5) lines -> . line
    (6) line -> . var_decl
    (7) line -> . var_assign
    (8) line -> . if_stat
    (9) line -> . comment
    (10) line -> . print
    (11) line -> . loop
    (12) line -> . func_decl
    (13) line -> . table_decl
    (14) line -> . table_assign
    (21) var_decl -> . INT ID ASSIGN factor_n ENDLINE
    (22) var_decl -> . STRING ID ASSIGN string_opers ENDLINE
    (23) var_assign -> . ID ASSIGN factor_n ENDLINE
    (24) var_assign -> . ID ASSIGN string_opers ENDLINE
    (34) if_stat -> . IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if
    (2) comment -> . COMMENT
    (16) print -> . PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE
    (15) loop -> . LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END
    (20) func_decl -> . FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n
    (17) table_decl -> . LIST type NUMBER ID ENDLINE
    (18) table_assign -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE

    INT             shift and go to state 16
    STRING          shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    COMMENT         shift and go to state 20
    PRINT           shift and go to state 21
    LOOP            shift and go to state 22
    FUNCTION        shift and go to state 23
    LIST            shift and go to state 24

    lines                          shift and go to state 127
    line                           shift and go to state 6
    var_decl                       shift and go to state 7
    var_assign                     shift and go to state 8
    if_stat                        shift and go to state 9
    comment                        shift and go to state 10
    print                          shift and go to state 11
    loop                           shift and go to state 12
    func_decl                      shift and go to state 13
    table_decl                     shift and go to state 14
    table_assign                   shift and go to state 15

state 126

    (20) func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN . factor_n
    (60) factor_n -> . NOT factor
    (61) factor_n -> . factor
    (55) factor -> . ID
    (56) factor -> . NUMBER
    (57) factor -> . brac_expr
    (58) factor -> . func_call
    (59) factor -> . table_read
    (40) brac_expr -> . OPEN_BRACKET expr CLOSE_BRACKET
    (30) func_call -> . ID OPEN_BRACKET factors_n CLOSE_BRACKET
    (19) table_read -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET

    NOT             shift and go to state 42
    ID              shift and go to state 39
    NUMBER          shift and go to state 45
    OPEN_BRACKET    shift and go to state 49

    factor_n                       shift and go to state 128
    factor                         shift and go to state 43
    brac_expr                      shift and go to state 46
    func_call                      shift and go to state 47
    table_read                     shift and go to state 48

state 127

    (37) else_stat -> ELSE THEN lines . END
    (4) lines -> lines . line
    (6) line -> . var_decl
    (7) line -> . var_assign
    (8) line -> . if_stat
    (9) line -> . comment
    (10) line -> . print
    (11) line -> . loop
    (12) line -> . func_decl
    (13) line -> . table_decl
    (14) line -> . table_assign
    (21) var_decl -> . INT ID ASSIGN factor_n ENDLINE
    (22) var_decl -> . STRING ID ASSIGN string_opers ENDLINE
    (23) var_assign -> . ID ASSIGN factor_n ENDLINE
    (24) var_assign -> . ID ASSIGN string_opers ENDLINE
    (34) if_stat -> . IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if
    (2) comment -> . COMMENT
    (16) print -> . PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE
    (15) loop -> . LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END
    (20) func_decl -> . FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n
    (17) table_decl -> . LIST type NUMBER ID ENDLINE
    (18) table_assign -> . ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE

    END             shift and go to state 129
    INT             shift and go to state 16
    STRING          shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    COMMENT         shift and go to state 20
    PRINT           shift and go to state 21
    LOOP            shift and go to state 22
    FUNCTION        shift and go to state 23
    LIST            shift and go to state 24

    line                           shift and go to state 26
    var_decl                       shift and go to state 7
    var_assign                     shift and go to state 8
    if_stat                        shift and go to state 9
    comment                        shift and go to state 10
    print                          shift and go to state 11
    loop                           shift and go to state 12
    func_decl                      shift and go to state 13
    table_decl                     shift and go to state 14
    table_assign                   shift and go to state 15

state 128

    (20) func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n .

    END             reduce using rule 20 (func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n .)
    INT             reduce using rule 20 (func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n .)
    STRING          reduce using rule 20 (func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n .)
    ID              reduce using rule 20 (func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n .)
    IF              reduce using rule 20 (func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n .)
    COMMENT         reduce using rule 20 (func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n .)
    PRINT           reduce using rule 20 (func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n .)
    LOOP            reduce using rule 20 (func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n .)
    FUNCTION        reduce using rule 20 (func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n .)
    LIST            reduce using rule 20 (func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n .)
    ELSE            reduce using rule 20 (func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n .)
    RETURN          reduce using rule 20 (func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n .)


state 129

    (37) else_stat -> ELSE THEN lines END .

    END             reduce using rule 37 (else_stat -> ELSE THEN lines END .)
    INT             reduce using rule 37 (else_stat -> ELSE THEN lines END .)
    STRING          reduce using rule 37 (else_stat -> ELSE THEN lines END .)
    ID              reduce using rule 37 (else_stat -> ELSE THEN lines END .)
    IF              reduce using rule 37 (else_stat -> ELSE THEN lines END .)
    COMMENT         reduce using rule 37 (else_stat -> ELSE THEN lines END .)
    PRINT           reduce using rule 37 (else_stat -> ELSE THEN lines END .)
    LOOP            reduce using rule 37 (else_stat -> ELSE THEN lines END .)
    FUNCTION        reduce using rule 37 (else_stat -> ELSE THEN lines END .)
    LIST            reduce using rule 37 (else_stat -> ELSE THEN lines END .)
    ELSE            reduce using rule 37 (else_stat -> ELSE THEN lines END .)
    RETURN          reduce using rule 37 (else_stat -> ELSE THEN lines END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OPEN_BRACKET in state 39 resolved as shift
