
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BEGIN CLOSE_BRACKET CLOSE_CURL_BRACKET CLOSE_SQ_BRACKET COMMENT DIV ELSE END ENDLINE EQUAL FUNCTION GREATER GREATER_EQ ID IF INT ITERABLE_LOOP LESSER LESSER_EQ LIST LOOP MINUS MOD MULT NOT NULL NUMBER N_EQUAL OPEN_BRACKET OPEN_CURL_BRACKET OPEN_SQ_BRACKET OR PLUS PRINT PROGRAM RETURN STRING STRING_EXPR THEN XOR\n        program_decl : PROGRAM block\n        \n        comment : COMMENT\n        \n        block : BEGIN block_body END\n        \n        block_body : lines\n                     | loop\n                     | if_stat\n                     | func_decl\n        \n        lines : lines line\n                | line\n        \n        line : var_decl\n                | var_assign\n                | comment\n        \n        loop : LOOP OPEN_BRACKET expr CLOSE_BRACKET block\n        \n        func_decl : FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN block_body RETURN return_val\n        \n        return_val : ID\n                     | expr\n                     | func_call\n        \n        var_decl : type ID ASSIGN factor ENDLINE\n        \n        var_assign : ID ASSIGN factor ENDLINE\n        \n        type : INT\n               | STRING\n        \n        func_call : ID OPEN_BRACKET factors_n CLOSE_BRACKET\n        \n        arg : type ID\n        \n        args : args arg\n               | arg\n        \n        if_stat : IF OPEN_BRACKET expr CLOSE_BRACKET THEN block_body end_if\n        \n        end_if : END\n                 | else_stat\n        \n        else_stat : ELSE THEN block_body END\n        \n        expr : expr oper_add comp\n               | comp\n        \n        brac_expr : OPEN_BRACKET expr CLOSE_BRACKET\n        \n        oper_add : PLUS\n                   | MINUS\n        \n        oper_mult : MULT\n                    | DIV\n                    | MOD\n                    | AND\n                    | OR\n                    | XOR\n                    | LESSER\n                    | GREATER\n                    | EQUAL\n                    | LESSER_EQ\n                    | GREATER_EQ\n                    | N_EQUAL\n        \n        factor : ID\n                 | NUMBER\n                 | brac_expr\n                 | func_call\n        \n        factor_n : NOT factor\n                    | factor\n        \n        factors_n : factor_n\n                | factors_n factor_n\n        \n        comp : comp oper_mult factor_n\n               | factor_n\n        '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,3,22,],[0,-1,-3,]),'BEGIN':([2,44,76,],[4,4,83,]),'LOOP':([4,75,83,89,],[11,11,11,11,]),'IF':([4,75,83,89,],[12,12,12,12,]),'FUNCTION':([4,75,83,89,],[13,13,13,13,]),'ID':([4,6,10,13,15,16,17,18,19,20,21,23,24,25,27,29,33,34,35,36,37,38,42,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,67,69,73,74,75,79,80,81,83,89,90,],[14,14,-9,26,-10,-11,-12,28,-2,-20,-21,-8,35,35,35,35,35,-52,-47,-48,-49,-50,35,35,-33,-34,35,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-51,35,78,-19,-32,35,-53,14,-18,-22,-54,14,14,92,]),'COMMENT':([4,6,10,15,16,17,19,23,67,75,79,83,89,],[19,19,-9,-10,-11,-12,-2,-8,-19,19,-18,19,19,]),'INT':([4,6,10,15,16,17,19,23,40,64,65,67,75,77,78,79,83,89,],[20,20,-9,-10,-11,-12,-2,-8,20,20,-25,-19,20,-24,-23,-18,20,20,]),'STRING':([4,6,10,15,16,17,19,23,40,64,65,67,75,77,78,79,83,89,],[21,21,-9,-10,-11,-12,-2,-8,21,21,-25,-19,21,-24,-23,-18,21,21,]),'END':([5,6,7,8,9,10,15,16,17,19,22,23,31,32,34,35,36,37,38,61,67,69,70,71,72,79,80,82,84,85,86,91,92,93,94,95,96,],[22,-4,-5,-6,-7,-9,-10,-11,-12,-2,-3,-8,-31,-56,-52,-47,-48,-49,-50,-51,-19,-32,-13,-30,-55,-18,-22,85,-26,-27,-28,96,-15,-14,-16,-17,-29,]),'ELSE':([6,7,8,9,10,15,16,17,19,22,23,31,32,34,35,36,37,38,61,67,69,70,71,72,79,80,82,84,85,86,92,93,94,95,96,],[-4,-5,-6,-7,-9,-10,-11,-12,-2,-3,-8,-31,-56,-52,-47,-48,-49,-50,-51,-19,-32,-13,-30,-55,-18,-22,87,-26,-27,-28,-15,-14,-16,-17,-29,]),'RETURN':([6,7,8,9,10,15,16,17,19,22,23,31,32,34,35,36,37,38,61,67,69,70,71,72,79,80,84,85,86,88,92,93,94,95,96,],[-4,-5,-6,-7,-9,-10,-11,-12,-2,-3,-8,-31,-56,-52,-47,-48,-49,-50,-51,-19,-32,-13,-30,-55,-18,-22,-26,-27,-28,90,-15,-14,-16,-17,-29,]),'OPEN_BRACKET':([11,12,24,25,26,27,29,33,34,35,36,37,38,42,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,69,73,74,80,81,90,92,],[24,25,29,29,40,29,29,29,-52,62,-48,-49,-50,29,29,-33,-34,29,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-51,29,-32,29,-53,-22,-54,29,62,]),'ASSIGN':([14,28,],[27,42,]),'NOT':([24,25,29,34,35,36,37,38,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,69,73,74,80,81,90,],[33,33,33,-52,-47,-48,-49,-50,33,-33,-34,33,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-51,33,-32,33,-53,-22,-54,33,]),'NUMBER':([24,25,27,29,33,34,35,36,37,38,42,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,69,73,74,80,81,90,],[36,36,36,36,36,-52,-47,-48,-49,-50,36,36,-33,-34,36,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-51,36,-32,36,-53,-22,-54,36,]),'CLOSE_BRACKET':([30,31,32,34,35,36,37,38,39,43,61,64,65,69,71,72,73,74,77,78,80,81,],[44,-31,-56,-52,-47,-48,-49,-50,63,69,-51,76,-25,-32,-30,-55,80,-53,-24,-23,-22,-54,]),'PLUS':([30,31,32,34,35,36,37,38,39,43,61,69,71,72,80,92,94,95,],[46,-31,-56,-52,-47,-48,-49,-50,46,46,-51,-32,-30,-55,-22,-47,46,-50,]),'MINUS':([30,31,32,34,35,36,37,38,39,43,61,69,71,72,80,92,94,95,],[47,-31,-56,-52,-47,-48,-49,-50,47,47,-51,-32,-30,-55,-22,-47,47,-50,]),'MULT':([31,32,34,35,36,37,38,61,69,71,72,80,92,95,],[49,-56,-52,-47,-48,-49,-50,-51,-32,49,-55,-22,-47,-50,]),'DIV':([31,32,34,35,36,37,38,61,69,71,72,80,92,95,],[50,-56,-52,-47,-48,-49,-50,-51,-32,50,-55,-22,-47,-50,]),'MOD':([31,32,34,35,36,37,38,61,69,71,72,80,92,95,],[51,-56,-52,-47,-48,-49,-50,-51,-32,51,-55,-22,-47,-50,]),'AND':([31,32,34,35,36,37,38,61,69,71,72,80,92,95,],[52,-56,-52,-47,-48,-49,-50,-51,-32,52,-55,-22,-47,-50,]),'OR':([31,32,34,35,36,37,38,61,69,71,72,80,92,95,],[53,-56,-52,-47,-48,-49,-50,-51,-32,53,-55,-22,-47,-50,]),'XOR':([31,32,34,35,36,37,38,61,69,71,72,80,92,95,],[54,-56,-52,-47,-48,-49,-50,-51,-32,54,-55,-22,-47,-50,]),'LESSER':([31,32,34,35,36,37,38,61,69,71,72,80,92,95,],[55,-56,-52,-47,-48,-49,-50,-51,-32,55,-55,-22,-47,-50,]),'GREATER':([31,32,34,35,36,37,38,61,69,71,72,80,92,95,],[56,-56,-52,-47,-48,-49,-50,-51,-32,56,-55,-22,-47,-50,]),'EQUAL':([31,32,34,35,36,37,38,61,69,71,72,80,92,95,],[57,-56,-52,-47,-48,-49,-50,-51,-32,57,-55,-22,-47,-50,]),'LESSER_EQ':([31,32,34,35,36,37,38,61,69,71,72,80,92,95,],[58,-56,-52,-47,-48,-49,-50,-51,-32,58,-55,-22,-47,-50,]),'GREATER_EQ':([31,32,34,35,36,37,38,61,69,71,72,80,92,95,],[59,-56,-52,-47,-48,-49,-50,-51,-32,59,-55,-22,-47,-50,]),'N_EQUAL':([31,32,34,35,36,37,38,61,69,71,72,80,92,95,],[60,-56,-52,-47,-48,-49,-50,-51,-32,60,-55,-22,-47,-50,]),'ENDLINE':([35,36,37,38,41,68,69,80,],[-47,-48,-49,-50,67,79,-32,-22,]),'THEN':([63,87,],[75,89,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program_decl':([0,],[1,]),'block':([2,44,],[3,70,]),'block_body':([4,75,83,89,],[5,82,88,91,]),'lines':([4,75,83,89,],[6,6,6,6,]),'loop':([4,75,83,89,],[7,7,7,7,]),'if_stat':([4,75,83,89,],[8,8,8,8,]),'func_decl':([4,75,83,89,],[9,9,9,9,]),'line':([4,6,75,83,89,],[10,23,10,10,10,]),'var_decl':([4,6,75,83,89,],[15,15,15,15,15,]),'var_assign':([4,6,75,83,89,],[16,16,16,16,16,]),'comment':([4,6,75,83,89,],[17,17,17,17,17,]),'type':([4,6,40,64,75,83,89,],[18,18,66,66,18,18,18,]),'expr':([24,25,29,90,],[30,39,43,94,]),'comp':([24,25,29,45,90,],[31,31,31,71,31,]),'factor_n':([24,25,29,45,48,62,73,90,],[32,32,32,32,72,74,81,32,]),'factor':([24,25,27,29,33,42,45,48,62,73,90,],[34,34,41,34,61,68,34,34,34,34,34,]),'brac_expr':([24,25,27,29,33,42,45,48,62,73,90,],[37,37,37,37,37,37,37,37,37,37,37,]),'func_call':([24,25,27,29,33,42,45,48,62,73,90,],[38,38,38,38,38,38,38,38,38,38,95,]),'oper_add':([30,39,43,94,],[45,45,45,45,]),'oper_mult':([31,71,],[48,48,]),'args':([40,],[64,]),'arg':([40,64,],[65,77,]),'factors_n':([62,],[73,]),'end_if':([82,],[84,]),'else_stat':([82,],[86,]),'return_val':([90,],[93,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program_decl","S'",1,None,None,None),
  ('program_decl -> PROGRAM block','program_decl',2,'p_program_decl','parser.py',20),
  ('comment -> COMMENT','comment',1,'p_comment','parser.py',26),
  ('block -> BEGIN block_body END','block',3,'p_block','parser.py',31),
  ('block_body -> lines','block_body',1,'p_block_body','parser.py',39),
  ('block_body -> loop','block_body',1,'p_block_body','parser.py',40),
  ('block_body -> if_stat','block_body',1,'p_block_body','parser.py',41),
  ('block_body -> func_decl','block_body',1,'p_block_body','parser.py',42),
  ('lines -> lines line','lines',2,'p_lines','parser.py',50),
  ('lines -> line','lines',1,'p_lines','parser.py',51),
  ('line -> var_decl','line',1,'p_line','parser.py',65),
  ('line -> var_assign','line',1,'p_line','parser.py',66),
  ('line -> comment','line',1,'p_line','parser.py',67),
  ('loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET block','loop',5,'p_loop','parser.py',75),
  ('func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN block_body RETURN return_val','func_decl',9,'p_func_decl','parser.py',81),
  ('return_val -> ID','return_val',1,'p_return_val','parser.py',86),
  ('return_val -> expr','return_val',1,'p_return_val','parser.py',87),
  ('return_val -> func_call','return_val',1,'p_return_val','parser.py',88),
  ('var_decl -> type ID ASSIGN factor ENDLINE','var_decl',5,'p_var_decl','parser.py',94),
  ('var_assign -> ID ASSIGN factor ENDLINE','var_assign',4,'p_var_assign','parser.py',102),
  ('type -> INT','type',1,'p_type','parser.py',110),
  ('type -> STRING','type',1,'p_type','parser.py',111),
  ('func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET','func_call',4,'p_func_call','parser.py',119),
  ('arg -> type ID','arg',2,'p_arg','parser.py',125),
  ('args -> args arg','args',2,'p_args','parser.py',131),
  ('args -> arg','args',1,'p_args','parser.py',132),
  ('if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET THEN block_body end_if','if_stat',7,'p_if_stat','parser.py',138),
  ('end_if -> END','end_if',1,'p_end_if','parser.py',148),
  ('end_if -> else_stat','end_if',1,'p_end_if','parser.py',149),
  ('else_stat -> ELSE THEN block_body END','else_stat',4,'p_else_stat','parser.py',155),
  ('expr -> expr oper_add comp','expr',3,'p_expr','parser.py',161),
  ('expr -> comp','expr',1,'p_expr','parser.py',162),
  ('brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET','brac_expr',3,'p_brac_expr','parser.py',177),
  ('oper_add -> PLUS','oper_add',1,'p_oper_add','parser.py',184),
  ('oper_add -> MINUS','oper_add',1,'p_oper_add','parser.py',185),
  ('oper_mult -> MULT','oper_mult',1,'p_oper_mult','parser.py',192),
  ('oper_mult -> DIV','oper_mult',1,'p_oper_mult','parser.py',193),
  ('oper_mult -> MOD','oper_mult',1,'p_oper_mult','parser.py',194),
  ('oper_mult -> AND','oper_mult',1,'p_oper_mult','parser.py',195),
  ('oper_mult -> OR','oper_mult',1,'p_oper_mult','parser.py',196),
  ('oper_mult -> XOR','oper_mult',1,'p_oper_mult','parser.py',197),
  ('oper_mult -> LESSER','oper_mult',1,'p_oper_mult','parser.py',198),
  ('oper_mult -> GREATER','oper_mult',1,'p_oper_mult','parser.py',199),
  ('oper_mult -> EQUAL','oper_mult',1,'p_oper_mult','parser.py',200),
  ('oper_mult -> LESSER_EQ','oper_mult',1,'p_oper_mult','parser.py',201),
  ('oper_mult -> GREATER_EQ','oper_mult',1,'p_oper_mult','parser.py',202),
  ('oper_mult -> N_EQUAL','oper_mult',1,'p_oper_mult','parser.py',203),
  ('factor -> ID','factor',1,'p_factor','parser.py',210),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',211),
  ('factor -> brac_expr','factor',1,'p_factor','parser.py',212),
  ('factor -> func_call','factor',1,'p_factor','parser.py',213),
  ('factor_n -> NOT factor','factor_n',2,'p_factor_n','parser.py',221),
  ('factor_n -> factor','factor_n',1,'p_factor_n','parser.py',222),
  ('factors_n -> factor_n','factors_n',1,'p_factors_n','parser.py',233),
  ('factors_n -> factors_n factor_n','factors_n',2,'p_factors_n','parser.py',234),
  ('comp -> comp oper_mult factor_n','comp',3,'p_comp','parser.py',239),
  ('comp -> factor_n','comp',1,'p_comp','parser.py',240),
]
