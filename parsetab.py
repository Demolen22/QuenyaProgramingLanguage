
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BEGIN CLOSE_BRACKET CLOSE_CURL_BRACKET CLOSE_SQ_BRACKET COMMENT DIV ELSE END ENDLINE EQUAL FUNCTION GREATER GREATER_EQ ID IF INT LESSER LESSER_EQ LIST LOOP MINUS MOD MULT NOT NULL NUMBER N_EQUAL OPEN_BRACKET OPEN_CURL_BRACKET OPEN_SQ_BRACKET OR PLUS PRINT PROGRAM RETURN STRING STRING_EXPR THEN XOR\n        program_decl : PROGRAM block\n        \n        comment : COMMENT\n        \n        block : BEGIN lines END\n        \n        lines : lines line\n                | line\n        \n        line : var_decl\n                | var_assign\n                | if_stat\n                | comment\n                | print\n                | loop\n                | func_decl\n                | table_decl\n                | table_assign\n        \n        loop : LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END\n        \n        print : PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE\n        \n        table_decl : LIST type NUMBER ID ENDLINE\n        \n        table_assign : ID OPEN_SQ_BRACKET NUMBER CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE\n        \n        func_decl : FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n\n        \n        var_decl : INT ID ASSIGN factor_n ENDLINE\n                | STRING ID ASSIGN STRING_EXPR ENDLINE\n        \n        var_assign : ID ASSIGN factor_n ENDLINE\n                    | ID ASSIGN STRING_EXPR ENDLINE\n        \n        type : INT\n               | STRING\n        \n        func_call : ID OPEN_BRACKET factors_n CLOSE_BRACKET\n        \n        arg : type ID\n        \n        args : args arg\n               | arg\n        \n        if_stat : IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if\n        \n        end_if : END\n                 | else_stat\n        \n        else_stat : ELSE THEN lines END\n        \n        expr : expr oper_add comp\n               | comp\n        \n        brac_expr : OPEN_BRACKET expr CLOSE_BRACKET\n        \n        oper_add : PLUS\n                   | MINUS\n        \n        oper_mult : MULT\n                    | DIV\n                    | MOD\n                    | AND\n                    | OR\n                    | XOR\n                    | LESSER\n                    | GREATER\n                    | EQUAL\n                    | LESSER_EQ\n                    | GREATER_EQ\n                    | N_EQUAL\n        \n        factor : ID\n                 | NUMBER\n                 | brac_expr\n                 | func_call\n        \n        factor_n : NOT factor\n                    | factor\n        \n        factors_n : factor_n\n                | factors_n factor_n\n        \n        comp : comp oper_mult factor_n\n               | factor_n\n        '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,3,25,],[0,-1,-3,]),'BEGIN':([2,83,99,],[4,98,108,]),'INT':([4,5,6,7,8,9,10,11,12,13,14,15,20,24,26,39,43,44,45,46,55,59,60,61,84,85,88,91,93,94,97,98,100,101,102,103,106,107,108,109,110,111,112,114,115,116,118,119,120,],[16,16,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,36,-4,-51,-56,-52,-53,-54,36,-22,-23,-55,36,-29,-20,-36,-21,16,-16,16,-28,-27,-17,-26,16,16,16,-18,-30,-31,-32,-15,16,16,16,-19,-33,]),'STRING':([4,5,6,7,8,9,10,11,12,13,14,15,20,24,26,39,43,44,45,46,55,59,60,61,84,85,88,91,93,94,97,98,100,101,102,103,106,107,108,109,110,111,112,114,115,116,118,119,120,],[18,18,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,37,-4,-51,-56,-52,-53,-54,37,-22,-23,-55,37,-29,-20,-36,-21,18,-16,18,-28,-27,-17,-26,18,18,18,-18,-30,-31,-32,-15,18,18,18,-19,-33,]),'ID':([4,5,6,7,8,9,10,11,12,13,14,15,16,18,20,23,26,28,31,32,33,36,37,38,39,42,43,44,45,46,47,56,58,59,60,61,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,86,88,89,90,91,92,93,94,97,98,102,103,104,106,107,108,109,110,111,112,114,115,116,117,118,119,120,],[17,17,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,27,30,-2,34,-4,39,39,39,39,-24,-25,39,-51,39,-56,-52,-53,-54,39,87,39,-22,-23,-55,39,-37,-38,39,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,101,-20,39,-57,-36,39,-21,17,-16,17,-17,-26,-58,17,17,17,-18,-30,-31,-32,-15,17,17,39,17,-19,-33,]),'IF':([4,5,6,7,8,9,10,11,12,13,14,15,20,26,39,43,44,45,46,59,60,61,88,91,93,94,97,98,102,103,106,107,108,109,110,111,112,114,115,116,118,119,120,],[19,19,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-51,-56,-52,-53,-54,-22,-23,-55,-20,-36,-21,19,-16,19,-17,-26,19,19,19,-18,-30,-31,-32,-15,19,19,19,-19,-33,]),'COMMENT':([4,5,6,7,8,9,10,11,12,13,14,15,20,26,39,43,44,45,46,59,60,61,88,91,93,94,97,98,102,103,106,107,108,109,110,111,112,114,115,116,118,119,120,],[20,20,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-51,-56,-52,-53,-54,-22,-23,-55,-20,-36,-21,20,-16,20,-17,-26,20,20,20,-18,-30,-31,-32,-15,20,20,20,-19,-33,]),'PRINT':([4,5,6,7,8,9,10,11,12,13,14,15,20,26,39,43,44,45,46,59,60,61,88,91,93,94,97,98,102,103,106,107,108,109,110,111,112,114,115,116,118,119,120,],[21,21,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-51,-56,-52,-53,-54,-22,-23,-55,-20,-36,-21,21,-16,21,-17,-26,21,21,21,-18,-30,-31,-32,-15,21,21,21,-19,-33,]),'LOOP':([4,5,6,7,8,9,10,11,12,13,14,15,20,26,39,43,44,45,46,59,60,61,88,91,93,94,97,98,102,103,106,107,108,109,110,111,112,114,115,116,118,119,120,],[22,22,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-51,-56,-52,-53,-54,-22,-23,-55,-20,-36,-21,22,-16,22,-17,-26,22,22,22,-18,-30,-31,-32,-15,22,22,22,-19,-33,]),'FUNCTION':([4,5,6,7,8,9,10,11,12,13,14,15,20,26,39,43,44,45,46,59,60,61,88,91,93,94,97,98,102,103,106,107,108,109,110,111,112,114,115,116,118,119,120,],[23,23,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-51,-56,-52,-53,-54,-22,-23,-55,-20,-36,-21,23,-16,23,-17,-26,23,23,23,-18,-30,-31,-32,-15,23,23,23,-19,-33,]),'LIST':([4,5,6,7,8,9,10,11,12,13,14,15,20,26,39,43,44,45,46,59,60,61,88,91,93,94,97,98,102,103,106,107,108,109,110,111,112,114,115,116,118,119,120,],[24,24,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-51,-56,-52,-53,-54,-22,-23,-55,-20,-36,-21,24,-16,24,-17,-26,24,24,24,-18,-30,-31,-32,-15,24,24,24,-19,-33,]),'END':([5,6,7,8,9,10,11,12,13,14,15,20,26,39,43,44,45,46,59,60,61,88,91,93,97,102,103,106,107,109,110,111,112,114,118,119,120,],[25,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-51,-56,-52,-53,-54,-22,-23,-55,-20,-36,-21,-16,-17,-26,111,114,-18,-30,-31,-32,-15,120,-19,-33,]),'ELSE':([6,7,8,9,10,11,12,13,14,15,20,26,39,43,44,45,46,59,60,61,88,91,93,97,102,103,106,109,110,111,112,114,119,120,],[-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-51,-56,-52,-53,-54,-22,-23,-55,-20,-36,-21,-16,-17,-26,113,-18,-30,-31,-32,-15,-19,-33,]),'RETURN':([6,7,8,9,10,11,12,13,14,15,20,26,39,43,44,45,46,59,60,61,88,91,93,97,102,103,109,110,111,112,114,115,119,120,],[-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-51,-56,-52,-53,-54,-22,-23,-55,-20,-36,-21,-16,-17,-26,-18,-30,-31,-32,-15,117,-19,-33,]),'ASSIGN':([17,27,30,63,],[28,38,49,92,]),'OPEN_SQ_BRACKET':([17,],[29,]),'OPEN_BRACKET':([19,21,22,28,31,32,33,34,38,39,42,43,44,45,46,47,58,61,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,89,90,91,92,103,104,117,],[31,32,33,47,47,47,47,55,47,58,47,-56,-52,-53,-54,47,47,-55,47,-37,-38,47,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,47,-57,-36,47,-26,-58,47,]),'STRING_EXPR':([28,49,],[41,64,]),'NOT':([28,31,32,33,38,39,43,44,45,46,47,58,61,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,89,90,91,92,103,104,117,],[42,42,42,42,42,-51,-56,-52,-53,-54,42,42,-55,42,-37,-38,42,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,42,-57,-36,42,-26,-58,42,]),'NUMBER':([28,29,31,32,33,35,36,37,38,39,42,43,44,45,46,47,58,61,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,89,90,91,92,103,104,117,],[44,48,44,44,44,56,-24,-25,44,-51,44,-56,-52,-53,-54,44,44,-55,44,-37,-38,44,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,44,-57,-36,44,-26,-58,44,]),'ENDLINE':([39,40,41,43,44,45,46,57,61,64,82,87,91,103,105,],[-51,59,60,-56,-52,-53,-54,88,-55,93,97,102,-36,-26,109,]),'MULT':([39,43,44,45,46,51,52,61,91,95,96,103,],[-51,-56,-52,-53,-54,70,-60,-55,-36,70,-59,-26,]),'DIV':([39,43,44,45,46,51,52,61,91,95,96,103,],[-51,-56,-52,-53,-54,71,-60,-55,-36,71,-59,-26,]),'MOD':([39,43,44,45,46,51,52,61,91,95,96,103,],[-51,-56,-52,-53,-54,72,-60,-55,-36,72,-59,-26,]),'AND':([39,43,44,45,46,51,52,61,91,95,96,103,],[-51,-56,-52,-53,-54,73,-60,-55,-36,73,-59,-26,]),'OR':([39,43,44,45,46,51,52,61,91,95,96,103,],[-51,-56,-52,-53,-54,74,-60,-55,-36,74,-59,-26,]),'XOR':([39,43,44,45,46,51,52,61,91,95,96,103,],[-51,-56,-52,-53,-54,75,-60,-55,-36,75,-59,-26,]),'LESSER':([39,43,44,45,46,51,52,61,91,95,96,103,],[-51,-56,-52,-53,-54,76,-60,-55,-36,76,-59,-26,]),'GREATER':([39,43,44,45,46,51,52,61,91,95,96,103,],[-51,-56,-52,-53,-54,77,-60,-55,-36,77,-59,-26,]),'EQUAL':([39,43,44,45,46,51,52,61,91,95,96,103,],[-51,-56,-52,-53,-54,78,-60,-55,-36,78,-59,-26,]),'LESSER_EQ':([39,43,44,45,46,51,52,61,91,95,96,103,],[-51,-56,-52,-53,-54,79,-60,-55,-36,79,-59,-26,]),'GREATER_EQ':([39,43,44,45,46,51,52,61,91,95,96,103,],[-51,-56,-52,-53,-54,80,-60,-55,-36,80,-59,-26,]),'N_EQUAL':([39,43,44,45,46,51,52,61,91,95,96,103,],[-51,-56,-52,-53,-54,81,-60,-55,-36,81,-59,-26,]),'CLOSE_BRACKET':([39,43,44,45,46,50,51,52,53,54,61,62,84,85,89,90,91,95,96,100,101,103,104,],[-51,-56,-52,-53,-54,65,-35,-60,82,83,-55,91,99,-29,103,-57,-36,-34,-59,-28,-27,-26,-58,]),'PLUS':([39,43,44,45,46,50,51,52,53,54,61,62,91,95,96,103,],[-51,-56,-52,-53,-54,67,-35,-60,67,67,-55,67,-36,-34,-59,-26,]),'MINUS':([39,43,44,45,46,50,51,52,53,54,61,62,91,95,96,103,],[-51,-56,-52,-53,-54,68,-35,-60,68,68,-55,68,-36,-34,-59,-26,]),'CLOSE_SQ_BRACKET':([48,],[63,]),'THEN':([65,113,],[94,116,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program_decl':([0,],[1,]),'block':([2,],[3,]),'lines':([4,94,98,108,116,],[5,106,107,115,118,]),'line':([4,5,94,98,106,107,108,115,116,118,],[6,26,6,6,26,26,6,26,6,26,]),'var_decl':([4,5,94,98,106,107,108,115,116,118,],[7,7,7,7,7,7,7,7,7,7,]),'var_assign':([4,5,94,98,106,107,108,115,116,118,],[8,8,8,8,8,8,8,8,8,8,]),'if_stat':([4,5,94,98,106,107,108,115,116,118,],[9,9,9,9,9,9,9,9,9,9,]),'comment':([4,5,94,98,106,107,108,115,116,118,],[10,10,10,10,10,10,10,10,10,10,]),'print':([4,5,94,98,106,107,108,115,116,118,],[11,11,11,11,11,11,11,11,11,11,]),'loop':([4,5,94,98,106,107,108,115,116,118,],[12,12,12,12,12,12,12,12,12,12,]),'func_decl':([4,5,94,98,106,107,108,115,116,118,],[13,13,13,13,13,13,13,13,13,13,]),'table_decl':([4,5,94,98,106,107,108,115,116,118,],[14,14,14,14,14,14,14,14,14,14,]),'table_assign':([4,5,94,98,106,107,108,115,116,118,],[15,15,15,15,15,15,15,15,15,15,]),'type':([24,55,84,],[35,86,86,]),'factor_n':([28,31,32,33,38,47,58,66,69,89,92,117,],[40,52,52,52,57,52,90,52,96,104,105,119,]),'factor':([28,31,32,33,38,42,47,58,66,69,89,92,117,],[43,43,43,43,43,61,43,43,43,43,43,43,43,]),'brac_expr':([28,31,32,33,38,42,47,58,66,69,89,92,117,],[45,45,45,45,45,45,45,45,45,45,45,45,45,]),'func_call':([28,31,32,33,38,42,47,58,66,69,89,92,117,],[46,46,46,46,46,46,46,46,46,46,46,46,46,]),'expr':([31,32,33,47,],[50,53,54,62,]),'comp':([31,32,33,47,66,],[51,51,51,51,95,]),'oper_add':([50,53,54,62,],[66,66,66,66,]),'oper_mult':([51,95,],[69,69,]),'args':([55,],[84,]),'arg':([55,84,],[85,100,]),'factors_n':([58,],[89,]),'end_if':([106,],[110,]),'else_stat':([106,],[112,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program_decl","S'",1,None,None,None),
  ('program_decl -> PROGRAM block','program_decl',2,'p_program_decl','parser.py',79),
  ('comment -> COMMENT','comment',1,'p_comment','parser.py',85),
  ('block -> BEGIN lines END','block',3,'p_block','parser.py',90),
  ('lines -> lines line','lines',2,'p_lines','parser.py',202),
  ('lines -> line','lines',1,'p_lines','parser.py',203),
  ('line -> var_decl','line',1,'p_line','parser.py',213),
  ('line -> var_assign','line',1,'p_line','parser.py',214),
  ('line -> if_stat','line',1,'p_line','parser.py',215),
  ('line -> comment','line',1,'p_line','parser.py',216),
  ('line -> print','line',1,'p_line','parser.py',217),
  ('line -> loop','line',1,'p_line','parser.py',218),
  ('line -> func_decl','line',1,'p_line','parser.py',219),
  ('line -> table_decl','line',1,'p_line','parser.py',220),
  ('line -> table_assign','line',1,'p_line','parser.py',221),
  ('loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END','loop',7,'p_loop','parser.py',228),
  ('print -> PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE','print',5,'p_print','parser.py',238),
  ('table_decl -> LIST type NUMBER ID ENDLINE','table_decl',5,'p_table_decl','parser.py',244),
  ('table_assign -> ID OPEN_SQ_BRACKET NUMBER CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE','table_assign',7,'p_table_assign','parser.py',251),
  ('func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n','func_decl',9,'p_func_decl','parser.py',258),
  ('var_decl -> INT ID ASSIGN factor_n ENDLINE','var_decl',5,'p_var_decl','parser.py',271),
  ('var_decl -> STRING ID ASSIGN STRING_EXPR ENDLINE','var_decl',5,'p_var_decl','parser.py',272),
  ('var_assign -> ID ASSIGN factor_n ENDLINE','var_assign',4,'p_var_assign','parser.py',279),
  ('var_assign -> ID ASSIGN STRING_EXPR ENDLINE','var_assign',4,'p_var_assign','parser.py',280),
  ('type -> INT','type',1,'p_type','parser.py',287),
  ('type -> STRING','type',1,'p_type','parser.py',288),
  ('func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET','func_call',4,'p_func_call','parser.py',296),
  ('arg -> type ID','arg',2,'p_arg','parser.py',306),
  ('args -> args arg','args',2,'p_args','parser.py',314),
  ('args -> arg','args',1,'p_args','parser.py',315),
  ('if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if','if_stat',7,'p_if_stat','parser.py',326),
  ('end_if -> END','end_if',1,'p_end_if','parser.py',333),
  ('end_if -> else_stat','end_if',1,'p_end_if','parser.py',334),
  ('else_stat -> ELSE THEN lines END','else_stat',4,'p_else_stat','parser.py',342),
  ('expr -> expr oper_add comp','expr',3,'p_expr','parser.py',349),
  ('expr -> comp','expr',1,'p_expr','parser.py',350),
  ('brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET','brac_expr',3,'p_brac_expr','parser.py',360),
  ('oper_add -> PLUS','oper_add',1,'p_oper_add','parser.py',367),
  ('oper_add -> MINUS','oper_add',1,'p_oper_add','parser.py',368),
  ('oper_mult -> MULT','oper_mult',1,'p_oper_mult','parser.py',375),
  ('oper_mult -> DIV','oper_mult',1,'p_oper_mult','parser.py',376),
  ('oper_mult -> MOD','oper_mult',1,'p_oper_mult','parser.py',377),
  ('oper_mult -> AND','oper_mult',1,'p_oper_mult','parser.py',378),
  ('oper_mult -> OR','oper_mult',1,'p_oper_mult','parser.py',379),
  ('oper_mult -> XOR','oper_mult',1,'p_oper_mult','parser.py',380),
  ('oper_mult -> LESSER','oper_mult',1,'p_oper_mult','parser.py',381),
  ('oper_mult -> GREATER','oper_mult',1,'p_oper_mult','parser.py',382),
  ('oper_mult -> EQUAL','oper_mult',1,'p_oper_mult','parser.py',383),
  ('oper_mult -> LESSER_EQ','oper_mult',1,'p_oper_mult','parser.py',384),
  ('oper_mult -> GREATER_EQ','oper_mult',1,'p_oper_mult','parser.py',385),
  ('oper_mult -> N_EQUAL','oper_mult',1,'p_oper_mult','parser.py',386),
  ('factor -> ID','factor',1,'p_factor','parser.py',393),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',394),
  ('factor -> brac_expr','factor',1,'p_factor','parser.py',395),
  ('factor -> func_call','factor',1,'p_factor','parser.py',396),
  ('factor_n -> NOT factor','factor_n',2,'p_factor_n','parser.py',403),
  ('factor_n -> factor','factor_n',1,'p_factor_n','parser.py',404),
  ('factors_n -> factor_n','factors_n',1,'p_factors_n','parser.py',414),
  ('factors_n -> factors_n factor_n','factors_n',2,'p_factors_n','parser.py',415),
  ('comp -> comp oper_mult factor_n','comp',3,'p_comp','parser.py',425),
  ('comp -> factor_n','comp',1,'p_comp','parser.py',426),
]
