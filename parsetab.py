
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BEGIN CLOSE_BRACKET CLOSE_CURL_BRACKET CLOSE_SQ_BRACKET COMMENT DIV ELSE END ENDLINE EQUAL FUNCTION GREATER GREATER_EQ ID IF INT LESSER LESSER_EQ LIST LOOP MINUS MOD MULT NOT NULL NUMBER N_EQUAL OPEN_BRACKET OPEN_CURL_BRACKET OPEN_SQ_BRACKET OR PLUS PRINT PROGRAM RETURN STRING STRING_EXPR THEN XOR\n        program_decl : PROGRAM block\n        \n        comment : COMMENT\n        \n        block : BEGIN lines END\n        \n        lines : lines line\n                | line\n        \n        line : var_decl\n                | var_assign\n                | if_stat\n                | comment\n                | print\n                | loop\n                | func_decl\n                | table_decl\n                | table_assign\n        \n        loop : LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END\n        \n        print : PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE\n        \n        table_decl : LIST type NUMBER ID ENDLINE\n        \n        table_assign : ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE\n        \n        table_read : ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET\n        \n        func_decl : FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n\n        \n        var_decl : INT ID ASSIGN factor_n ENDLINE\n                | STRING ID ASSIGN string_opers ENDLINE\n        \n        var_assign : ID ASSIGN factor_n ENDLINE\n                    | ID ASSIGN string_opers ENDLINE\n        \n        string_opers : string_opers PLUS STRING_EXPR\n                        | string_opers MINUS STRING_EXPR\n                        | STRING_EXPR\n        \n        type : INT\n               | STRING\n        \n        func_call : ID OPEN_BRACKET factors_n CLOSE_BRACKET\n        \n        arg : type ID\n        \n        args : args arg\n               | arg\n        \n        if_stat : IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if\n        \n        end_if : END\n                 | else_stat\n        \n        else_stat : ELSE THEN lines END\n        \n        expr : expr oper_add comp\n               | comp\n        \n        brac_expr : OPEN_BRACKET expr CLOSE_BRACKET\n        \n        oper_add : PLUS\n                   | MINUS\n        \n        oper_mult : MULT\n                    | DIV\n                    | MOD\n                    | AND\n                    | OR\n                    | XOR\n                    | LESSER\n                    | GREATER\n                    | EQUAL\n                    | LESSER_EQ\n                    | GREATER_EQ\n                    | N_EQUAL\n        \n        factor : ID\n                 | NUMBER\n                 | brac_expr\n                 | func_call\n                 | table_read\n        \n        factor_n : NOT factor\n                    | factor\n        \n        factors_n : factor_n\n                | factors_n factor_n\n        \n        comp : comp oper_mult factor_n\n               | factor_n\n        '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,3,25,],[0,-1,-3,]),'BEGIN':([2,88,107,],[4,106,117,]),'INT':([4,5,6,7,8,9,10,11,12,13,14,15,20,24,26,39,43,45,46,47,48,57,62,63,66,89,90,93,99,101,102,105,106,108,109,110,111,113,115,116,117,118,119,120,121,123,124,125,127,128,129,],[16,16,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,36,-4,-55,-61,-56,-57,-58,-59,36,-23,-24,-60,36,-33,-21,-40,-22,16,-16,16,-32,-31,-17,-30,-19,16,16,16,-18,-34,-35,-36,-15,16,16,16,-20,-37,]),'STRING':([4,5,6,7,8,9,10,11,12,13,14,15,20,24,26,39,43,45,46,47,48,57,62,63,66,89,90,93,99,101,102,105,106,108,109,110,111,113,115,116,117,118,119,120,121,123,124,125,127,128,129,],[18,18,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,37,-4,-55,-61,-56,-57,-58,-59,37,-23,-24,-60,37,-33,-21,-40,-22,18,-16,18,-32,-31,-17,-30,-19,18,18,18,-18,-34,-35,-36,-15,18,18,18,-20,-37,]),'ID':([4,5,6,7,8,9,10,11,12,13,14,15,16,18,20,23,26,28,29,31,32,33,36,37,38,39,42,43,45,46,47,48,49,58,60,61,62,63,66,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,91,93,94,95,99,100,101,102,105,106,110,111,112,113,115,116,117,118,119,120,121,123,124,125,126,127,128,129,],[17,17,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,27,30,-2,34,-4,39,39,39,39,39,-28,-29,39,-55,39,-61,-56,-57,-58,-59,39,92,39,39,-23,-24,-60,39,-41,-42,39,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,109,-21,39,-62,-40,39,-22,17,-16,17,-17,-30,-63,-19,17,17,17,-18,-34,-35,-36,-15,17,17,39,17,-20,-37,]),'IF':([4,5,6,7,8,9,10,11,12,13,14,15,20,26,39,43,45,46,47,48,62,63,66,93,99,101,102,105,106,110,111,113,115,116,117,118,119,120,121,123,124,125,127,128,129,],[19,19,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-55,-61,-56,-57,-58,-59,-23,-24,-60,-21,-40,-22,19,-16,19,-17,-30,-19,19,19,19,-18,-34,-35,-36,-15,19,19,19,-20,-37,]),'COMMENT':([4,5,6,7,8,9,10,11,12,13,14,15,20,26,39,43,45,46,47,48,62,63,66,93,99,101,102,105,106,110,111,113,115,116,117,118,119,120,121,123,124,125,127,128,129,],[20,20,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-55,-61,-56,-57,-58,-59,-23,-24,-60,-21,-40,-22,20,-16,20,-17,-30,-19,20,20,20,-18,-34,-35,-36,-15,20,20,20,-20,-37,]),'PRINT':([4,5,6,7,8,9,10,11,12,13,14,15,20,26,39,43,45,46,47,48,62,63,66,93,99,101,102,105,106,110,111,113,115,116,117,118,119,120,121,123,124,125,127,128,129,],[21,21,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-55,-61,-56,-57,-58,-59,-23,-24,-60,-21,-40,-22,21,-16,21,-17,-30,-19,21,21,21,-18,-34,-35,-36,-15,21,21,21,-20,-37,]),'LOOP':([4,5,6,7,8,9,10,11,12,13,14,15,20,26,39,43,45,46,47,48,62,63,66,93,99,101,102,105,106,110,111,113,115,116,117,118,119,120,121,123,124,125,127,128,129,],[22,22,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-55,-61,-56,-57,-58,-59,-23,-24,-60,-21,-40,-22,22,-16,22,-17,-30,-19,22,22,22,-18,-34,-35,-36,-15,22,22,22,-20,-37,]),'FUNCTION':([4,5,6,7,8,9,10,11,12,13,14,15,20,26,39,43,45,46,47,48,62,63,66,93,99,101,102,105,106,110,111,113,115,116,117,118,119,120,121,123,124,125,127,128,129,],[23,23,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-55,-61,-56,-57,-58,-59,-23,-24,-60,-21,-40,-22,23,-16,23,-17,-30,-19,23,23,23,-18,-34,-35,-36,-15,23,23,23,-20,-37,]),'LIST':([4,5,6,7,8,9,10,11,12,13,14,15,20,26,39,43,45,46,47,48,62,63,66,93,99,101,102,105,106,110,111,113,115,116,117,118,119,120,121,123,124,125,127,128,129,],[24,24,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-55,-61,-56,-57,-58,-59,-23,-24,-60,-21,-40,-22,24,-16,24,-17,-30,-19,24,24,24,-18,-34,-35,-36,-15,24,24,24,-20,-37,]),'END':([5,6,7,8,9,10,11,12,13,14,15,20,26,39,43,45,46,47,48,62,63,66,93,99,101,105,110,111,113,115,116,118,119,120,121,123,127,128,129,],[25,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-55,-61,-56,-57,-58,-59,-23,-24,-60,-21,-40,-22,-16,-17,-30,-19,120,123,-18,-34,-35,-36,-15,129,-20,-37,]),'ELSE':([6,7,8,9,10,11,12,13,14,15,20,26,39,43,45,46,47,48,62,63,66,93,99,101,105,110,111,113,115,118,119,120,121,123,128,129,],[-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-55,-61,-56,-57,-58,-59,-23,-24,-60,-21,-40,-22,-16,-17,-30,-19,122,-18,-34,-35,-36,-15,-20,-37,]),'RETURN':([6,7,8,9,10,11,12,13,14,15,20,26,39,43,45,46,47,48,62,63,66,93,99,101,105,110,111,113,118,119,120,121,123,124,128,129,],[-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-55,-61,-56,-57,-58,-59,-23,-24,-60,-21,-40,-22,-16,-17,-30,-19,-18,-34,-35,-36,-15,126,-20,-37,]),'ASSIGN':([17,27,30,68,],[28,38,51,100,]),'OPEN_SQ_BRACKET':([17,39,],[29,61,]),'OPEN_BRACKET':([19,21,22,28,29,31,32,33,34,38,39,42,43,45,46,47,48,49,60,61,66,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,94,95,99,100,111,112,113,126,],[31,32,33,49,49,49,49,49,57,49,60,49,-61,-56,-57,-58,-59,49,49,49,-60,49,-41,-42,49,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,49,-62,-40,49,-30,-63,-19,49,]),'NOT':([28,29,31,32,33,38,39,43,45,46,47,48,49,60,61,66,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,94,95,99,100,111,112,113,126,],[42,42,42,42,42,42,-55,-61,-56,-57,-58,-59,42,42,42,-60,42,-41,-42,42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,42,-62,-40,42,-30,-63,-19,42,]),'STRING_EXPR':([28,51,64,65,],[44,44,97,98,]),'NUMBER':([28,29,31,32,33,35,36,37,38,39,42,43,45,46,47,48,49,60,61,66,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,94,95,99,100,111,112,113,126,],[45,45,45,45,45,58,-28,-29,45,-55,45,-61,-56,-57,-58,-59,45,45,45,-60,45,-41,-42,45,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,45,-62,-40,45,-30,-63,-19,45,]),'ENDLINE':([39,40,41,43,44,45,46,47,48,59,66,69,87,92,97,98,99,111,113,114,],[-55,62,63,-61,-27,-56,-57,-58,-59,93,-60,101,105,110,-25,-26,-40,-30,-19,118,]),'CLOSE_SQ_BRACKET':([39,43,45,46,47,48,50,66,96,99,111,113,],[-55,-61,-56,-57,-58,-59,68,-60,113,-40,-30,-19,]),'MULT':([39,43,45,46,47,48,53,54,66,99,103,104,111,113,],[-55,-61,-56,-57,-58,-59,75,-65,-60,-40,75,-64,-30,-19,]),'DIV':([39,43,45,46,47,48,53,54,66,99,103,104,111,113,],[-55,-61,-56,-57,-58,-59,76,-65,-60,-40,76,-64,-30,-19,]),'MOD':([39,43,45,46,47,48,53,54,66,99,103,104,111,113,],[-55,-61,-56,-57,-58,-59,77,-65,-60,-40,77,-64,-30,-19,]),'AND':([39,43,45,46,47,48,53,54,66,99,103,104,111,113,],[-55,-61,-56,-57,-58,-59,78,-65,-60,-40,78,-64,-30,-19,]),'OR':([39,43,45,46,47,48,53,54,66,99,103,104,111,113,],[-55,-61,-56,-57,-58,-59,79,-65,-60,-40,79,-64,-30,-19,]),'XOR':([39,43,45,46,47,48,53,54,66,99,103,104,111,113,],[-55,-61,-56,-57,-58,-59,80,-65,-60,-40,80,-64,-30,-19,]),'LESSER':([39,43,45,46,47,48,53,54,66,99,103,104,111,113,],[-55,-61,-56,-57,-58,-59,81,-65,-60,-40,81,-64,-30,-19,]),'GREATER':([39,43,45,46,47,48,53,54,66,99,103,104,111,113,],[-55,-61,-56,-57,-58,-59,82,-65,-60,-40,82,-64,-30,-19,]),'EQUAL':([39,43,45,46,47,48,53,54,66,99,103,104,111,113,],[-55,-61,-56,-57,-58,-59,83,-65,-60,-40,83,-64,-30,-19,]),'LESSER_EQ':([39,43,45,46,47,48,53,54,66,99,103,104,111,113,],[-55,-61,-56,-57,-58,-59,84,-65,-60,-40,84,-64,-30,-19,]),'GREATER_EQ':([39,43,45,46,47,48,53,54,66,99,103,104,111,113,],[-55,-61,-56,-57,-58,-59,85,-65,-60,-40,85,-64,-30,-19,]),'N_EQUAL':([39,43,45,46,47,48,53,54,66,99,103,104,111,113,],[-55,-61,-56,-57,-58,-59,86,-65,-60,-40,86,-64,-30,-19,]),'CLOSE_BRACKET':([39,43,45,46,47,48,52,53,54,55,56,66,67,89,90,94,95,99,103,104,108,109,111,112,113,],[-55,-61,-56,-57,-58,-59,70,-39,-65,87,88,-60,99,107,-33,111,-62,-40,-38,-64,-32,-31,-30,-63,-19,]),'PLUS':([39,41,43,44,45,46,47,48,52,53,54,55,56,66,67,69,97,98,99,103,104,111,113,],[-55,64,-61,-27,-56,-57,-58,-59,72,-39,-65,72,72,-60,72,64,-25,-26,-40,-38,-64,-30,-19,]),'MINUS':([39,41,43,44,45,46,47,48,52,53,54,55,56,66,67,69,97,98,99,103,104,111,113,],[-55,65,-61,-27,-56,-57,-58,-59,73,-39,-65,73,73,-60,73,65,-25,-26,-40,-38,-64,-30,-19,]),'THEN':([70,122,],[102,125,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program_decl':([0,],[1,]),'block':([2,],[3,]),'lines':([4,102,106,117,125,],[5,115,116,124,127,]),'line':([4,5,102,106,115,116,117,124,125,127,],[6,26,6,6,26,26,6,26,6,26,]),'var_decl':([4,5,102,106,115,116,117,124,125,127,],[7,7,7,7,7,7,7,7,7,7,]),'var_assign':([4,5,102,106,115,116,117,124,125,127,],[8,8,8,8,8,8,8,8,8,8,]),'if_stat':([4,5,102,106,115,116,117,124,125,127,],[9,9,9,9,9,9,9,9,9,9,]),'comment':([4,5,102,106,115,116,117,124,125,127,],[10,10,10,10,10,10,10,10,10,10,]),'print':([4,5,102,106,115,116,117,124,125,127,],[11,11,11,11,11,11,11,11,11,11,]),'loop':([4,5,102,106,115,116,117,124,125,127,],[12,12,12,12,12,12,12,12,12,12,]),'func_decl':([4,5,102,106,115,116,117,124,125,127,],[13,13,13,13,13,13,13,13,13,13,]),'table_decl':([4,5,102,106,115,116,117,124,125,127,],[14,14,14,14,14,14,14,14,14,14,]),'table_assign':([4,5,102,106,115,116,117,124,125,127,],[15,15,15,15,15,15,15,15,15,15,]),'type':([24,57,89,],[35,91,91,]),'factor_n':([28,29,31,32,33,38,49,60,61,71,74,94,100,126,],[40,50,54,54,54,59,54,95,96,54,104,112,114,128,]),'string_opers':([28,51,],[41,69,]),'factor':([28,29,31,32,33,38,42,49,60,61,71,74,94,100,126,],[43,43,43,43,43,43,66,43,43,43,43,43,43,43,43,]),'brac_expr':([28,29,31,32,33,38,42,49,60,61,71,74,94,100,126,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'func_call':([28,29,31,32,33,38,42,49,60,61,71,74,94,100,126,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'table_read':([28,29,31,32,33,38,42,49,60,61,71,74,94,100,126,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'expr':([31,32,33,49,],[52,55,56,67,]),'comp':([31,32,33,49,71,],[53,53,53,53,103,]),'oper_add':([52,55,56,67,],[71,71,71,71,]),'oper_mult':([53,103,],[74,74,]),'args':([57,],[89,]),'arg':([57,89,],[90,108,]),'factors_n':([60,],[94,]),'end_if':([115,],[119,]),'else_stat':([115,],[121,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program_decl","S'",1,None,None,None),
  ('program_decl -> PROGRAM block','program_decl',2,'p_program_decl','parser.py',80),
  ('comment -> COMMENT','comment',1,'p_comment','parser.py',86),
  ('block -> BEGIN lines END','block',3,'p_block','parser.py',91),
  ('lines -> lines line','lines',2,'p_lines','parser.py',253),
  ('lines -> line','lines',1,'p_lines','parser.py',254),
  ('line -> var_decl','line',1,'p_line','parser.py',264),
  ('line -> var_assign','line',1,'p_line','parser.py',265),
  ('line -> if_stat','line',1,'p_line','parser.py',266),
  ('line -> comment','line',1,'p_line','parser.py',267),
  ('line -> print','line',1,'p_line','parser.py',268),
  ('line -> loop','line',1,'p_line','parser.py',269),
  ('line -> func_decl','line',1,'p_line','parser.py',270),
  ('line -> table_decl','line',1,'p_line','parser.py',271),
  ('line -> table_assign','line',1,'p_line','parser.py',272),
  ('loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END','loop',7,'p_loop','parser.py',279),
  ('print -> PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE','print',5,'p_print','parser.py',289),
  ('table_decl -> LIST type NUMBER ID ENDLINE','table_decl',5,'p_table_decl','parser.py',295),
  ('table_assign -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE','table_assign',7,'p_table_assign','parser.py',302),
  ('table_read -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET','table_read',4,'p_table_read','parser.py',309),
  ('func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n','func_decl',9,'p_func_decl','parser.py',315),
  ('var_decl -> INT ID ASSIGN factor_n ENDLINE','var_decl',5,'p_var_decl','parser.py',328),
  ('var_decl -> STRING ID ASSIGN string_opers ENDLINE','var_decl',5,'p_var_decl','parser.py',329),
  ('var_assign -> ID ASSIGN factor_n ENDLINE','var_assign',4,'p_var_assign','parser.py',336),
  ('var_assign -> ID ASSIGN string_opers ENDLINE','var_assign',4,'p_var_assign','parser.py',337),
  ('string_opers -> string_opers PLUS STRING_EXPR','string_opers',3,'p_string_opers','parser.py',344),
  ('string_opers -> string_opers MINUS STRING_EXPR','string_opers',3,'p_string_opers','parser.py',345),
  ('string_opers -> STRING_EXPR','string_opers',1,'p_string_opers','parser.py',346),
  ('type -> INT','type',1,'p_type','parser.py',355),
  ('type -> STRING','type',1,'p_type','parser.py',356),
  ('func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET','func_call',4,'p_func_call','parser.py',364),
  ('arg -> type ID','arg',2,'p_arg','parser.py',374),
  ('args -> args arg','args',2,'p_args','parser.py',382),
  ('args -> arg','args',1,'p_args','parser.py',383),
  ('if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if','if_stat',7,'p_if_stat','parser.py',394),
  ('end_if -> END','end_if',1,'p_end_if','parser.py',401),
  ('end_if -> else_stat','end_if',1,'p_end_if','parser.py',402),
  ('else_stat -> ELSE THEN lines END','else_stat',4,'p_else_stat','parser.py',410),
  ('expr -> expr oper_add comp','expr',3,'p_expr','parser.py',417),
  ('expr -> comp','expr',1,'p_expr','parser.py',418),
  ('brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET','brac_expr',3,'p_brac_expr','parser.py',428),
  ('oper_add -> PLUS','oper_add',1,'p_oper_add','parser.py',435),
  ('oper_add -> MINUS','oper_add',1,'p_oper_add','parser.py',436),
  ('oper_mult -> MULT','oper_mult',1,'p_oper_mult','parser.py',443),
  ('oper_mult -> DIV','oper_mult',1,'p_oper_mult','parser.py',444),
  ('oper_mult -> MOD','oper_mult',1,'p_oper_mult','parser.py',445),
  ('oper_mult -> AND','oper_mult',1,'p_oper_mult','parser.py',446),
  ('oper_mult -> OR','oper_mult',1,'p_oper_mult','parser.py',447),
  ('oper_mult -> XOR','oper_mult',1,'p_oper_mult','parser.py',448),
  ('oper_mult -> LESSER','oper_mult',1,'p_oper_mult','parser.py',449),
  ('oper_mult -> GREATER','oper_mult',1,'p_oper_mult','parser.py',450),
  ('oper_mult -> EQUAL','oper_mult',1,'p_oper_mult','parser.py',451),
  ('oper_mult -> LESSER_EQ','oper_mult',1,'p_oper_mult','parser.py',452),
  ('oper_mult -> GREATER_EQ','oper_mult',1,'p_oper_mult','parser.py',453),
  ('oper_mult -> N_EQUAL','oper_mult',1,'p_oper_mult','parser.py',454),
  ('factor -> ID','factor',1,'p_factor','parser.py',461),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',462),
  ('factor -> brac_expr','factor',1,'p_factor','parser.py',463),
  ('factor -> func_call','factor',1,'p_factor','parser.py',464),
  ('factor -> table_read','factor',1,'p_factor','parser.py',465),
  ('factor_n -> NOT factor','factor_n',2,'p_factor_n','parser.py',472),
  ('factor_n -> factor','factor_n',1,'p_factor_n','parser.py',473),
  ('factors_n -> factor_n','factors_n',1,'p_factors_n','parser.py',483),
  ('factors_n -> factors_n factor_n','factors_n',2,'p_factors_n','parser.py',484),
  ('comp -> comp oper_mult factor_n','comp',3,'p_comp','parser.py',494),
  ('comp -> factor_n','comp',1,'p_comp','parser.py',495),
]
