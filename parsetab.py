
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BEGIN CLOSE_BRACKET CLOSE_CURL_BRACKET CLOSE_SQ_BRACKET COMMENT DIV ELSE END ENDLINE EQUAL FUNCTION GREATER GREATER_EQ ID IF INT LESSER LESSER_EQ LIST LOOP MINUS MOD MULT NOT NULL NUMBER N_EQUAL OPEN_BRACKET OPEN_CURL_BRACKET OPEN_SQ_BRACKET OR PLUS PRINT PROGRAM RETURN STRING STRING_EXPR THEN XOR\n        program_decl : PROGRAM block\n        \n        comment : COMMENT\n        \n        block : BEGIN lines END\n        \n        lines : lines line\n                | line\n        \n        line : var_decl\n                | var_assign\n                | if_stat\n                | comment\n                | print\n                | loop\n                | func_decl\n                | table_decl\n        \n        loop : LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END\n        \n        print : PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE\n        \n        table_decl : LIST ID NUMBER ENDLINE\n        \n        func_decl : FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n\n        \n        var_decl : INT ID ASSIGN factor_n ENDLINE\n                | STRING ID ASSIGN STRING_EXPR ENDLINE\n        \n        var_assign : ID ASSIGN factor_n ENDLINE\n                    | ID ASSIGN STRING_EXPR ENDLINE\n        \n        type : INT\n               | STRING\n        \n        func_call : ID OPEN_BRACKET factors_n CLOSE_BRACKET\n        \n        arg : type ID\n        \n        args : args arg\n               | arg\n        \n        if_stat : IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if\n        \n        end_if : END\n                 | else_stat\n        \n        else_stat : ELSE THEN lines END\n        \n        expr : expr oper_add comp\n               | comp\n        \n        brac_expr : OPEN_BRACKET expr CLOSE_BRACKET\n        \n        oper_add : PLUS\n                   | MINUS\n        \n        oper_mult : MULT\n                    | DIV\n                    | MOD\n                    | AND\n                    | OR\n                    | XOR\n                    | LESSER\n                    | GREATER\n                    | EQUAL\n                    | LESSER_EQ\n                    | GREATER_EQ\n                    | N_EQUAL\n        \n        factor : ID\n                 | NUMBER\n                 | brac_expr\n                 | func_call\n        \n        factor_n : NOT factor\n                    | factor\n        \n        factors_n : factor_n\n                | factors_n factor_n\n        \n        comp : comp oper_mult factor_n\n               | factor_n\n        '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,3,24,],[0,-1,-3,]),'BEGIN':([2,77,94,],[4,93,101,]),'INT':([4,5,6,7,8,9,10,11,12,13,14,19,25,35,39,40,41,42,50,54,55,56,78,79,83,84,87,88,89,92,93,95,96,97,99,100,101,102,103,104,106,107,108,110,111,112,],[15,15,-5,-6,-7,-8,-9,-10,-11,-12,-13,-2,-4,-49,-54,-50,-51,-52,81,-20,-21,-53,81,-27,-16,-18,-34,-19,15,-15,15,-26,-25,-24,15,15,15,-28,-29,-30,-14,15,15,15,-17,-31,]),'STRING':([4,5,6,7,8,9,10,11,12,13,14,19,25,35,39,40,41,42,50,54,55,56,78,79,83,84,87,88,89,92,93,95,96,97,99,100,101,102,103,104,106,107,108,110,111,112,],[17,17,-5,-6,-7,-8,-9,-10,-11,-12,-13,-2,-4,-49,-54,-50,-51,-52,82,-20,-21,-53,82,-27,-16,-18,-34,-19,17,-15,17,-26,-25,-24,17,17,17,-28,-29,-30,-14,17,17,17,-17,-31,]),'ID':([4,5,6,7,8,9,10,11,12,13,14,15,17,19,22,23,25,27,29,30,31,34,35,38,39,40,41,42,43,53,54,55,56,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,92,93,97,98,99,100,101,102,103,104,106,107,108,109,110,111,112,],[16,16,-5,-6,-7,-8,-9,-10,-11,-12,-13,26,28,-2,32,33,-4,35,35,35,35,35,-49,35,-54,-50,-51,-52,35,35,-20,-21,-53,35,-35,-36,35,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,96,-22,-23,-16,-18,35,-55,-34,-19,16,-15,16,-24,-56,16,16,16,-28,-29,-30,-14,16,16,35,16,-17,-31,]),'IF':([4,5,6,7,8,9,10,11,12,13,14,19,25,35,39,40,41,42,54,55,56,83,84,87,88,89,92,93,97,99,100,101,102,103,104,106,107,108,110,111,112,],[18,18,-5,-6,-7,-8,-9,-10,-11,-12,-13,-2,-4,-49,-54,-50,-51,-52,-20,-21,-53,-16,-18,-34,-19,18,-15,18,-24,18,18,18,-28,-29,-30,-14,18,18,18,-17,-31,]),'COMMENT':([4,5,6,7,8,9,10,11,12,13,14,19,25,35,39,40,41,42,54,55,56,83,84,87,88,89,92,93,97,99,100,101,102,103,104,106,107,108,110,111,112,],[19,19,-5,-6,-7,-8,-9,-10,-11,-12,-13,-2,-4,-49,-54,-50,-51,-52,-20,-21,-53,-16,-18,-34,-19,19,-15,19,-24,19,19,19,-28,-29,-30,-14,19,19,19,-17,-31,]),'PRINT':([4,5,6,7,8,9,10,11,12,13,14,19,25,35,39,40,41,42,54,55,56,83,84,87,88,89,92,93,97,99,100,101,102,103,104,106,107,108,110,111,112,],[20,20,-5,-6,-7,-8,-9,-10,-11,-12,-13,-2,-4,-49,-54,-50,-51,-52,-20,-21,-53,-16,-18,-34,-19,20,-15,20,-24,20,20,20,-28,-29,-30,-14,20,20,20,-17,-31,]),'LOOP':([4,5,6,7,8,9,10,11,12,13,14,19,25,35,39,40,41,42,54,55,56,83,84,87,88,89,92,93,97,99,100,101,102,103,104,106,107,108,110,111,112,],[21,21,-5,-6,-7,-8,-9,-10,-11,-12,-13,-2,-4,-49,-54,-50,-51,-52,-20,-21,-53,-16,-18,-34,-19,21,-15,21,-24,21,21,21,-28,-29,-30,-14,21,21,21,-17,-31,]),'FUNCTION':([4,5,6,7,8,9,10,11,12,13,14,19,25,35,39,40,41,42,54,55,56,83,84,87,88,89,92,93,97,99,100,101,102,103,104,106,107,108,110,111,112,],[22,22,-5,-6,-7,-8,-9,-10,-11,-12,-13,-2,-4,-49,-54,-50,-51,-52,-20,-21,-53,-16,-18,-34,-19,22,-15,22,-24,22,22,22,-28,-29,-30,-14,22,22,22,-17,-31,]),'LIST':([4,5,6,7,8,9,10,11,12,13,14,19,25,35,39,40,41,42,54,55,56,83,84,87,88,89,92,93,97,99,100,101,102,103,104,106,107,108,110,111,112,],[23,23,-5,-6,-7,-8,-9,-10,-11,-12,-13,-2,-4,-49,-54,-50,-51,-52,-20,-21,-53,-16,-18,-34,-19,23,-15,23,-24,23,23,23,-28,-29,-30,-14,23,23,23,-17,-31,]),'END':([5,6,7,8,9,10,11,12,13,14,19,25,35,39,40,41,42,54,55,56,83,84,87,88,92,97,99,100,102,103,104,106,110,111,112,],[24,-5,-6,-7,-8,-9,-10,-11,-12,-13,-2,-4,-49,-54,-50,-51,-52,-20,-21,-53,-16,-18,-34,-19,-15,-24,103,106,-28,-29,-30,-14,112,-17,-31,]),'ELSE':([6,7,8,9,10,11,12,13,14,19,25,35,39,40,41,42,54,55,56,83,84,87,88,92,97,99,102,103,104,106,111,112,],[-5,-6,-7,-8,-9,-10,-11,-12,-13,-2,-4,-49,-54,-50,-51,-52,-20,-21,-53,-16,-18,-34,-19,-15,-24,105,-28,-29,-30,-14,-17,-31,]),'RETURN':([6,7,8,9,10,11,12,13,14,19,25,35,39,40,41,42,54,55,56,83,84,87,88,92,97,102,103,104,106,107,111,112,],[-5,-6,-7,-8,-9,-10,-11,-12,-13,-2,-4,-49,-54,-50,-51,-52,-20,-21,-53,-16,-18,-34,-19,-15,-24,-28,-29,-30,-14,109,-17,-31,]),'ASSIGN':([16,26,28,],[27,34,44,]),'OPEN_BRACKET':([18,20,21,27,29,30,31,32,34,35,38,39,40,41,42,43,53,56,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,85,86,87,97,98,109,],[29,30,31,43,43,43,43,50,43,53,43,-54,-50,-51,-52,43,43,-53,43,-35,-36,43,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,43,-55,-34,-24,-56,43,]),'STRING_EXPR':([27,44,],[37,58,]),'NOT':([27,29,30,31,34,35,39,40,41,42,43,53,56,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,85,86,87,97,98,109,],[38,38,38,38,38,-49,-54,-50,-51,-52,38,38,-53,38,-35,-36,38,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,38,-55,-34,-24,-56,38,]),'NUMBER':([27,29,30,31,33,34,35,38,39,40,41,42,43,53,56,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,85,86,87,97,98,109,],[40,40,40,40,51,40,-49,40,-54,-50,-51,-52,40,40,-53,40,-35,-36,40,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,40,-55,-34,-24,-56,40,]),'ENDLINE':([35,36,37,39,40,41,42,51,52,56,58,76,87,97,],[-49,54,55,-54,-50,-51,-52,83,84,-53,88,92,-34,-24,]),'MULT':([35,39,40,41,42,46,47,56,87,90,91,97,],[-49,-54,-50,-51,-52,64,-58,-53,-34,64,-57,-24,]),'DIV':([35,39,40,41,42,46,47,56,87,90,91,97,],[-49,-54,-50,-51,-52,65,-58,-53,-34,65,-57,-24,]),'MOD':([35,39,40,41,42,46,47,56,87,90,91,97,],[-49,-54,-50,-51,-52,66,-58,-53,-34,66,-57,-24,]),'AND':([35,39,40,41,42,46,47,56,87,90,91,97,],[-49,-54,-50,-51,-52,67,-58,-53,-34,67,-57,-24,]),'OR':([35,39,40,41,42,46,47,56,87,90,91,97,],[-49,-54,-50,-51,-52,68,-58,-53,-34,68,-57,-24,]),'XOR':([35,39,40,41,42,46,47,56,87,90,91,97,],[-49,-54,-50,-51,-52,69,-58,-53,-34,69,-57,-24,]),'LESSER':([35,39,40,41,42,46,47,56,87,90,91,97,],[-49,-54,-50,-51,-52,70,-58,-53,-34,70,-57,-24,]),'GREATER':([35,39,40,41,42,46,47,56,87,90,91,97,],[-49,-54,-50,-51,-52,71,-58,-53,-34,71,-57,-24,]),'EQUAL':([35,39,40,41,42,46,47,56,87,90,91,97,],[-49,-54,-50,-51,-52,72,-58,-53,-34,72,-57,-24,]),'LESSER_EQ':([35,39,40,41,42,46,47,56,87,90,91,97,],[-49,-54,-50,-51,-52,73,-58,-53,-34,73,-57,-24,]),'GREATER_EQ':([35,39,40,41,42,46,47,56,87,90,91,97,],[-49,-54,-50,-51,-52,74,-58,-53,-34,74,-57,-24,]),'N_EQUAL':([35,39,40,41,42,46,47,56,87,90,91,97,],[-49,-54,-50,-51,-52,75,-58,-53,-34,75,-57,-24,]),'CLOSE_BRACKET':([35,39,40,41,42,45,46,47,48,49,56,57,78,79,85,86,87,90,91,95,96,97,98,],[-49,-54,-50,-51,-52,59,-33,-58,76,77,-53,87,94,-27,97,-55,-34,-32,-57,-26,-25,-24,-56,]),'PLUS':([35,39,40,41,42,45,46,47,48,49,56,57,87,90,91,97,],[-49,-54,-50,-51,-52,61,-33,-58,61,61,-53,61,-34,-32,-57,-24,]),'MINUS':([35,39,40,41,42,45,46,47,48,49,56,57,87,90,91,97,],[-49,-54,-50,-51,-52,62,-33,-58,62,62,-53,62,-34,-32,-57,-24,]),'THEN':([59,105,],[89,108,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program_decl':([0,],[1,]),'block':([2,],[3,]),'lines':([4,89,93,101,108,],[5,99,100,107,110,]),'line':([4,5,89,93,99,100,101,107,108,110,],[6,25,6,6,25,25,6,25,6,25,]),'var_decl':([4,5,89,93,99,100,101,107,108,110,],[7,7,7,7,7,7,7,7,7,7,]),'var_assign':([4,5,89,93,99,100,101,107,108,110,],[8,8,8,8,8,8,8,8,8,8,]),'if_stat':([4,5,89,93,99,100,101,107,108,110,],[9,9,9,9,9,9,9,9,9,9,]),'comment':([4,5,89,93,99,100,101,107,108,110,],[10,10,10,10,10,10,10,10,10,10,]),'print':([4,5,89,93,99,100,101,107,108,110,],[11,11,11,11,11,11,11,11,11,11,]),'loop':([4,5,89,93,99,100,101,107,108,110,],[12,12,12,12,12,12,12,12,12,12,]),'func_decl':([4,5,89,93,99,100,101,107,108,110,],[13,13,13,13,13,13,13,13,13,13,]),'table_decl':([4,5,89,93,99,100,101,107,108,110,],[14,14,14,14,14,14,14,14,14,14,]),'factor_n':([27,29,30,31,34,43,53,60,63,85,109,],[36,47,47,47,52,47,86,47,91,98,111,]),'factor':([27,29,30,31,34,38,43,53,60,63,85,109,],[39,39,39,39,39,56,39,39,39,39,39,39,]),'brac_expr':([27,29,30,31,34,38,43,53,60,63,85,109,],[41,41,41,41,41,41,41,41,41,41,41,41,]),'func_call':([27,29,30,31,34,38,43,53,60,63,85,109,],[42,42,42,42,42,42,42,42,42,42,42,42,]),'expr':([29,30,31,43,],[45,48,49,57,]),'comp':([29,30,31,43,60,],[46,46,46,46,90,]),'oper_add':([45,48,49,57,],[60,60,60,60,]),'oper_mult':([46,90,],[63,63,]),'args':([50,],[78,]),'arg':([50,78,],[79,95,]),'type':([50,78,],[80,80,]),'factors_n':([53,],[85,]),'end_if':([99,],[102,]),'else_stat':([99,],[104,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program_decl","S'",1,None,None,None),
  ('program_decl -> PROGRAM block','program_decl',2,'p_program_decl','parser.py',75),
  ('comment -> COMMENT','comment',1,'p_comment','parser.py',81),
  ('block -> BEGIN lines END','block',3,'p_block','parser.py',86),
  ('lines -> lines line','lines',2,'p_lines','parser.py',195),
  ('lines -> line','lines',1,'p_lines','parser.py',196),
  ('line -> var_decl','line',1,'p_line','parser.py',206),
  ('line -> var_assign','line',1,'p_line','parser.py',207),
  ('line -> if_stat','line',1,'p_line','parser.py',208),
  ('line -> comment','line',1,'p_line','parser.py',209),
  ('line -> print','line',1,'p_line','parser.py',210),
  ('line -> loop','line',1,'p_line','parser.py',211),
  ('line -> func_decl','line',1,'p_line','parser.py',212),
  ('line -> table_decl','line',1,'p_line','parser.py',213),
  ('loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END','loop',7,'p_loop','parser.py',220),
  ('print -> PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE','print',5,'p_print','parser.py',230),
  ('table_decl -> LIST ID NUMBER ENDLINE','table_decl',4,'p_table_decl','parser.py',236),
  ('func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n','func_decl',9,'p_func_decl','parser.py',241),
  ('var_decl -> INT ID ASSIGN factor_n ENDLINE','var_decl',5,'p_var_decl','parser.py',254),
  ('var_decl -> STRING ID ASSIGN STRING_EXPR ENDLINE','var_decl',5,'p_var_decl','parser.py',255),
  ('var_assign -> ID ASSIGN factor_n ENDLINE','var_assign',4,'p_var_assign','parser.py',262),
  ('var_assign -> ID ASSIGN STRING_EXPR ENDLINE','var_assign',4,'p_var_assign','parser.py',263),
  ('type -> INT','type',1,'p_type','parser.py',270),
  ('type -> STRING','type',1,'p_type','parser.py',271),
  ('func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET','func_call',4,'p_func_call','parser.py',279),
  ('arg -> type ID','arg',2,'p_arg','parser.py',289),
  ('args -> args arg','args',2,'p_args','parser.py',297),
  ('args -> arg','args',1,'p_args','parser.py',298),
  ('if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if','if_stat',7,'p_if_stat','parser.py',309),
  ('end_if -> END','end_if',1,'p_end_if','parser.py',316),
  ('end_if -> else_stat','end_if',1,'p_end_if','parser.py',317),
  ('else_stat -> ELSE THEN lines END','else_stat',4,'p_else_stat','parser.py',325),
  ('expr -> expr oper_add comp','expr',3,'p_expr','parser.py',332),
  ('expr -> comp','expr',1,'p_expr','parser.py',333),
  ('brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET','brac_expr',3,'p_brac_expr','parser.py',343),
  ('oper_add -> PLUS','oper_add',1,'p_oper_add','parser.py',350),
  ('oper_add -> MINUS','oper_add',1,'p_oper_add','parser.py',351),
  ('oper_mult -> MULT','oper_mult',1,'p_oper_mult','parser.py',358),
  ('oper_mult -> DIV','oper_mult',1,'p_oper_mult','parser.py',359),
  ('oper_mult -> MOD','oper_mult',1,'p_oper_mult','parser.py',360),
  ('oper_mult -> AND','oper_mult',1,'p_oper_mult','parser.py',361),
  ('oper_mult -> OR','oper_mult',1,'p_oper_mult','parser.py',362),
  ('oper_mult -> XOR','oper_mult',1,'p_oper_mult','parser.py',363),
  ('oper_mult -> LESSER','oper_mult',1,'p_oper_mult','parser.py',364),
  ('oper_mult -> GREATER','oper_mult',1,'p_oper_mult','parser.py',365),
  ('oper_mult -> EQUAL','oper_mult',1,'p_oper_mult','parser.py',366),
  ('oper_mult -> LESSER_EQ','oper_mult',1,'p_oper_mult','parser.py',367),
  ('oper_mult -> GREATER_EQ','oper_mult',1,'p_oper_mult','parser.py',368),
  ('oper_mult -> N_EQUAL','oper_mult',1,'p_oper_mult','parser.py',369),
  ('factor -> ID','factor',1,'p_factor','parser.py',376),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',377),
  ('factor -> brac_expr','factor',1,'p_factor','parser.py',378),
  ('factor -> func_call','factor',1,'p_factor','parser.py',379),
  ('factor_n -> NOT factor','factor_n',2,'p_factor_n','parser.py',386),
  ('factor_n -> factor','factor_n',1,'p_factor_n','parser.py',387),
  ('factors_n -> factor_n','factors_n',1,'p_factors_n','parser.py',397),
  ('factors_n -> factors_n factor_n','factors_n',2,'p_factors_n','parser.py',398),
  ('comp -> comp oper_mult factor_n','comp',3,'p_comp','parser.py',408),
  ('comp -> factor_n','comp',1,'p_comp','parser.py',409),
]
