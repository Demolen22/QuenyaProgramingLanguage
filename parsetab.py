
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BEGIN CLOSE_BRACKET CLOSE_CURL_BRACKET CLOSE_SQ_BRACKET COMMENT DIV ELSE END ENDLINE EQUAL FUNCTION GREATER GREATER_EQ ID IF INT ITERABLE_LOOP LESSER LESSER_EQ LIST LOOP MINUS MOD MULT NOT NULL NUMBER N_EQUAL OPEN_BRACKET OPEN_CURL_BRACKET OPEN_SQ_BRACKET OR PLUS PRINT PROGRAM RETURN STRING STRING_EXPR THEN XOR\n        program_decl : PROGRAM block\n        \n        comment : COMMENT\n        \n        block : BEGIN lines END\n        \n        lines : lines line\n                | line\n        \n        line : var_decl\n                | var_assign\n                | if_stat\n                | comment\n                | print\n                | loop\n                | func_decl\n        \n        loop : LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END\n        \n        print : PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE\n        \n        func_decl : FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n\n        \n        var_decl : type ID ASSIGN factor_n ENDLINE\n        \n        var_assign : ID ASSIGN factor_n ENDLINE\n        \n        type : INT\n               | STRING\n        \n        func_call : ID OPEN_BRACKET factors_n CLOSE_BRACKET\n        \n        arg : type ID\n        \n        args : args arg\n               | arg\n        \n        if_stat : IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if\n        \n        end_if : END\n                 | else_stat\n        \n        else_stat : ELSE THEN lines END\n        \n        expr : expr oper_add comp\n               | comp\n        \n        brac_expr : OPEN_BRACKET expr CLOSE_BRACKET\n        \n        oper_add : PLUS\n                   | MINUS\n        \n        oper_mult : MULT\n                    | DIV\n                    | MOD\n                    | AND\n                    | OR\n                    | XOR\n                    | LESSER\n                    | GREATER\n                    | EQUAL\n                    | LESSER_EQ\n                    | GREATER_EQ\n                    | N_EQUAL\n        \n        factor : ID\n                 | NUMBER\n                 | brac_expr\n                 | func_call\n        \n        factor_n : NOT factor\n                    | factor\n        \n        factors_n : factor_n\n                | factors_n factor_n\n        \n        comp : comp oper_mult factor_n\n               | factor_n\n        '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,3,23,],[0,-1,-3,]),'BEGIN':([2,69,82,],[4,81,89,]),'ID':([4,5,6,7,8,9,10,11,12,13,14,17,20,21,22,24,26,27,28,29,31,32,34,35,36,37,38,39,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,72,73,74,75,76,77,80,81,85,86,87,88,89,90,91,92,94,95,96,97,98,99,100,],[15,15,-5,-6,-7,-8,-9,-10,-11,-12,25,-2,30,-18,-19,-4,32,32,32,32,32,-45,32,-50,-46,-47,-48,32,32,-17,-49,32,-31,-32,32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,84,-16,32,-51,-30,15,-14,15,-20,-52,15,15,15,-24,-25,-26,-13,15,15,32,15,-15,-27,]),'IF':([4,5,6,7,8,9,10,11,12,13,17,24,32,35,36,37,38,48,49,73,76,77,80,81,85,87,88,89,90,91,92,94,95,96,98,99,100,],[16,16,-5,-6,-7,-8,-9,-10,-11,-12,-2,-4,-45,-50,-46,-47,-48,-17,-49,-16,-30,16,-14,16,-20,16,16,16,-24,-25,-26,-13,16,16,16,-15,-27,]),'COMMENT':([4,5,6,7,8,9,10,11,12,13,17,24,32,35,36,37,38,48,49,73,76,77,80,81,85,87,88,89,90,91,92,94,95,96,98,99,100,],[17,17,-5,-6,-7,-8,-9,-10,-11,-12,-2,-4,-45,-50,-46,-47,-48,-17,-49,-16,-30,17,-14,17,-20,17,17,17,-24,-25,-26,-13,17,17,17,-15,-27,]),'PRINT':([4,5,6,7,8,9,10,11,12,13,17,24,32,35,36,37,38,48,49,73,76,77,80,81,85,87,88,89,90,91,92,94,95,96,98,99,100,],[18,18,-5,-6,-7,-8,-9,-10,-11,-12,-2,-4,-45,-50,-46,-47,-48,-17,-49,-16,-30,18,-14,18,-20,18,18,18,-24,-25,-26,-13,18,18,18,-15,-27,]),'LOOP':([4,5,6,7,8,9,10,11,12,13,17,24,32,35,36,37,38,48,49,73,76,77,80,81,85,87,88,89,90,91,92,94,95,96,98,99,100,],[19,19,-5,-6,-7,-8,-9,-10,-11,-12,-2,-4,-45,-50,-46,-47,-48,-17,-49,-16,-30,19,-14,19,-20,19,19,19,-24,-25,-26,-13,19,19,19,-15,-27,]),'FUNCTION':([4,5,6,7,8,9,10,11,12,13,17,24,32,35,36,37,38,48,49,73,76,77,80,81,85,87,88,89,90,91,92,94,95,96,98,99,100,],[20,20,-5,-6,-7,-8,-9,-10,-11,-12,-2,-4,-45,-50,-46,-47,-48,-17,-49,-16,-30,20,-14,20,-20,20,20,20,-24,-25,-26,-13,20,20,20,-15,-27,]),'INT':([4,5,6,7,8,9,10,11,12,13,17,24,32,35,36,37,38,45,48,49,70,71,73,76,77,80,81,83,84,85,87,88,89,90,91,92,94,95,96,98,99,100,],[21,21,-5,-6,-7,-8,-9,-10,-11,-12,-2,-4,-45,-50,-46,-47,-48,21,-17,-49,21,-23,-16,-30,21,-14,21,-22,-21,-20,21,21,21,-24,-25,-26,-13,21,21,21,-15,-27,]),'STRING':([4,5,6,7,8,9,10,11,12,13,17,24,32,35,36,37,38,45,48,49,70,71,73,76,77,80,81,83,84,85,87,88,89,90,91,92,94,95,96,98,99,100,],[22,22,-5,-6,-7,-8,-9,-10,-11,-12,-2,-4,-45,-50,-46,-47,-48,22,-17,-49,22,-23,-16,-30,22,-14,22,-22,-21,-20,22,22,22,-24,-25,-26,-13,22,22,22,-15,-27,]),'END':([5,6,7,8,9,10,11,12,13,17,24,32,35,36,37,38,48,49,73,76,80,85,87,88,90,91,92,94,98,99,100,],[23,-5,-6,-7,-8,-9,-10,-11,-12,-2,-4,-45,-50,-46,-47,-48,-17,-49,-16,-30,-14,-20,91,94,-24,-25,-26,-13,100,-15,-27,]),'ELSE':([6,7,8,9,10,11,12,13,17,24,32,35,36,37,38,48,49,73,76,80,85,87,90,91,92,94,99,100,],[-5,-6,-7,-8,-9,-10,-11,-12,-2,-4,-45,-50,-46,-47,-48,-17,-49,-16,-30,-14,-20,93,-24,-25,-26,-13,-15,-27,]),'RETURN':([6,7,8,9,10,11,12,13,17,24,32,35,36,37,38,48,49,73,76,80,85,90,91,92,94,95,99,100,],[-5,-6,-7,-8,-9,-10,-11,-12,-2,-4,-45,-50,-46,-47,-48,-17,-49,-16,-30,-14,-20,-24,-25,-26,-13,97,-15,-27,]),'ASSIGN':([15,25,],[26,31,]),'OPEN_BRACKET':([16,18,19,26,27,28,29,30,31,32,34,35,36,37,38,39,47,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,74,75,76,85,86,97,],[27,28,29,39,39,39,39,45,39,47,39,-50,-46,-47,-48,39,39,-49,39,-31,-32,39,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,39,-51,-30,-20,-52,39,]),'NOT':([26,27,28,29,31,32,35,36,37,38,39,47,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,74,75,76,85,86,97,],[34,34,34,34,34,-45,-50,-46,-47,-48,34,34,-49,34,-31,-32,34,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,34,-51,-30,-20,-52,34,]),'NUMBER':([26,27,28,29,31,32,34,35,36,37,38,39,47,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,74,75,76,85,86,97,],[36,36,36,36,36,-45,36,-50,-46,-47,-48,36,36,-49,36,-31,-32,36,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,36,-51,-30,-20,-52,36,]),'ENDLINE':([32,33,35,36,37,38,46,49,68,76,85,],[-45,48,-50,-46,-47,-48,73,-49,80,-30,-20,]),'MULT':([32,35,36,37,38,41,42,49,76,78,79,85,],[-45,-50,-46,-47,-48,56,-54,-49,-30,56,-53,-20,]),'DIV':([32,35,36,37,38,41,42,49,76,78,79,85,],[-45,-50,-46,-47,-48,57,-54,-49,-30,57,-53,-20,]),'MOD':([32,35,36,37,38,41,42,49,76,78,79,85,],[-45,-50,-46,-47,-48,58,-54,-49,-30,58,-53,-20,]),'AND':([32,35,36,37,38,41,42,49,76,78,79,85,],[-45,-50,-46,-47,-48,59,-54,-49,-30,59,-53,-20,]),'OR':([32,35,36,37,38,41,42,49,76,78,79,85,],[-45,-50,-46,-47,-48,60,-54,-49,-30,60,-53,-20,]),'XOR':([32,35,36,37,38,41,42,49,76,78,79,85,],[-45,-50,-46,-47,-48,61,-54,-49,-30,61,-53,-20,]),'LESSER':([32,35,36,37,38,41,42,49,76,78,79,85,],[-45,-50,-46,-47,-48,62,-54,-49,-30,62,-53,-20,]),'GREATER':([32,35,36,37,38,41,42,49,76,78,79,85,],[-45,-50,-46,-47,-48,63,-54,-49,-30,63,-53,-20,]),'EQUAL':([32,35,36,37,38,41,42,49,76,78,79,85,],[-45,-50,-46,-47,-48,64,-54,-49,-30,64,-53,-20,]),'LESSER_EQ':([32,35,36,37,38,41,42,49,76,78,79,85,],[-45,-50,-46,-47,-48,65,-54,-49,-30,65,-53,-20,]),'GREATER_EQ':([32,35,36,37,38,41,42,49,76,78,79,85,],[-45,-50,-46,-47,-48,66,-54,-49,-30,66,-53,-20,]),'N_EQUAL':([32,35,36,37,38,41,42,49,76,78,79,85,],[-45,-50,-46,-47,-48,67,-54,-49,-30,67,-53,-20,]),'CLOSE_BRACKET':([32,35,36,37,38,40,41,42,43,44,49,50,70,71,74,75,76,78,79,83,84,85,86,],[-45,-50,-46,-47,-48,51,-29,-54,68,69,-49,76,82,-23,85,-51,-30,-28,-53,-22,-21,-20,-52,]),'PLUS':([32,35,36,37,38,40,41,42,43,44,49,50,76,78,79,85,],[-45,-50,-46,-47,-48,53,-29,-54,53,53,-49,53,-30,-28,-53,-20,]),'MINUS':([32,35,36,37,38,40,41,42,43,44,49,50,76,78,79,85,],[-45,-50,-46,-47,-48,54,-29,-54,54,54,-49,54,-30,-28,-53,-20,]),'THEN':([51,93,],[77,96,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program_decl':([0,],[1,]),'block':([2,],[3,]),'lines':([4,77,81,89,96,],[5,87,88,95,98,]),'line':([4,5,77,81,87,88,89,95,96,98,],[6,24,6,6,24,24,6,24,6,24,]),'var_decl':([4,5,77,81,87,88,89,95,96,98,],[7,7,7,7,7,7,7,7,7,7,]),'var_assign':([4,5,77,81,87,88,89,95,96,98,],[8,8,8,8,8,8,8,8,8,8,]),'if_stat':([4,5,77,81,87,88,89,95,96,98,],[9,9,9,9,9,9,9,9,9,9,]),'comment':([4,5,77,81,87,88,89,95,96,98,],[10,10,10,10,10,10,10,10,10,10,]),'print':([4,5,77,81,87,88,89,95,96,98,],[11,11,11,11,11,11,11,11,11,11,]),'loop':([4,5,77,81,87,88,89,95,96,98,],[12,12,12,12,12,12,12,12,12,12,]),'func_decl':([4,5,77,81,87,88,89,95,96,98,],[13,13,13,13,13,13,13,13,13,13,]),'type':([4,5,45,70,77,81,87,88,89,95,96,98,],[14,14,72,72,14,14,14,14,14,14,14,14,]),'factor_n':([26,27,28,29,31,39,47,52,55,74,97,],[33,42,42,42,46,42,75,42,79,86,99,]),'factor':([26,27,28,29,31,34,39,47,52,55,74,97,],[35,35,35,35,35,49,35,35,35,35,35,35,]),'brac_expr':([26,27,28,29,31,34,39,47,52,55,74,97,],[37,37,37,37,37,37,37,37,37,37,37,37,]),'func_call':([26,27,28,29,31,34,39,47,52,55,74,97,],[38,38,38,38,38,38,38,38,38,38,38,38,]),'expr':([27,28,29,39,],[40,43,44,50,]),'comp':([27,28,29,39,52,],[41,41,41,41,78,]),'oper_add':([40,43,44,50,],[52,52,52,52,]),'oper_mult':([41,78,],[55,55,]),'args':([45,],[70,]),'arg':([45,70,],[71,83,]),'factors_n':([47,],[74,]),'end_if':([87,],[90,]),'else_stat':([87,],[92,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program_decl","S'",1,None,None,None),
  ('program_decl -> PROGRAM block','program_decl',2,'p_program_decl','parser.py',54),
  ('comment -> COMMENT','comment',1,'p_comment','parser.py',60),
  ('block -> BEGIN lines END','block',3,'p_block','parser.py',65),
  ('lines -> lines line','lines',2,'p_lines','parser.py',118),
  ('lines -> line','lines',1,'p_lines','parser.py',119),
  ('line -> var_decl','line',1,'p_line','parser.py',130),
  ('line -> var_assign','line',1,'p_line','parser.py',131),
  ('line -> if_stat','line',1,'p_line','parser.py',132),
  ('line -> comment','line',1,'p_line','parser.py',133),
  ('line -> print','line',1,'p_line','parser.py',134),
  ('line -> loop','line',1,'p_line','parser.py',135),
  ('line -> func_decl','line',1,'p_line','parser.py',136),
  ('loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END','loop',7,'p_loop','parser.py',143),
  ('print -> PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE','print',5,'p_print','parser.py',150),
  ('func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n','func_decl',9,'p_func_decl','parser.py',157),
  ('var_decl -> type ID ASSIGN factor_n ENDLINE','var_decl',5,'p_var_decl','parser.py',163),
  ('var_assign -> ID ASSIGN factor_n ENDLINE','var_assign',4,'p_var_assign','parser.py',170),
  ('type -> INT','type',1,'p_type','parser.py',177),
  ('type -> STRING','type',1,'p_type','parser.py',178),
  ('func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET','func_call',4,'p_func_call','parser.py',186),
  ('arg -> type ID','arg',2,'p_arg','parser.py',192),
  ('args -> args arg','args',2,'p_args','parser.py',198),
  ('args -> arg','args',1,'p_args','parser.py',199),
  ('if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if','if_stat',7,'p_if_stat','parser.py',205),
  ('end_if -> END','end_if',1,'p_end_if','parser.py',215),
  ('end_if -> else_stat','end_if',1,'p_end_if','parser.py',216),
  ('else_stat -> ELSE THEN lines END','else_stat',4,'p_else_stat','parser.py',223),
  ('expr -> expr oper_add comp','expr',3,'p_expr','parser.py',230),
  ('expr -> comp','expr',1,'p_expr','parser.py',231),
  ('brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET','brac_expr',3,'p_brac_expr','parser.py',248),
  ('oper_add -> PLUS','oper_add',1,'p_oper_add','parser.py',255),
  ('oper_add -> MINUS','oper_add',1,'p_oper_add','parser.py',256),
  ('oper_mult -> MULT','oper_mult',1,'p_oper_mult','parser.py',263),
  ('oper_mult -> DIV','oper_mult',1,'p_oper_mult','parser.py',264),
  ('oper_mult -> MOD','oper_mult',1,'p_oper_mult','parser.py',265),
  ('oper_mult -> AND','oper_mult',1,'p_oper_mult','parser.py',266),
  ('oper_mult -> OR','oper_mult',1,'p_oper_mult','parser.py',267),
  ('oper_mult -> XOR','oper_mult',1,'p_oper_mult','parser.py',268),
  ('oper_mult -> LESSER','oper_mult',1,'p_oper_mult','parser.py',269),
  ('oper_mult -> GREATER','oper_mult',1,'p_oper_mult','parser.py',270),
  ('oper_mult -> EQUAL','oper_mult',1,'p_oper_mult','parser.py',271),
  ('oper_mult -> LESSER_EQ','oper_mult',1,'p_oper_mult','parser.py',272),
  ('oper_mult -> GREATER_EQ','oper_mult',1,'p_oper_mult','parser.py',273),
  ('oper_mult -> N_EQUAL','oper_mult',1,'p_oper_mult','parser.py',274),
  ('factor -> ID','factor',1,'p_factor','parser.py',281),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',282),
  ('factor -> brac_expr','factor',1,'p_factor','parser.py',283),
  ('factor -> func_call','factor',1,'p_factor','parser.py',284),
  ('factor_n -> NOT factor','factor_n',2,'p_factor_n','parser.py',291),
  ('factor_n -> factor','factor_n',1,'p_factor_n','parser.py',292),
  ('factors_n -> factor_n','factors_n',1,'p_factors_n','parser.py',302),
  ('factors_n -> factors_n factor_n','factors_n',2,'p_factors_n','parser.py',303),
  ('comp -> comp oper_mult factor_n','comp',3,'p_comp','parser.py',308),
  ('comp -> factor_n','comp',1,'p_comp','parser.py',309),
]
