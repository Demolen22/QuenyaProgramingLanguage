
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BEGIN CLOSE_BRACKET CLOSE_CURL_BRACKET CLOSE_SQ_BRACKET COMMENT DIV ELSE END ENDLINE EQUAL FUNCTION GREATER GREATER_EQ ID IF INT LESSER LESSER_EQ LIST LOOP MINUS MOD MULT NOT NULL NUMBER N_EQUAL OPEN_BRACKET OPEN_CURL_BRACKET OPEN_SQ_BRACKET OR PLUS PRINT PROGRAM RETURN STRING STRING_EXPR THEN XOR\n        program_decl : PROGRAM block\n        \n        comment : COMMENT\n        \n        block : BEGIN lines END\n        \n        lines : lines line\n                | line\n        \n        line : var_decl\n                | var_assign\n                | if_stat\n                | comment\n                | print\n                | loop\n                | func_decl\n                | table_decl\n                | table_assign\n        \n        loop : LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END\n        \n        print : PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE\n        \n        table_decl : LIST type NUMBER ID ENDLINE\n        \n        table_assign : ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE\n        \n        func_decl : FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n\n        \n        var_decl : INT ID ASSIGN factor_n ENDLINE\n                | STRING ID ASSIGN string_opers ENDLINE\n        \n        var_assign : ID ASSIGN factor_n ENDLINE\n                    | ID ASSIGN string_opers ENDLINE\n        \n        string_opers : string_opers PLUS STRING_EXPR\n                        | string_opers MINUS STRING_EXPR\n                        | STRING_EXPR\n        \n        type : INT\n               | STRING\n        \n        func_call : ID OPEN_BRACKET factors_n CLOSE_BRACKET\n        \n        arg : type ID\n        \n        args : args arg\n               | arg\n        \n        if_stat : IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if\n        \n        end_if : END\n                 | else_stat\n        \n        else_stat : ELSE THEN lines END\n        \n        expr : expr oper_add comp\n               | comp\n        \n        brac_expr : OPEN_BRACKET expr CLOSE_BRACKET\n        \n        oper_add : PLUS\n                   | MINUS\n        \n        oper_mult : MULT\n                    | DIV\n                    | MOD\n                    | AND\n                    | OR\n                    | XOR\n                    | LESSER\n                    | GREATER\n                    | EQUAL\n                    | LESSER_EQ\n                    | GREATER_EQ\n                    | N_EQUAL\n        \n        factor : ID\n                 | NUMBER\n                 | brac_expr\n                 | func_call\n        \n        factor_n : NOT factor\n                    | factor\n        \n        factors_n : factor_n\n                | factors_n factor_n\n        \n        comp : comp oper_mult factor_n\n               | factor_n\n        '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,3,25,],[0,-1,-3,]),'BEGIN':([2,86,104,],[4,103,113,]),'INT':([4,5,6,7,8,9,10,11,12,13,14,15,20,24,26,39,43,45,46,47,56,60,61,64,87,88,91,96,98,99,102,103,105,106,107,108,111,112,113,114,115,116,117,119,120,121,123,124,125,],[16,16,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,36,-4,-54,-59,-55,-56,-57,36,-22,-23,-58,36,-32,-20,-39,-21,16,-16,16,-31,-30,-17,-29,16,16,16,-18,-33,-34,-35,-15,16,16,16,-19,-36,]),'STRING':([4,5,6,7,8,9,10,11,12,13,14,15,20,24,26,39,43,45,46,47,56,60,61,64,87,88,91,96,98,99,102,103,105,106,107,108,111,112,113,114,115,116,117,119,120,121,123,124,125,],[18,18,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,37,-4,-54,-59,-55,-56,-57,37,-22,-23,-58,37,-32,-20,-39,-21,18,-16,18,-31,-30,-17,-29,18,18,18,-18,-33,-34,-35,-15,18,18,18,-19,-36,]),'ID':([4,5,6,7,8,9,10,11,12,13,14,15,16,18,20,23,26,28,29,31,32,33,36,37,38,39,42,43,45,46,47,48,57,59,60,61,64,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,89,91,92,93,96,97,98,99,102,103,107,108,109,111,112,113,114,115,116,117,119,120,121,122,123,124,125,],[17,17,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,27,30,-2,34,-4,39,39,39,39,39,-27,-28,39,-54,39,-59,-55,-56,-57,39,90,39,-22,-23,-58,39,-40,-41,39,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,106,-20,39,-60,-39,39,-21,17,-16,17,-17,-29,-61,17,17,17,-18,-33,-34,-35,-15,17,17,39,17,-19,-36,]),'IF':([4,5,6,7,8,9,10,11,12,13,14,15,20,26,39,43,45,46,47,60,61,64,91,96,98,99,102,103,107,108,111,112,113,114,115,116,117,119,120,121,123,124,125,],[19,19,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-54,-59,-55,-56,-57,-22,-23,-58,-20,-39,-21,19,-16,19,-17,-29,19,19,19,-18,-33,-34,-35,-15,19,19,19,-19,-36,]),'COMMENT':([4,5,6,7,8,9,10,11,12,13,14,15,20,26,39,43,45,46,47,60,61,64,91,96,98,99,102,103,107,108,111,112,113,114,115,116,117,119,120,121,123,124,125,],[20,20,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-54,-59,-55,-56,-57,-22,-23,-58,-20,-39,-21,20,-16,20,-17,-29,20,20,20,-18,-33,-34,-35,-15,20,20,20,-19,-36,]),'PRINT':([4,5,6,7,8,9,10,11,12,13,14,15,20,26,39,43,45,46,47,60,61,64,91,96,98,99,102,103,107,108,111,112,113,114,115,116,117,119,120,121,123,124,125,],[21,21,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-54,-59,-55,-56,-57,-22,-23,-58,-20,-39,-21,21,-16,21,-17,-29,21,21,21,-18,-33,-34,-35,-15,21,21,21,-19,-36,]),'LOOP':([4,5,6,7,8,9,10,11,12,13,14,15,20,26,39,43,45,46,47,60,61,64,91,96,98,99,102,103,107,108,111,112,113,114,115,116,117,119,120,121,123,124,125,],[22,22,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-54,-59,-55,-56,-57,-22,-23,-58,-20,-39,-21,22,-16,22,-17,-29,22,22,22,-18,-33,-34,-35,-15,22,22,22,-19,-36,]),'FUNCTION':([4,5,6,7,8,9,10,11,12,13,14,15,20,26,39,43,45,46,47,60,61,64,91,96,98,99,102,103,107,108,111,112,113,114,115,116,117,119,120,121,123,124,125,],[23,23,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-54,-59,-55,-56,-57,-22,-23,-58,-20,-39,-21,23,-16,23,-17,-29,23,23,23,-18,-33,-34,-35,-15,23,23,23,-19,-36,]),'LIST':([4,5,6,7,8,9,10,11,12,13,14,15,20,26,39,43,45,46,47,60,61,64,91,96,98,99,102,103,107,108,111,112,113,114,115,116,117,119,120,121,123,124,125,],[24,24,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-54,-59,-55,-56,-57,-22,-23,-58,-20,-39,-21,24,-16,24,-17,-29,24,24,24,-18,-33,-34,-35,-15,24,24,24,-19,-36,]),'END':([5,6,7,8,9,10,11,12,13,14,15,20,26,39,43,45,46,47,60,61,64,91,96,98,102,107,108,111,112,114,115,116,117,119,123,124,125,],[25,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-54,-59,-55,-56,-57,-22,-23,-58,-20,-39,-21,-16,-17,-29,116,119,-18,-33,-34,-35,-15,125,-19,-36,]),'ELSE':([6,7,8,9,10,11,12,13,14,15,20,26,39,43,45,46,47,60,61,64,91,96,98,102,107,108,111,114,115,116,117,119,124,125,],[-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-54,-59,-55,-56,-57,-22,-23,-58,-20,-39,-21,-16,-17,-29,118,-18,-33,-34,-35,-15,-19,-36,]),'RETURN':([6,7,8,9,10,11,12,13,14,15,20,26,39,43,45,46,47,60,61,64,91,96,98,102,107,108,114,115,116,117,119,120,124,125,],[-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-4,-54,-59,-55,-56,-57,-22,-23,-58,-20,-39,-21,-16,-17,-29,-18,-33,-34,-35,-15,122,-19,-36,]),'ASSIGN':([17,27,30,66,],[28,38,50,97,]),'OPEN_SQ_BRACKET':([17,],[29,]),'OPEN_BRACKET':([19,21,22,28,29,31,32,33,34,38,39,42,43,45,46,47,48,59,64,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,92,93,96,97,108,109,122,],[31,32,33,48,48,48,48,48,56,48,59,48,-59,-55,-56,-57,48,48,-58,48,-40,-41,48,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,48,-60,-39,48,-29,-61,48,]),'NOT':([28,29,31,32,33,38,39,43,45,46,47,48,59,64,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,92,93,96,97,108,109,122,],[42,42,42,42,42,42,-54,-59,-55,-56,-57,42,42,-58,42,-40,-41,42,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,42,-60,-39,42,-29,-61,42,]),'STRING_EXPR':([28,50,62,63,],[44,44,94,95,]),'NUMBER':([28,29,31,32,33,35,36,37,38,39,42,43,45,46,47,48,59,64,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,92,93,96,97,108,109,122,],[45,45,45,45,45,57,-27,-28,45,-54,45,-59,-55,-56,-57,45,45,-58,45,-40,-41,45,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,45,-60,-39,45,-29,-61,45,]),'ENDLINE':([39,40,41,43,44,45,46,47,58,64,67,85,90,94,95,96,108,110,],[-54,60,61,-59,-26,-55,-56,-57,91,-58,98,102,107,-24,-25,-39,-29,114,]),'CLOSE_SQ_BRACKET':([39,43,45,46,47,49,64,96,108,],[-54,-59,-55,-56,-57,66,-58,-39,-29,]),'MULT':([39,43,45,46,47,52,53,64,96,100,101,108,],[-54,-59,-55,-56,-57,73,-63,-58,-39,73,-62,-29,]),'DIV':([39,43,45,46,47,52,53,64,96,100,101,108,],[-54,-59,-55,-56,-57,74,-63,-58,-39,74,-62,-29,]),'MOD':([39,43,45,46,47,52,53,64,96,100,101,108,],[-54,-59,-55,-56,-57,75,-63,-58,-39,75,-62,-29,]),'AND':([39,43,45,46,47,52,53,64,96,100,101,108,],[-54,-59,-55,-56,-57,76,-63,-58,-39,76,-62,-29,]),'OR':([39,43,45,46,47,52,53,64,96,100,101,108,],[-54,-59,-55,-56,-57,77,-63,-58,-39,77,-62,-29,]),'XOR':([39,43,45,46,47,52,53,64,96,100,101,108,],[-54,-59,-55,-56,-57,78,-63,-58,-39,78,-62,-29,]),'LESSER':([39,43,45,46,47,52,53,64,96,100,101,108,],[-54,-59,-55,-56,-57,79,-63,-58,-39,79,-62,-29,]),'GREATER':([39,43,45,46,47,52,53,64,96,100,101,108,],[-54,-59,-55,-56,-57,80,-63,-58,-39,80,-62,-29,]),'EQUAL':([39,43,45,46,47,52,53,64,96,100,101,108,],[-54,-59,-55,-56,-57,81,-63,-58,-39,81,-62,-29,]),'LESSER_EQ':([39,43,45,46,47,52,53,64,96,100,101,108,],[-54,-59,-55,-56,-57,82,-63,-58,-39,82,-62,-29,]),'GREATER_EQ':([39,43,45,46,47,52,53,64,96,100,101,108,],[-54,-59,-55,-56,-57,83,-63,-58,-39,83,-62,-29,]),'N_EQUAL':([39,43,45,46,47,52,53,64,96,100,101,108,],[-54,-59,-55,-56,-57,84,-63,-58,-39,84,-62,-29,]),'CLOSE_BRACKET':([39,43,45,46,47,51,52,53,54,55,64,65,87,88,92,93,96,100,101,105,106,108,109,],[-54,-59,-55,-56,-57,68,-38,-63,85,86,-58,96,104,-32,108,-60,-39,-37,-62,-31,-30,-29,-61,]),'PLUS':([39,41,43,44,45,46,47,51,52,53,54,55,64,65,67,94,95,96,100,101,108,],[-54,62,-59,-26,-55,-56,-57,70,-38,-63,70,70,-58,70,62,-24,-25,-39,-37,-62,-29,]),'MINUS':([39,41,43,44,45,46,47,51,52,53,54,55,64,65,67,94,95,96,100,101,108,],[-54,63,-59,-26,-55,-56,-57,71,-38,-63,71,71,-58,71,63,-24,-25,-39,-37,-62,-29,]),'THEN':([68,118,],[99,121,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program_decl':([0,],[1,]),'block':([2,],[3,]),'lines':([4,99,103,113,121,],[5,111,112,120,123,]),'line':([4,5,99,103,111,112,113,120,121,123,],[6,26,6,6,26,26,6,26,6,26,]),'var_decl':([4,5,99,103,111,112,113,120,121,123,],[7,7,7,7,7,7,7,7,7,7,]),'var_assign':([4,5,99,103,111,112,113,120,121,123,],[8,8,8,8,8,8,8,8,8,8,]),'if_stat':([4,5,99,103,111,112,113,120,121,123,],[9,9,9,9,9,9,9,9,9,9,]),'comment':([4,5,99,103,111,112,113,120,121,123,],[10,10,10,10,10,10,10,10,10,10,]),'print':([4,5,99,103,111,112,113,120,121,123,],[11,11,11,11,11,11,11,11,11,11,]),'loop':([4,5,99,103,111,112,113,120,121,123,],[12,12,12,12,12,12,12,12,12,12,]),'func_decl':([4,5,99,103,111,112,113,120,121,123,],[13,13,13,13,13,13,13,13,13,13,]),'table_decl':([4,5,99,103,111,112,113,120,121,123,],[14,14,14,14,14,14,14,14,14,14,]),'table_assign':([4,5,99,103,111,112,113,120,121,123,],[15,15,15,15,15,15,15,15,15,15,]),'type':([24,56,87,],[35,89,89,]),'factor_n':([28,29,31,32,33,38,48,59,69,72,92,97,122,],[40,49,53,53,53,58,53,93,53,101,109,110,124,]),'string_opers':([28,50,],[41,67,]),'factor':([28,29,31,32,33,38,42,48,59,69,72,92,97,122,],[43,43,43,43,43,43,64,43,43,43,43,43,43,43,]),'brac_expr':([28,29,31,32,33,38,42,48,59,69,72,92,97,122,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'func_call':([28,29,31,32,33,38,42,48,59,69,72,92,97,122,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'expr':([31,32,33,48,],[51,54,55,65,]),'comp':([31,32,33,48,69,],[52,52,52,52,100,]),'oper_add':([51,54,55,65,],[69,69,69,69,]),'oper_mult':([52,100,],[72,72,]),'args':([56,],[87,]),'arg':([56,87,],[88,105,]),'factors_n':([59,],[92,]),'end_if':([111,],[115,]),'else_stat':([111,],[117,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program_decl","S'",1,None,None,None),
  ('program_decl -> PROGRAM block','program_decl',2,'p_program_decl','parser.py',79),
  ('comment -> COMMENT','comment',1,'p_comment','parser.py',85),
  ('block -> BEGIN lines END','block',3,'p_block','parser.py',90),
  ('lines -> lines line','lines',2,'p_lines','parser.py',235),
  ('lines -> line','lines',1,'p_lines','parser.py',236),
  ('line -> var_decl','line',1,'p_line','parser.py',246),
  ('line -> var_assign','line',1,'p_line','parser.py',247),
  ('line -> if_stat','line',1,'p_line','parser.py',248),
  ('line -> comment','line',1,'p_line','parser.py',249),
  ('line -> print','line',1,'p_line','parser.py',250),
  ('line -> loop','line',1,'p_line','parser.py',251),
  ('line -> func_decl','line',1,'p_line','parser.py',252),
  ('line -> table_decl','line',1,'p_line','parser.py',253),
  ('line -> table_assign','line',1,'p_line','parser.py',254),
  ('loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN lines END','loop',7,'p_loop','parser.py',261),
  ('print -> PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE','print',5,'p_print','parser.py',271),
  ('table_decl -> LIST type NUMBER ID ENDLINE','table_decl',5,'p_table_decl','parser.py',277),
  ('table_assign -> ID OPEN_SQ_BRACKET factor_n CLOSE_SQ_BRACKET ASSIGN factor_n ENDLINE','table_assign',7,'p_table_assign','parser.py',284),
  ('func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN lines RETURN factor_n','func_decl',9,'p_func_decl','parser.py',291),
  ('var_decl -> INT ID ASSIGN factor_n ENDLINE','var_decl',5,'p_var_decl','parser.py',304),
  ('var_decl -> STRING ID ASSIGN string_opers ENDLINE','var_decl',5,'p_var_decl','parser.py',305),
  ('var_assign -> ID ASSIGN factor_n ENDLINE','var_assign',4,'p_var_assign','parser.py',312),
  ('var_assign -> ID ASSIGN string_opers ENDLINE','var_assign',4,'p_var_assign','parser.py',313),
  ('string_opers -> string_opers PLUS STRING_EXPR','string_opers',3,'p_string_opers','parser.py',320),
  ('string_opers -> string_opers MINUS STRING_EXPR','string_opers',3,'p_string_opers','parser.py',321),
  ('string_opers -> STRING_EXPR','string_opers',1,'p_string_opers','parser.py',322),
  ('type -> INT','type',1,'p_type','parser.py',331),
  ('type -> STRING','type',1,'p_type','parser.py',332),
  ('func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET','func_call',4,'p_func_call','parser.py',340),
  ('arg -> type ID','arg',2,'p_arg','parser.py',350),
  ('args -> args arg','args',2,'p_args','parser.py',358),
  ('args -> arg','args',1,'p_args','parser.py',359),
  ('if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET THEN lines end_if','if_stat',7,'p_if_stat','parser.py',370),
  ('end_if -> END','end_if',1,'p_end_if','parser.py',377),
  ('end_if -> else_stat','end_if',1,'p_end_if','parser.py',378),
  ('else_stat -> ELSE THEN lines END','else_stat',4,'p_else_stat','parser.py',386),
  ('expr -> expr oper_add comp','expr',3,'p_expr','parser.py',393),
  ('expr -> comp','expr',1,'p_expr','parser.py',394),
  ('brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET','brac_expr',3,'p_brac_expr','parser.py',404),
  ('oper_add -> PLUS','oper_add',1,'p_oper_add','parser.py',411),
  ('oper_add -> MINUS','oper_add',1,'p_oper_add','parser.py',412),
  ('oper_mult -> MULT','oper_mult',1,'p_oper_mult','parser.py',419),
  ('oper_mult -> DIV','oper_mult',1,'p_oper_mult','parser.py',420),
  ('oper_mult -> MOD','oper_mult',1,'p_oper_mult','parser.py',421),
  ('oper_mult -> AND','oper_mult',1,'p_oper_mult','parser.py',422),
  ('oper_mult -> OR','oper_mult',1,'p_oper_mult','parser.py',423),
  ('oper_mult -> XOR','oper_mult',1,'p_oper_mult','parser.py',424),
  ('oper_mult -> LESSER','oper_mult',1,'p_oper_mult','parser.py',425),
  ('oper_mult -> GREATER','oper_mult',1,'p_oper_mult','parser.py',426),
  ('oper_mult -> EQUAL','oper_mult',1,'p_oper_mult','parser.py',427),
  ('oper_mult -> LESSER_EQ','oper_mult',1,'p_oper_mult','parser.py',428),
  ('oper_mult -> GREATER_EQ','oper_mult',1,'p_oper_mult','parser.py',429),
  ('oper_mult -> N_EQUAL','oper_mult',1,'p_oper_mult','parser.py',430),
  ('factor -> ID','factor',1,'p_factor','parser.py',437),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',438),
  ('factor -> brac_expr','factor',1,'p_factor','parser.py',439),
  ('factor -> func_call','factor',1,'p_factor','parser.py',440),
  ('factor_n -> NOT factor','factor_n',2,'p_factor_n','parser.py',447),
  ('factor_n -> factor','factor_n',1,'p_factor_n','parser.py',448),
  ('factors_n -> factor_n','factors_n',1,'p_factors_n','parser.py',458),
  ('factors_n -> factors_n factor_n','factors_n',2,'p_factors_n','parser.py',459),
  ('comp -> comp oper_mult factor_n','comp',3,'p_comp','parser.py',469),
  ('comp -> factor_n','comp',1,'p_comp','parser.py',470),
]
