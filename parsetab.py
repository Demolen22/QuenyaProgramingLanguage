
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BEGIN CLOSE_BRACKET CLOSE_CURL_BRACKET CLOSE_SQ_BRACKET COMMENT DIV ELSE END ENDLINE EQUAL FUNCTION GREATER GREATER_EQ ID IF INT ITERABLE_LOOP LESSER LESSER_EQ LIST LOOP MINUS MOD MULT NOT NULL NUMBER N_EQUAL OPEN_BRACKET OPEN_CURL_BRACKET OPEN_SQ_BRACKET OR PLUS PRINT PROGRAM RETURN STRING STRING_EXPR THEN XOR\n        program_decl : PROGRAM block\n        \n        block : BEGIN block_body END\n        \n        block_body : lines\n                     | loop\n                     | if_stat\n                     | func_decl\n        \n        lines : lines line\n                | line\n        \n        line : line_body ENDLINE\n        \n        line_body : var_decl\n                    | func_call\n                    | var_assign\n        \n        loop : LOOP OPEN_BRACKET expr CLOSE_BRACKET block\n        \n        func_decl : FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN block_body RETURN return_val\n        \n        return_val : ID\n                     | expr\n                     | func_call\n        \n        var_decl : type ID ASSIGN value\n        \n        var_assign : ID ASSIGN value\n        \n        value : NUMBER\n                | STRING_EXPR\n                | func_call\n                | expr\n        \n        values : values value\n                 | value\n        \n        type : INT\n               | STRING\n        \n        func_call : ID OPEN_BRACKET values CLOSE_BRACKET\n        \n        arg : type ID\n        \n        args : args arg\n               | arg\n        \n        if_stat : IF OPEN_BRACKET expr CLOSE_BRACKET THEN block_body end_if\n        \n        end_if : END\n                 | else_stat\n        \n        else_stat : ELSE THEN block_body END\n        \n        expr : expr oper_add comp\n               | comp\n        \n        brac_expr : OPEN_BRACKET expr CLOSE_BRACKET\n        \n        oper_add : PLUS\n                   | MINUS\n        \n        oper_mult : MULT\n                    | DIV\n                    | MOD\n                    | AND\n                    | OR\n                    | XOR\n                    | LESSER\n                    | GREATER\n                    | EQUAL\n                    | LESSER_EQ\n                    | GREATER_EQ\n        \n        factor : ID\n                 | NUMBER\n                 | brac_expr\n        \n        factor_n : NOT factor\n                    | factor\n        \n        comp : comp oper_mult factor_n\n               | factor_n\n        '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,3,22,],[0,-1,-2,]),'BEGIN':([2,52,81,],[4,4,85,]),'LOOP':([4,80,85,91,],[11,11,11,11,]),'IF':([4,80,85,91,],[12,12,12,12,]),'FUNCTION':([4,80,85,91,],[13,13,13,13,]),'ID':([4,6,10,13,19,20,21,23,24,25,27,28,29,31,33,34,35,36,37,38,39,42,43,44,45,46,47,48,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,73,74,76,78,79,80,85,91,92,],[14,14,-8,26,30,-26,-27,-7,37,37,42,42,-9,37,-37,-58,37,-56,-52,-53,-54,-52,42,-25,-20,-21,-22,-23,42,37,-39,-40,37,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-55,83,-28,-24,-38,-36,-57,14,14,14,94,]),'INT':([4,6,10,23,29,41,70,71,80,82,83,85,91,],[20,20,-8,-7,-9,20,20,-31,20,-30,-29,20,20,]),'STRING':([4,6,10,23,29,41,70,71,80,82,83,85,91,],[21,21,-8,-7,-9,21,21,-31,21,-30,-29,21,21,]),'END':([5,6,7,8,9,10,22,23,29,33,34,36,37,38,39,68,73,76,77,78,79,84,86,87,88,93,94,95,96,97,98,],[22,-3,-4,-5,-6,-8,-2,-7,-9,-37,-58,-56,-52,-53,-54,-55,-28,-38,-13,-36,-57,87,-32,-33,-34,98,-15,-14,-16,-17,-35,]),'ELSE':([6,7,8,9,10,22,23,29,33,34,36,37,38,39,68,73,76,77,78,79,84,86,87,88,94,95,96,97,98,],[-3,-4,-5,-6,-8,-2,-7,-9,-37,-58,-56,-52,-53,-54,-55,-28,-38,-13,-36,-57,89,-32,-33,-34,-15,-14,-16,-17,-35,]),'RETURN':([6,7,8,9,10,22,23,29,33,34,36,37,38,39,68,73,76,77,78,79,86,87,88,90,94,95,96,97,98,],[-3,-4,-5,-6,-8,-2,-7,-9,-37,-58,-56,-52,-53,-54,-55,-28,-38,-13,-36,-57,-32,-33,-34,92,-15,-14,-16,-17,-35,]),'OPEN_BRACKET':([11,12,14,24,25,26,27,28,31,33,34,35,36,37,38,39,42,43,44,45,46,47,48,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,74,76,78,79,92,94,],[24,25,27,31,31,41,31,31,31,-37,-58,31,-56,-52,-53,-54,27,31,-25,-20,-21,-22,-23,31,31,-39,-40,31,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-55,-28,-24,-38,-36,-57,31,27,]),'ASSIGN':([14,30,],[28,50,]),'ENDLINE':([15,16,17,18,33,34,36,37,38,39,42,45,46,47,48,49,68,73,75,76,78,79,],[29,-10,-11,-12,-37,-58,-56,-52,-53,-54,-52,-20,-21,-22,-23,-19,-55,-28,-18,-38,-36,-57,]),'NOT':([24,25,27,28,31,33,34,36,37,38,39,42,43,44,45,46,47,48,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,74,76,78,79,92,],[35,35,35,35,35,-37,-58,-56,-52,-53,-54,-52,35,-25,-20,-21,-22,-23,35,35,-39,-40,35,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-55,-28,-24,-38,-36,-57,35,]),'NUMBER':([24,25,27,28,31,33,34,35,36,37,38,39,42,43,44,45,46,47,48,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,74,76,78,79,92,],[38,38,45,45,38,-37,-58,38,-56,-52,-53,-54,-52,45,-25,-20,-21,-22,-23,45,38,-39,-40,38,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-55,-28,-24,-38,-36,-57,38,]),'STRING_EXPR':([27,28,33,34,36,37,38,39,42,43,44,45,46,47,48,50,68,73,74,76,78,79,],[46,46,-37,-58,-56,-52,-53,-54,-52,46,-25,-20,-21,-22,-23,46,-55,-28,-24,-38,-36,-57,]),'CLOSE_BRACKET':([32,33,34,36,37,38,39,40,42,43,44,45,46,47,48,51,68,70,71,73,74,76,78,79,82,83,],[52,-37,-58,-56,-52,-53,-54,69,-52,73,-25,-20,-21,-22,-23,76,-55,81,-31,-28,-24,-38,-36,-57,-30,-29,]),'PLUS':([32,33,34,36,37,38,39,40,42,45,48,51,68,76,78,79,94,96,],[54,-37,-58,-56,-52,-53,-54,54,-52,-53,54,54,-55,-38,-36,-57,-52,54,]),'MINUS':([32,33,34,36,37,38,39,40,42,45,48,51,68,76,78,79,94,96,],[55,-37,-58,-56,-52,-53,-54,55,-52,-53,55,55,-55,-38,-36,-57,-52,55,]),'MULT':([33,34,36,37,38,39,42,45,68,76,78,79,94,],[57,-58,-56,-52,-53,-54,-52,-53,-55,-38,57,-57,-52,]),'DIV':([33,34,36,37,38,39,42,45,68,76,78,79,94,],[58,-58,-56,-52,-53,-54,-52,-53,-55,-38,58,-57,-52,]),'MOD':([33,34,36,37,38,39,42,45,68,76,78,79,94,],[59,-58,-56,-52,-53,-54,-52,-53,-55,-38,59,-57,-52,]),'AND':([33,34,36,37,38,39,42,45,68,76,78,79,94,],[60,-58,-56,-52,-53,-54,-52,-53,-55,-38,60,-57,-52,]),'OR':([33,34,36,37,38,39,42,45,68,76,78,79,94,],[61,-58,-56,-52,-53,-54,-52,-53,-55,-38,61,-57,-52,]),'XOR':([33,34,36,37,38,39,42,45,68,76,78,79,94,],[62,-58,-56,-52,-53,-54,-52,-53,-55,-38,62,-57,-52,]),'LESSER':([33,34,36,37,38,39,42,45,68,76,78,79,94,],[63,-58,-56,-52,-53,-54,-52,-53,-55,-38,63,-57,-52,]),'GREATER':([33,34,36,37,38,39,42,45,68,76,78,79,94,],[64,-58,-56,-52,-53,-54,-52,-53,-55,-38,64,-57,-52,]),'EQUAL':([33,34,36,37,38,39,42,45,68,76,78,79,94,],[65,-58,-56,-52,-53,-54,-52,-53,-55,-38,65,-57,-52,]),'LESSER_EQ':([33,34,36,37,38,39,42,45,68,76,78,79,94,],[66,-58,-56,-52,-53,-54,-52,-53,-55,-38,66,-57,-52,]),'GREATER_EQ':([33,34,36,37,38,39,42,45,68,76,78,79,94,],[67,-58,-56,-52,-53,-54,-52,-53,-55,-38,67,-57,-52,]),'THEN':([69,89,],[80,91,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program_decl':([0,],[1,]),'block':([2,52,],[3,77,]),'block_body':([4,80,85,91,],[5,84,90,93,]),'lines':([4,80,85,91,],[6,6,6,6,]),'loop':([4,80,85,91,],[7,7,7,7,]),'if_stat':([4,80,85,91,],[8,8,8,8,]),'func_decl':([4,80,85,91,],[9,9,9,9,]),'line':([4,6,80,85,91,],[10,23,10,10,10,]),'line_body':([4,6,80,85,91,],[15,15,15,15,15,]),'var_decl':([4,6,80,85,91,],[16,16,16,16,16,]),'func_call':([4,6,27,28,43,50,80,85,91,92,],[17,17,47,47,47,47,17,17,17,97,]),'var_assign':([4,6,80,85,91,],[18,18,18,18,18,]),'type':([4,6,41,70,80,85,91,],[19,19,72,72,19,19,19,]),'expr':([24,25,27,28,31,43,50,92,],[32,40,48,48,51,48,48,96,]),'comp':([24,25,27,28,31,43,50,53,92,],[33,33,33,33,33,33,33,78,33,]),'factor_n':([24,25,27,28,31,43,50,53,56,92,],[34,34,34,34,34,34,34,34,79,34,]),'factor':([24,25,27,28,31,35,43,50,53,56,92,],[36,36,36,36,36,68,36,36,36,36,36,]),'brac_expr':([24,25,27,28,31,35,43,50,53,56,92,],[39,39,39,39,39,39,39,39,39,39,39,]),'values':([27,],[43,]),'value':([27,28,43,50,],[44,49,74,75,]),'oper_add':([32,40,48,51,96,],[53,53,53,53,53,]),'oper_mult':([33,78,],[56,56,]),'args':([41,],[70,]),'arg':([41,70,],[71,82,]),'end_if':([84,],[86,]),'else_stat':([84,],[88,]),'return_val':([92,],[95,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program_decl","S'",1,None,None,None),
  ('program_decl -> PROGRAM block','program_decl',2,'p_program_decl','parser.py',20),
  ('block -> BEGIN block_body END','block',3,'p_block','parser.py',26),
  ('block_body -> lines','block_body',1,'p_block_body','parser.py',32),
  ('block_body -> loop','block_body',1,'p_block_body','parser.py',33),
  ('block_body -> if_stat','block_body',1,'p_block_body','parser.py',34),
  ('block_body -> func_decl','block_body',1,'p_block_body','parser.py',35),
  ('lines -> lines line','lines',2,'p_lines','parser.py',41),
  ('lines -> line','lines',1,'p_lines','parser.py',42),
  ('line -> line_body ENDLINE','line',2,'p_line','parser.py',48),
  ('line_body -> var_decl','line_body',1,'p_line_body','parser.py',54),
  ('line_body -> func_call','line_body',1,'p_line_body','parser.py',55),
  ('line_body -> var_assign','line_body',1,'p_line_body','parser.py',56),
  ('loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET block','loop',5,'p_loop','parser.py',62),
  ('func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN block_body RETURN return_val','func_decl',9,'p_func_decl','parser.py',68),
  ('return_val -> ID','return_val',1,'p_return_val','parser.py',73),
  ('return_val -> expr','return_val',1,'p_return_val','parser.py',74),
  ('return_val -> func_call','return_val',1,'p_return_val','parser.py',75),
  ('var_decl -> type ID ASSIGN value','var_decl',4,'p_var_decl','parser.py',81),
  ('var_assign -> ID ASSIGN value','var_assign',3,'p_var_assign','parser.py',87),
  ('value -> NUMBER','value',1,'p_value','parser.py',93),
  ('value -> STRING_EXPR','value',1,'p_value','parser.py',94),
  ('value -> func_call','value',1,'p_value','parser.py',95),
  ('value -> expr','value',1,'p_value','parser.py',96),
  ('values -> values value','values',2,'p_values','parser.py',102),
  ('values -> value','values',1,'p_values','parser.py',103),
  ('type -> INT','type',1,'p_type','parser.py',109),
  ('type -> STRING','type',1,'p_type','parser.py',110),
  ('func_call -> ID OPEN_BRACKET values CLOSE_BRACKET','func_call',4,'p_func_call','parser.py',116),
  ('arg -> type ID','arg',2,'p_arg','parser.py',122),
  ('args -> args arg','args',2,'p_args','parser.py',128),
  ('args -> arg','args',1,'p_args','parser.py',129),
  ('if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET THEN block_body end_if','if_stat',7,'p_if_stat','parser.py',135),
  ('end_if -> END','end_if',1,'p_end_if','parser.py',141),
  ('end_if -> else_stat','end_if',1,'p_end_if','parser.py',142),
  ('else_stat -> ELSE THEN block_body END','else_stat',4,'p_else_stat','parser.py',148),
  ('expr -> expr oper_add comp','expr',3,'p_expr','parser.py',154),
  ('expr -> comp','expr',1,'p_expr','parser.py',155),
  ('brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET','brac_expr',3,'p_brac_expr','parser.py',161),
  ('oper_add -> PLUS','oper_add',1,'p_oper_add','parser.py',167),
  ('oper_add -> MINUS','oper_add',1,'p_oper_add','parser.py',168),
  ('oper_mult -> MULT','oper_mult',1,'p_oper_mult','parser.py',174),
  ('oper_mult -> DIV','oper_mult',1,'p_oper_mult','parser.py',175),
  ('oper_mult -> MOD','oper_mult',1,'p_oper_mult','parser.py',176),
  ('oper_mult -> AND','oper_mult',1,'p_oper_mult','parser.py',177),
  ('oper_mult -> OR','oper_mult',1,'p_oper_mult','parser.py',178),
  ('oper_mult -> XOR','oper_mult',1,'p_oper_mult','parser.py',179),
  ('oper_mult -> LESSER','oper_mult',1,'p_oper_mult','parser.py',180),
  ('oper_mult -> GREATER','oper_mult',1,'p_oper_mult','parser.py',181),
  ('oper_mult -> EQUAL','oper_mult',1,'p_oper_mult','parser.py',182),
  ('oper_mult -> LESSER_EQ','oper_mult',1,'p_oper_mult','parser.py',183),
  ('oper_mult -> GREATER_EQ','oper_mult',1,'p_oper_mult','parser.py',184),
  ('factor -> ID','factor',1,'p_factor','parser.py',190),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',191),
  ('factor -> brac_expr','factor',1,'p_factor','parser.py',192),
  ('factor_n -> NOT factor','factor_n',2,'p_factor_n','parser.py',198),
  ('factor_n -> factor','factor_n',1,'p_factor_n','parser.py',199),
  ('comp -> comp oper_mult factor_n','comp',3,'p_comp','parser.py',204),
  ('comp -> factor_n','comp',1,'p_comp','parser.py',205),
]
