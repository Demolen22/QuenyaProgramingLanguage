
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BEGIN CLOSE_BRACKET CLOSE_CURL_BRACKET CLOSE_SQ_BRACKET COMMENT DIV ELSE END ENDLINE EQUAL FUNCTION GREATER GREATER_EQ ID IF INT ITERABLE_LOOP LESSER LESSER_EQ LIST LOOP MINUS MOD MULT NOT NULL NUMBER N_EQUAL OPEN_BRACKET OPEN_CURL_BRACKET OPEN_SQ_BRACKET OR PLUS PRINT PROGRAM RETURN STRING STRING_EXPR THEN XOR\n        program_decl : PROGRAM block\n        \n        comment : COMMENT\n        \n        block : BEGIN block_body END\n        \n        block_body : lines\n                     | loop\n                     | func_decl\n        \n        lines : lines line\n                | line\n        \n        line : var_decl\n                | var_assign\n                | if_stat\n                | comment\n                | print\n        \n        loop : LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN block_body END\n        \n        print : PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE\n        \n        func_decl : FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN block_body RETURN factor_n\n        \n        var_decl : type ID ASSIGN factor_n ENDLINE\n        \n        var_assign : ID ASSIGN factor_n ENDLINE\n        \n        type : INT\n               | STRING\n        \n        func_call : ID OPEN_BRACKET factors_n CLOSE_BRACKET\n        \n        arg : type ID\n        \n        args : args arg\n               | arg\n        \n        if_stat : IF OPEN_BRACKET expr CLOSE_BRACKET THEN block_body end_if\n        \n        end_if : END\n                 | else_stat\n        \n        else_stat : ELSE THEN block_body END\n        \n        expr : expr oper_add comp\n               | comp\n        \n        brac_expr : OPEN_BRACKET expr CLOSE_BRACKET\n        \n        oper_add : PLUS\n                   | MINUS\n        \n        oper_mult : MULT\n                    | DIV\n                    | MOD\n                    | AND\n                    | OR\n                    | XOR\n                    | LESSER\n                    | GREATER\n                    | EQUAL\n                    | LESSER_EQ\n                    | GREATER_EQ\n                    | N_EQUAL\n        \n        factor : ID\n                 | NUMBER\n                 | brac_expr\n                 | func_call\n        \n        factor_n : NOT factor\n                    | factor\n        \n        factors_n : factor_n\n                | factors_n factor_n\n        \n        comp : comp oper_mult factor_n\n               | factor_n\n        '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,3,24,],[0,-1,-3,]),'BEGIN':([2,48,80,],[4,75,89,]),'LOOP':([4,75,84,89,98,],[10,10,10,10,10,]),'FUNCTION':([4,75,84,89,98,],[11,11,11,11,11,]),'ID':([4,6,9,11,13,14,15,16,17,18,20,22,23,25,26,28,30,31,32,36,37,38,39,40,41,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,74,75,78,79,83,84,85,87,88,89,93,94,95,97,98,101,],[12,12,-8,27,-9,-10,-11,-12,-13,29,-2,-19,-20,-7,38,38,38,38,38,38,-51,-46,-47,-48,-49,38,38,-32,-33,38,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-50,38,82,-18,-31,12,38,-52,-17,12,-15,-21,-53,12,-25,-26,-27,38,12,-28,]),'IF':([4,6,9,13,14,15,16,17,20,25,70,75,83,84,85,89,93,94,95,98,101,],[19,19,-8,-9,-10,-11,-12,-13,-2,-7,-18,19,-17,19,-15,19,-25,-26,-27,19,-28,]),'COMMENT':([4,6,9,13,14,15,16,17,20,25,70,75,83,84,85,89,93,94,95,98,101,],[20,20,-8,-9,-10,-11,-12,-13,-2,-7,-18,20,-17,20,-15,20,-25,-26,-27,20,-28,]),'PRINT':([4,6,9,13,14,15,16,17,20,25,70,75,83,84,85,89,93,94,95,98,101,],[21,21,-8,-9,-10,-11,-12,-13,-2,-7,-18,21,-17,21,-15,21,-25,-26,-27,21,-28,]),'INT':([4,6,9,13,14,15,16,17,20,25,42,67,68,70,75,81,82,83,84,85,89,93,94,95,98,101,],[22,22,-8,-9,-10,-11,-12,-13,-2,-7,22,22,-24,-18,22,-23,-22,-17,22,-15,22,-25,-26,-27,22,-28,]),'STRING':([4,6,9,13,14,15,16,17,20,25,42,67,68,70,75,81,82,83,84,85,89,93,94,95,98,101,],[23,23,-8,-9,-10,-11,-12,-13,-2,-7,23,23,-24,-18,23,-23,-22,-17,23,-15,23,-25,-26,-27,23,-28,]),'END':([5,6,7,8,9,13,14,15,16,17,20,25,37,38,39,40,41,65,70,74,83,85,86,87,90,91,93,94,95,99,100,101,],[24,-4,-5,-6,-8,-9,-10,-11,-12,-13,-2,-7,-51,-46,-47,-48,-49,-50,-18,-31,-17,-15,91,-21,94,-14,-25,-26,-27,-16,101,-28,]),'ELSE':([6,7,8,9,13,14,15,16,17,20,25,37,38,39,40,41,65,70,74,83,85,87,90,91,93,94,95,99,101,],[-4,-5,-6,-8,-9,-10,-11,-12,-13,-2,-7,-51,-46,-47,-48,-49,-50,-18,-31,-17,-15,-21,96,-14,-25,-26,-27,-16,-28,]),'RETURN':([6,7,8,9,13,14,15,16,17,20,25,37,38,39,40,41,65,70,74,83,85,87,91,92,93,94,95,99,101,],[-4,-5,-6,-8,-9,-10,-11,-12,-13,-2,-7,-51,-46,-47,-48,-49,-50,-18,-31,-17,-15,-21,-14,97,-25,-26,-27,-16,-28,]),'OPEN_BRACKET':([10,19,21,26,27,28,30,31,32,36,37,38,39,40,41,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,74,78,79,87,88,97,],[26,30,31,32,42,32,32,32,32,32,-51,66,-47,-48,-49,32,32,-32,-33,32,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-50,32,-31,32,-52,-21,-53,32,]),'ASSIGN':([12,29,],[28,44,]),'NOT':([26,28,30,31,32,37,38,39,40,41,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,74,78,79,87,88,97,],[36,36,36,36,36,-51,-46,-47,-48,-49,36,36,-32,-33,36,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-50,36,-31,36,-52,-21,-53,36,]),'NUMBER':([26,28,30,31,32,36,37,38,39,40,41,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,74,78,79,87,88,97,],[39,39,39,39,39,39,-51,-46,-47,-48,-49,39,39,-32,-33,39,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-50,39,-31,39,-52,-21,-53,39,]),'CLOSE_BRACKET':([33,34,35,37,38,39,40,41,45,46,47,65,67,68,74,76,77,78,79,81,82,87,88,],[48,-30,-55,-51,-46,-47,-48,-49,72,73,74,-50,80,-24,-31,-29,-54,87,-52,-23,-22,-21,-53,]),'PLUS':([33,34,35,37,38,39,40,41,45,46,47,65,74,76,77,87,],[50,-30,-55,-51,-46,-47,-48,-49,50,50,50,-50,-31,-29,-54,-21,]),'MINUS':([33,34,35,37,38,39,40,41,45,46,47,65,74,76,77,87,],[51,-30,-55,-51,-46,-47,-48,-49,51,51,51,-50,-31,-29,-54,-21,]),'MULT':([34,35,37,38,39,40,41,65,74,76,77,87,],[53,-55,-51,-46,-47,-48,-49,-50,-31,53,-54,-21,]),'DIV':([34,35,37,38,39,40,41,65,74,76,77,87,],[54,-55,-51,-46,-47,-48,-49,-50,-31,54,-54,-21,]),'MOD':([34,35,37,38,39,40,41,65,74,76,77,87,],[55,-55,-51,-46,-47,-48,-49,-50,-31,55,-54,-21,]),'AND':([34,35,37,38,39,40,41,65,74,76,77,87,],[56,-55,-51,-46,-47,-48,-49,-50,-31,56,-54,-21,]),'OR':([34,35,37,38,39,40,41,65,74,76,77,87,],[57,-55,-51,-46,-47,-48,-49,-50,-31,57,-54,-21,]),'XOR':([34,35,37,38,39,40,41,65,74,76,77,87,],[58,-55,-51,-46,-47,-48,-49,-50,-31,58,-54,-21,]),'LESSER':([34,35,37,38,39,40,41,65,74,76,77,87,],[59,-55,-51,-46,-47,-48,-49,-50,-31,59,-54,-21,]),'GREATER':([34,35,37,38,39,40,41,65,74,76,77,87,],[60,-55,-51,-46,-47,-48,-49,-50,-31,60,-54,-21,]),'EQUAL':([34,35,37,38,39,40,41,65,74,76,77,87,],[61,-55,-51,-46,-47,-48,-49,-50,-31,61,-54,-21,]),'LESSER_EQ':([34,35,37,38,39,40,41,65,74,76,77,87,],[62,-55,-51,-46,-47,-48,-49,-50,-31,62,-54,-21,]),'GREATER_EQ':([34,35,37,38,39,40,41,65,74,76,77,87,],[63,-55,-51,-46,-47,-48,-49,-50,-31,63,-54,-21,]),'N_EQUAL':([34,35,37,38,39,40,41,65,74,76,77,87,],[64,-55,-51,-46,-47,-48,-49,-50,-31,64,-54,-21,]),'ENDLINE':([37,38,39,40,41,43,65,71,73,74,87,],[-51,-46,-47,-48,-49,70,-50,83,85,-31,-21,]),'THEN':([72,96,],[84,98,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program_decl':([0,],[1,]),'block':([2,],[3,]),'block_body':([4,75,84,89,98,],[5,86,90,92,100,]),'lines':([4,75,84,89,98,],[6,6,6,6,6,]),'loop':([4,75,84,89,98,],[7,7,7,7,7,]),'func_decl':([4,75,84,89,98,],[8,8,8,8,8,]),'line':([4,6,75,84,89,98,],[9,25,9,9,9,9,]),'var_decl':([4,6,75,84,89,98,],[13,13,13,13,13,13,]),'var_assign':([4,6,75,84,89,98,],[14,14,14,14,14,14,]),'if_stat':([4,6,75,84,89,98,],[15,15,15,15,15,15,]),'comment':([4,6,75,84,89,98,],[16,16,16,16,16,16,]),'print':([4,6,75,84,89,98,],[17,17,17,17,17,17,]),'type':([4,6,42,67,75,84,89,98,],[18,18,69,69,18,18,18,18,]),'expr':([26,30,31,32,],[33,45,46,47,]),'comp':([26,30,31,32,49,],[34,34,34,34,76,]),'factor_n':([26,28,30,31,32,44,49,52,66,78,97,],[35,43,35,35,35,71,35,77,79,88,99,]),'factor':([26,28,30,31,32,36,44,49,52,66,78,97,],[37,37,37,37,37,65,37,37,37,37,37,37,]),'brac_expr':([26,28,30,31,32,36,44,49,52,66,78,97,],[40,40,40,40,40,40,40,40,40,40,40,40,]),'func_call':([26,28,30,31,32,36,44,49,52,66,78,97,],[41,41,41,41,41,41,41,41,41,41,41,41,]),'oper_add':([33,45,46,47,],[49,49,49,49,]),'oper_mult':([34,76,],[52,52,]),'args':([42,],[67,]),'arg':([42,67,],[68,81,]),'factors_n':([66,],[78,]),'end_if':([90,],[93,]),'else_stat':([90,],[95,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program_decl","S'",1,None,None,None),
  ('program_decl -> PROGRAM block','program_decl',2,'p_program_decl','parser.py',39),
  ('comment -> COMMENT','comment',1,'p_comment','parser.py',49),
  ('block -> BEGIN block_body END','block',3,'p_block','parser.py',54),
  ('block_body -> lines','block_body',1,'p_block_body','parser.py',74),
  ('block_body -> loop','block_body',1,'p_block_body','parser.py',75),
  ('block_body -> func_decl','block_body',1,'p_block_body','parser.py',76),
  ('lines -> lines line','lines',2,'p_lines','parser.py',83),
  ('lines -> line','lines',1,'p_lines','parser.py',84),
  ('line -> var_decl','line',1,'p_line','parser.py',95),
  ('line -> var_assign','line',1,'p_line','parser.py',96),
  ('line -> if_stat','line',1,'p_line','parser.py',97),
  ('line -> comment','line',1,'p_line','parser.py',98),
  ('line -> print','line',1,'p_line','parser.py',99),
  ('loop -> LOOP OPEN_BRACKET expr CLOSE_BRACKET BEGIN block_body END','loop',7,'p_loop','parser.py',106),
  ('print -> PRINT OPEN_BRACKET expr CLOSE_BRACKET ENDLINE','print',5,'p_print','parser.py',113),
  ('func_decl -> FUNCTION ID OPEN_BRACKET args CLOSE_BRACKET BEGIN block_body RETURN factor_n','func_decl',9,'p_func_decl','parser.py',120),
  ('var_decl -> type ID ASSIGN factor_n ENDLINE','var_decl',5,'p_var_decl','parser.py',126),
  ('var_assign -> ID ASSIGN factor_n ENDLINE','var_assign',4,'p_var_assign','parser.py',133),
  ('type -> INT','type',1,'p_type','parser.py',140),
  ('type -> STRING','type',1,'p_type','parser.py',141),
  ('func_call -> ID OPEN_BRACKET factors_n CLOSE_BRACKET','func_call',4,'p_func_call','parser.py',149),
  ('arg -> type ID','arg',2,'p_arg','parser.py',155),
  ('args -> args arg','args',2,'p_args','parser.py',161),
  ('args -> arg','args',1,'p_args','parser.py',162),
  ('if_stat -> IF OPEN_BRACKET expr CLOSE_BRACKET THEN block_body end_if','if_stat',7,'p_if_stat','parser.py',168),
  ('end_if -> END','end_if',1,'p_end_if','parser.py',178),
  ('end_if -> else_stat','end_if',1,'p_end_if','parser.py',179),
  ('else_stat -> ELSE THEN block_body END','else_stat',4,'p_else_stat','parser.py',186),
  ('expr -> expr oper_add comp','expr',3,'p_expr','parser.py',193),
  ('expr -> comp','expr',1,'p_expr','parser.py',194),
  ('brac_expr -> OPEN_BRACKET expr CLOSE_BRACKET','brac_expr',3,'p_brac_expr','parser.py',209),
  ('oper_add -> PLUS','oper_add',1,'p_oper_add','parser.py',216),
  ('oper_add -> MINUS','oper_add',1,'p_oper_add','parser.py',217),
  ('oper_mult -> MULT','oper_mult',1,'p_oper_mult','parser.py',224),
  ('oper_mult -> DIV','oper_mult',1,'p_oper_mult','parser.py',225),
  ('oper_mult -> MOD','oper_mult',1,'p_oper_mult','parser.py',226),
  ('oper_mult -> AND','oper_mult',1,'p_oper_mult','parser.py',227),
  ('oper_mult -> OR','oper_mult',1,'p_oper_mult','parser.py',228),
  ('oper_mult -> XOR','oper_mult',1,'p_oper_mult','parser.py',229),
  ('oper_mult -> LESSER','oper_mult',1,'p_oper_mult','parser.py',230),
  ('oper_mult -> GREATER','oper_mult',1,'p_oper_mult','parser.py',231),
  ('oper_mult -> EQUAL','oper_mult',1,'p_oper_mult','parser.py',232),
  ('oper_mult -> LESSER_EQ','oper_mult',1,'p_oper_mult','parser.py',233),
  ('oper_mult -> GREATER_EQ','oper_mult',1,'p_oper_mult','parser.py',234),
  ('oper_mult -> N_EQUAL','oper_mult',1,'p_oper_mult','parser.py',235),
  ('factor -> ID','factor',1,'p_factor','parser.py',242),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',243),
  ('factor -> brac_expr','factor',1,'p_factor','parser.py',244),
  ('factor -> func_call','factor',1,'p_factor','parser.py',245),
  ('factor_n -> NOT factor','factor_n',2,'p_factor_n','parser.py',253),
  ('factor_n -> factor','factor_n',1,'p_factor_n','parser.py',254),
  ('factors_n -> factor_n','factors_n',1,'p_factors_n','parser.py',265),
  ('factors_n -> factors_n factor_n','factors_n',2,'p_factors_n','parser.py',266),
  ('comp -> comp oper_mult factor_n','comp',3,'p_comp','parser.py',271),
  ('comp -> factor_n','comp',1,'p_comp','parser.py',272),
]
